{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1593141509690},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1593141509690},{"_id":"themes/next/.DS_Store","hash":"5245446c43d71e354c499d23476abe8a54ea8738","modified":1593141509690},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1593141509691},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1593141509691},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1593141509691},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1593141509691},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1593141509691},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1593141509691},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1593141509692},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1593141509711},{"_id":"themes/next/_config.yml","hash":"5389986ea0784c9587425b9c8794c8d72d3e54ee","modified":1593141509692},{"_id":"themes/next/README.md","hash":"efcdc4b0ca791c3fc64afa28c8721e137f2d11ea","modified":1593141509692},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1593141509692},{"_id":"source/_posts/2019.md","hash":"3ca01d2b21cdcc494a86d62507c0e836b221dd07","modified":1593141509649},{"_id":"source/_posts/copy.md","hash":"6f1bc04b4a3adf13ea37db770fdb240a4106a20f","modified":1593141509656},{"_id":"source/_posts/React-Redux学习挖坑.md","hash":"3a0d7cf388d50f662d2b07a541e3a0f8ce2d07e1","modified":1593141509655},{"_id":"source/_posts/Interview.md","hash":"4f7962d327a5646b42d27deb1647dc3f53886f96","modified":1593141509654},{"_id":"source/_posts/downLoad.md","hash":"ab95619f1446906c1054f001e46f5fde8bed8702","modified":1593141638649},{"_id":"source/_posts/express.md","hash":"52313a40b792a12bf2c0b2a3e3f6bec43ba39fc5","modified":1593141509657},{"_id":"source/_posts/git-action.md","hash":"3a807331545703a8af46f2cbca79d0648ab7daaf","modified":1593141509657},{"_id":"source/_posts/drap.md","hash":"cb7df5232e12d3b463e34c683eae5edfd00e63e8","modified":1593141509656},{"_id":"source/_posts/jenkins.md","hash":"76f2ee457db8da8932e47d9bb5e3d331c6610af3","modified":1593141509657},{"_id":"source/_posts/html.md","hash":"de018174bdab549cf5014654482396ab65fb5d64","modified":1593141509657},{"_id":"source/_posts/miniapp.md","hash":"3a93d6c7bac3e7b10d9b3c74a3dba8f5971a9d5a","modified":1593141509660},{"_id":"source/_posts/js防抖.md","hash":"ada5e91fdfa11f9d18bf5d4dbddde7f299e4c287","modified":1593141509659},{"_id":"source/_posts/shop.md","hash":"56e27b658db8ddf2f915fa418389ff6941c1d270","modified":1593141509660},{"_id":"source/_posts/study.md","hash":"985e7628f0ea6bad55430dc05473a93bbc860767","modified":1593141509665},{"_id":"source/_posts/this.md","hash":"84ad33b617643e6f68b56c62f76420603b11d3b5","modified":1593141509666},{"_id":"source/_posts/reg.md","hash":"42b299e32cb41a1536b97ff5250da4134a978689","modified":1593141509660},{"_id":"source/_posts/waterfall.md","hash":"bbd37f2db4df83a74d682d66783a9712542a37bb","modified":1593141509666},{"_id":"source/_posts/webpack4-x.md","hash":"8c1a5864f2970e43dc145a98727ea7592d8e1f3c","modified":1593141509666},{"_id":"source/about/index.md","hash":"9631f50d03e55d66f7547904d43b2d77adf3bdb7","modified":1593141509667},{"_id":"source/_posts/获取滚动条宽度.md","hash":"d306f3c50b2b85e47f6158b2d07ee7de52dea01d","modified":1593141509667},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1593141509693},{"_id":"source/tags/index.md","hash":"5e64085ef88544e3441b85aebd1b5d2ecc14a218","modified":1593141509667},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1593141509693},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1593141509693},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1593141509693},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1593141509694},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1593141509693},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1593141509694},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1593141509694},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1593141509694},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1593141509695},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1593141509695},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1593141509695},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1593141509695},{"_id":"themes/next/languages/zh-Hans.yml","hash":"f7e8332d4cc813f72a83a96b3b21e272a6ae1f11","modified":1593141509695},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1593141509696},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1593141509695},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1593141509696},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1593141509709},{"_id":"themes/next/layout/index.swig","hash":"20b3e2b2c5964b578c94f0f2f17c5146d9da4966","modified":1593141509710},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1593141509710},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1593141509711},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1593141509710},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1593141509710},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1593141509712},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1593141509710},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1593141509774},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1593141509711},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1593141509774},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1593141509735},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1593141509774},{"_id":"source/_posts/React-Redux学习挖坑/console.png","hash":"2e8803ccacdd128155bd5d008a26b021ca2aba06","modified":1593141509656},{"_id":"source/_posts/Interview/z.png","hash":"5cdb2f40a0539c9e12e78e4190836dadc975d62f","modified":1593141509655},{"_id":"source/_posts/React-Redux学习挖坑/redux.png","hash":"492b62c0a4076f94dcfc1639b4b410c557051b7d","modified":1593141509656},{"_id":"source/_posts/shop/guo.png","hash":"e4c1ba426bd275dd69936bfa0ad949e418bfff17","modified":1593141509661},{"_id":"source/_posts/shop/a.png","hash":"2d5e1a568274c89f0e8f89635f0d4168ec9dbcb1","modified":1593141509661},{"_id":"source/_posts/shop/bei.png","hash":"07d6906ff4b8ef86daf2e27afe02eccdec52a56a","modified":1593141509661},{"_id":"source/_posts/shop/kao.png","hash":"1c57a08f6e384a7f45eb41b32897b2bd56314834","modified":1593141509662},{"_id":"source/_posts/shop/lan.png","hash":"f90b7f8bf2c3c5a13247e9370eb9bb4781e10b46","modified":1593141509662},{"_id":"source/_posts/shop/mian.png","hash":"68c3a3e1ef85044a60c5a3aca2ec2f4d924cb364","modified":1593141509663},{"_id":"source/_posts/shop/t.png","hash":"b13ec165862c4f3a20e0e58aa993c4ba8b37466d","modified":1593141509664},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1593141509696},{"_id":"source/_posts/shop/yi2.png","hash":"c3258e43ad941f568cd84d56cbf0867fb09ff979","modified":1593141509665},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1593141509696},{"_id":"source/_posts/shop/yi3.png","hash":"4b78b07c8f529bb4d7b15a88086ae78f609502d7","modified":1593141509665},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1593141509697},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1593141509697},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1593141509697},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1593141509698},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1593141509697},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1593141509697},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1593141509707},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1593141509707},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1593141509707},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1593141509707},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1593141509708},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1593141509707},{"_id":"themes/next/layout/_partials/comments.swig","hash":"3fd9d91b07934954e2f602d26821971a20ec147e","modified":1593141509698},{"_id":"themes/next/layout/_partials/footer.swig","hash":"593448d922e6334de409826b6e766364d08b33da","modified":1593141509698},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1593141509708},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1593141509699},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1593141509699},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1593141509699},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1593141509698},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1593141509712},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1593141509712},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1593141509712},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1593141509713},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1593141509713},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1593141509713},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1593141509713},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1593141509713},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1593141509714},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1593141509700},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1593141509701},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1593141509701},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1593141509736},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1593141509735},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1593141509735},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1593141509736},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1593141509736},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1593141509702},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1593141509736},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1593141509737},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1593141509737},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1593141509736},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1593141509737},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1593141509738},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1593141509738},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1593141509738},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1593141509737},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1593141509737},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1593141509739},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1593141509738},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1593141509738},{"_id":"source/_posts/jenkins/success.png","hash":"8f72d5f256ceef1da42d6407977df7869239e969","modified":1593141509659},{"_id":"source/_posts/shop/shop.png","hash":"7fc7b922b66bb8b7a4edfc41df121105242e515f","modified":1593141509663},{"_id":"source/_posts/shop/yi1.png","hash":"22466c716088535829b0a036b859214f1ce3b469","modified":1593141509664},{"_id":"source/_posts/jenkins/action.png","hash":"7552b44f8a2a2db9ec224d4df3e82e3fe3e0de03","modified":1593141509658},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1593141509738},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1593141509702},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1593141509702},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1593141509728},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1593141509729},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1593141509729},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1593141509734},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1593141509735},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1593141509703},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1593141509703},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1593141509703},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1593141509703},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1593141509704},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1593141509703},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1593141509704},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1593141509704},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1593141509704},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1593141509705},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1593141509705},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1593141509704},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1593141509704},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1593141509705},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"32278bc59cb70a242ef35d2552547bf314b0d89c","modified":1593141509706},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1593141509705},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1593141509706},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1593141509705},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"75d973fc442af673a15b253379a1839df29b1a32","modified":1593141509706},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1593141509706},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1593141509707},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1593141509706},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1593141509706},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1593141509709},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1593141509699},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1593141509709},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1593141509699},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1593141509700},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1593141509700},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1593141509709},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1593141509700},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1593141509700},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1593141509709},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1593141509701},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1593141509702},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1593141509701},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1593141509702},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1593141509702},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1593141509728},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1593141509728},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1593141509729},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1593141509701},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1593141509734},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1593141509729},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1593141509734},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1593141509734},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1593141509735},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1593141509739},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1593141509739},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1593141509739},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1593141509740},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1593141509740},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1593141509740},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1593141509740},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1593141509741},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1593141509740},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1593141509745},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1593141509741},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1593141509748},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1593141509741},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1593141509747},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1593141509748},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1593141509752},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1593141509752},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1593141509748},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1593141509752},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1593141509752},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1593141509754},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1593141509753},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1593141509754},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1593141509754},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1593141509754},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1593141509761},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1593141509764},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1593141509764},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1593141509762},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1593141509763},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1593141509762},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1593141509762},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1593141509763},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1593141509763},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1593141509763},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1593141509764},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1593141509764},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1593141509765},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1593141509765},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1593141509765},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1593141509765},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1593141509765},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1593141509766},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1593141509766},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1593141509766},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1593141509766},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1593141509766},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1593141509766},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1593141509767},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1593141509767},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1593141509767},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1593141509771},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1593141509767},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1593141509771},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1593141509773},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1593141509773},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1593141509773},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1593141509708},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1593141509708},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1593141509714},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1593141509715},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1593141509715},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1593141509715},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1593141509715},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1593141509718},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1593141509723},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1593141509727},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1593141509727},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1593141509727},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1593141509728},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1593141509728},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1593141509727},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1593141509728},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1593141509730},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1593141509730},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1593141509730},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1593141509730},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1593141509730},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1593141509731},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1593141509730},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1593141509732},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1593141509731},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1593141509732},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1593141509732},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1593141509732},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1593141509732},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1593141509733},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1593141509733},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1593141509733},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1593141509733},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1593141509734},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1593141509733},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1593141509741},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1593141509743},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1593141509744},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1593141509749},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1593141509748},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1593141509749},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1593141509749},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1593141509749},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1593141509750},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1593141509751},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1593141509745},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1593141509751},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1593141509753},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1593141509752},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1593141509753},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1593141509755},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1593141509762},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1593141509771},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1593141509771},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1593141509744},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1593141509760},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1593141509761},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1593141509754},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1593141509755},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1593141509772},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1593141509716},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1593141509715},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1593141509716},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1593141509717},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1593141509716},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1593141509717},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1593141509716},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1593141509717},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1593141509716},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1593141509717},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1593141509717},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1593141509717},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1593141509718},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1593141509719},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1593141509718},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1593141509719},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1593141509719},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1593141509719},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1593141509719},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1593141509719},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1593141509720},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1593141509720},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1593141509720},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1593141509720},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1593141509720},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1593141509720},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1593141509720},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1593141509721},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1593141509721},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1593141509721},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1593141509721},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1593141509721},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1593141509722},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1593141509721},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1593141509722},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1593141509722},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1593141509722},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1593141509722},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1593141509722},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1593141509723},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1593141509723},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1593141509723},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1593141509723},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1593141509724},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1593141509724},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1593141509724},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1593141509724},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1593141509725},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1593141509724},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1593141509725},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1593141509725},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"a01484e350ad5fc9b1fdfbfafb2ddd9687ad4d20","modified":1593141509725},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1593141509726},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1593141509726},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1593141509725},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1593141509726},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"f6e217260609a0998668c01fd2489929eb3f45c6","modified":1593141509726},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1593141509726},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1593141509726},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1593141509731},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1593141509731},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1593141509732},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1593141509742},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1593141509742},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1593141509750},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1593141509743},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1593141509742},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1593141509743},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1593141509750},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1593141509750},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1593141509757},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1593141509756},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1593141509760},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1593141509750},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1593141509750},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1593141509751},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1593141509747},{"_id":"source/_posts/2019/tu.jpg","hash":"1cd2e62dc8fd25d1c30d354e9a806af56e1a59fb","modified":1593141509653},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1593141509759},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1593141509770},{"_id":"public/search.xml","hash":"3534e6c0a1a0f5abfd1a648a93dff507ed4bf71f","modified":1593142584205},{"_id":"public/about/index.html","hash":"96529a78a18532b5bdd7f1e5ca9ae59c966b327f","modified":1593142289301},{"_id":"public/tags/index.html","hash":"fe4fde645d635e8aa1afcfebcfba9730037e195a","modified":1593142289301},{"_id":"public/2019/12/05/study/index.html","hash":"b8e0ead54409e78c9e4f1057a746fb1e2879fe15","modified":1593142289301},{"_id":"public/2019/11/19/miniapp/index.html","hash":"8cf48f32065fe6d8864723cd9408535115e42480","modified":1593142289301},{"_id":"public/2018/12/20/2019/index.html","hash":"5b5fb05018f17e399000431c176ddfd8d81b8b38","modified":1593142289302},{"_id":"public/archives/page/2/index.html","hash":"e44a6acbb4741f5cc89de34ad78f7272f2caef01","modified":1593142289302},{"_id":"public/archives/2018/index.html","hash":"5f77acc9eb7fd4a4685823d758d9ddc0ff2f0341","modified":1593142289302},{"_id":"public/archives/2018/12/index.html","hash":"0ea35010a48554a3aa2bc92781817d9e10cdcbc4","modified":1593142289302},{"_id":"public/archives/2019/index.html","hash":"00a9357dae9f8fa6e92e44f80857cfa34fd551c0","modified":1593142289302},{"_id":"public/archives/2019/page/2/index.html","hash":"190aca659a8f1de1fd2cb21449fb344e5950a7b6","modified":1593142289302},{"_id":"public/archives/2019/01/index.html","hash":"adb7a201dcb351adb644fef6596c7f498640d8e0","modified":1593142289302},{"_id":"public/archives/2019/02/index.html","hash":"a7ee9fbb10c854fc9ea58ef84faea9462d6b8ef9","modified":1593142289302},{"_id":"public/archives/2019/06/index.html","hash":"86e3119af9fcf443c5f0ae4890e0525b25486c1a","modified":1593142289302},{"_id":"public/archives/2019/07/index.html","hash":"3c6ead4d37907300b6cc7f5692e60524e0f80605","modified":1593142289302},{"_id":"public/archives/2019/10/index.html","hash":"896252836f29c16430aac46cb98d63f683b75e85","modified":1593142289302},{"_id":"public/archives/2019/11/index.html","hash":"8c7ae1c80ac2a477246ddcb8e47981bae1c3d503","modified":1593142289302},{"_id":"public/archives/2019/12/index.html","hash":"258d263f807572c071bebf93c66a12ace9ee1872","modified":1593142289302},{"_id":"public/archives/2020/index.html","hash":"e4893c7203cb23bd1fb3e18be114c04f12afd0a1","modified":1593142289302},{"_id":"public/archives/2020/06/index.html","hash":"64797e681fb43b6d32189bc4c78cdf0e6634db82","modified":1593142289302},{"_id":"public/index.html","hash":"e3c886cc0c2a1edf7a651e01f30fdbba88a2c9f4","modified":1593142289302},{"_id":"public/tags/about/index.html","hash":"59f57521e8381ba3853dccf4e457f2b37611b041","modified":1593142289302},{"_id":"public/tags/JS/index.html","hash":"71e483f449867039f8d748fd95fb259132f361a8","modified":1593142289302},{"_id":"public/tags/React/index.html","hash":"7c2f41c3c9eb4e72bab20f7e1234e70397b92847","modified":1593142289302},{"_id":"public/tags/express/index.html","hash":"9de9a038f58d6c134968b300049e5c88f5d491b6","modified":1593142289303},{"_id":"public/tags/git/index.html","hash":"0be5f66aac10e706a97f827c46e481e8dcd5efc6","modified":1593142289303},{"_id":"public/tags/JavaScript/index.html","hash":"9a1ae4824a1be0a2bd64e819f0c6ebde741c6850","modified":1593142289303},{"_id":"public/tags/Life/index.html","hash":"66bb932d3ee732d7d1c0659198994c6346729027","modified":1593142289303},{"_id":"public/tags/webpack/index.html","hash":"866fe10ff9fb290776c6d0fd74d132e7a11b60d0","modified":1593142289303},{"_id":"public/2020/06/26/downLoad/index.html","hash":"8c6e33454e618dd5fd7ef951e5f742c071bc3ffd","modified":1593142289303},{"_id":"public/2019/11/18/waterfall/index.html","hash":"d78443e2953f33103810d098d73d88d474411a58","modified":1593142289303},{"_id":"public/2019/11/01/express/index.html","hash":"4c798690e56ad7256a12e013dd1688f0174da355","modified":1593142289303},{"_id":"public/2019/11/01/git-action/index.html","hash":"6a7399efe4db34a3bde1b7fa84fce9d4090cc217","modified":1593142289303},{"_id":"public/2019/10/23/jenkins/index.html","hash":"16629f61cf0fb1970618cd3807ebfca9f6a03ed7","modified":1593142289303},{"_id":"public/2019/10/14/drap/index.html","hash":"7ac19faba14cbaa7eda63081d331a8e496aedd78","modified":1593142289303},{"_id":"public/2019/10/12/获取滚动条宽度/index.html","hash":"fee8662e6fa2067f2cb2db4e68817b7256fe1f8a","modified":1593142289303},{"_id":"public/2019/07/15/html/index.html","hash":"90fa4328ec0b41422be96a78af333d9efeb37c6f","modified":1593142289303},{"_id":"public/2019/06/05/copy/index.html","hash":"3ff81776724e50b5fa3dd27d5d9fe601fb342a4d","modified":1593142289303},{"_id":"public/2019/02/20/Interview/index.html","hash":"b74efdb62e22d23665cba5369d16e3c4b3d9a316","modified":1593142289303},{"_id":"public/2019/01/20/shop/index.html","hash":"a3fd74219bee59397fcccc15beaf5a1cbcbe403c","modified":1593142289303},{"_id":"public/2018/12/28/js防抖/index.html","hash":"048a08173bbe49a6c66aa1ec1d8502d8883477a5","modified":1593142289303},{"_id":"public/2018/12/27/this/index.html","hash":"b39b71c4c75a69339e5290fb652bb2fe186bc46b","modified":1593142289303},{"_id":"public/2018/12/24/reg/index.html","hash":"732f76686b913e81df51046e6a715569bb431b52","modified":1593142289303},{"_id":"public/2018/12/23/React-Redux学习挖坑/index.html","hash":"81e9dc75c7774b1c4d6be7ab384794431e1e6922","modified":1593142289303},{"_id":"public/2018/12/20/webpack4-x/index.html","hash":"373b58e2e0edd49e88de2a1158b47cfa7676f1ec","modified":1593142289303},{"_id":"public/archives/index.html","hash":"5b3fb780637f322f2b8113e1313d59e9b0a3d15b","modified":1593142289303},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1593142289315},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1593142289316},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1593142289316},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1593142289316},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1593142289316},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1593142289316},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1593142289316},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1593142289316},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1593142289316},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1593142289316},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1593142289316},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1593142289316},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1593142289316},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1593142289316},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1593142289316},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1593142289316},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1593142289316},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1593142289316},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1593142289316},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1593142289316},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1593142289316},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1593142289316},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1593142289316},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1593142289316},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1593142289317},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1593142289317},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1593142289317},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1593142289317},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1593142289317},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1593142289317},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1593142289317},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1593142289317},{"_id":"public/2019/02/20/Interview/z.png","hash":"5cdb2f40a0539c9e12e78e4190836dadc975d62f","modified":1593142289317},{"_id":"public/2018/12/23/React-Redux学习挖坑/console.png","hash":"2e8803ccacdd128155bd5d008a26b021ca2aba06","modified":1593142289317},{"_id":"public/2018/12/23/React-Redux学习挖坑/redux.png","hash":"492b62c0a4076f94dcfc1639b4b410c557051b7d","modified":1593142289317},{"_id":"public/2019/01/20/shop/a.png","hash":"2d5e1a568274c89f0e8f89635f0d4168ec9dbcb1","modified":1593142289317},{"_id":"public/2019/01/20/shop/guo.png","hash":"e4c1ba426bd275dd69936bfa0ad949e418bfff17","modified":1593142289317},{"_id":"public/2019/01/20/shop/bei.png","hash":"07d6906ff4b8ef86daf2e27afe02eccdec52a56a","modified":1593142289317},{"_id":"public/2019/01/20/shop/lan.png","hash":"f90b7f8bf2c3c5a13247e9370eb9bb4781e10b46","modified":1593142289317},{"_id":"public/2019/01/20/shop/kao.png","hash":"1c57a08f6e384a7f45eb41b32897b2bd56314834","modified":1593142289317},{"_id":"public/2019/01/20/shop/mian.png","hash":"68c3a3e1ef85044a60c5a3aca2ec2f4d924cb364","modified":1593142289317},{"_id":"public/2019/01/20/shop/t.png","hash":"b13ec165862c4f3a20e0e58aa993c4ba8b37466d","modified":1593142289317},{"_id":"public/2019/01/20/shop/yi2.png","hash":"c3258e43ad941f568cd84d56cbf0867fb09ff979","modified":1593142289317},{"_id":"public/assets/js/Meting.min.js","hash":"a0585220b918d78649a7893279e1ec4fb5abe835","modified":1593142289317},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1593142289915},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1593142289919},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1593142289922},{"_id":"public/2019/10/23/jenkins/success.png","hash":"8f72d5f256ceef1da42d6407977df7869239e969","modified":1593142289922},{"_id":"public/2019/01/20/shop/shop.png","hash":"7fc7b922b66bb8b7a4edfc41df121105242e515f","modified":1593142289922},{"_id":"public/2019/01/20/shop/yi3.png","hash":"4b78b07c8f529bb4d7b15a88086ae78f609502d7","modified":1593142289922},{"_id":"public/2019/01/20/shop/yi1.png","hash":"22466c716088535829b0a036b859214f1ce3b469","modified":1593142289922},{"_id":"public/assets/css/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1593142289922},{"_id":"public/assets/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1593142289923},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1593142289946},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1593142289946},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1593142289946},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1593142289946},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1593142289947},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1593142289947},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1593142289947},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1593142289947},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1593142289947},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1593142289947},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1593142289947},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1593142289947},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1593142289947},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1593142289947},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1593142289947},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1593142289947},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1593142289947},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1593142289948},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1593142289948},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1593142289948},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1593142289948},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1593142289948},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1593142289948},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1593142289948},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1593142289948},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1593142289948},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1593142289949},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1593142289949},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1593142289949},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1593142289949},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1593142289949},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1593142289949},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1593142289949},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1593142289949},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1593142289949},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1593142289949},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1593142289949},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1593142289949},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1593142289949},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1593142289949},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1593142289949},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1593142289950},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1593142289950},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1593142289950},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1593142289950},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1593142289950},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1593142289950},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1593142289950},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1593142289950},{"_id":"public/css/main.css","hash":"6f43fa0de2d68a990101914409a5e3e20a657e0a","modified":1593142289950},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1593142289950},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1593142289950},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1593142289951},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1593142289951},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1593142289951},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1593142289951},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1593142289951},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1593142289951},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1593142289951},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1593142289951},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1593142289951},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1593142289951},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1593142289951},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1593142289952},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1593142289952},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1593142289952},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1593142289952},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1593142289952},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1593142289952},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1593142289952},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1593142289963},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1593142289963},{"_id":"public/2019/10/23/jenkins/action.png","hash":"7552b44f8a2a2db9ec224d4df3e82e3fe3e0de03","modified":1593142289963},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1593142289969},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1593142290285},{"_id":"public/2018/12/20/2019/tu.jpg","hash":"1cd2e62dc8fd25d1c30d354e9a806af56e1a59fb","modified":1593142290419}],"Category":[],"Data":[],"Page":[{"title":"关于我","tags":"about","date":"2018-12-20T01:51:17.000Z","_content":"\n### 李小朋\n\n### 我永远喜欢邓紫棋！\n\n### 我永远喜欢 J.FIA！\n\n### 我永远喜欢桥本环奈！\n\n### 我永远喜欢新垣结衣！\n\n### 我永远喜欢小兔子！\n\n### 喜欢健身多点\n","source":"about/index.md","raw":"---\ntitle: 关于我\ntags: about\ndate: 2018-12-20 09:51:17\n---\n\n### 李小朋\n\n### 我永远喜欢邓紫棋！\n\n### 我永远喜欢 J.FIA！\n\n### 我永远喜欢桥本环奈！\n\n### 我永远喜欢新垣结衣！\n\n### 我永远喜欢小兔子！\n\n### 喜欢健身多点\n","updated":"2020-06-26T03:18:29.667Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckbvns72a0001igujamaarmlb","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"李小朋\"><a href=\"#李小朋\" class=\"headerlink\" title=\"李小朋\"></a>李小朋</h3><h3 id=\"我永远喜欢邓紫棋！\"><a href=\"#我永远喜欢邓紫棋！\" class=\"headerlink\" title=\"我永远喜欢邓紫棋！\"></a>我永远喜欢邓紫棋！</h3><h3 id=\"我永远喜欢-J-FIA！\"><a href=\"#我永远喜欢-J-FIA！\" class=\"headerlink\" title=\"我永远喜欢 J.FIA！\"></a>我永远喜欢 J.FIA！</h3><h3 id=\"我永远喜欢桥本环奈！\"><a href=\"#我永远喜欢桥本环奈！\" class=\"headerlink\" title=\"我永远喜欢桥本环奈！\"></a>我永远喜欢桥本环奈！</h3><h3 id=\"我永远喜欢新垣结衣！\"><a href=\"#我永远喜欢新垣结衣！\" class=\"headerlink\" title=\"我永远喜欢新垣结衣！\"></a>我永远喜欢新垣结衣！</h3><h3 id=\"我永远喜欢小兔子！\"><a href=\"#我永远喜欢小兔子！\" class=\"headerlink\" title=\"我永远喜欢小兔子！\"></a>我永远喜欢小兔子！</h3><h3 id=\"喜欢健身多点\"><a href=\"#喜欢健身多点\" class=\"headerlink\" title=\"喜欢健身多点\"></a>喜欢健身多点</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"李小朋\"><a href=\"#李小朋\" class=\"headerlink\" title=\"李小朋\"></a>李小朋</h3><h3 id=\"我永远喜欢邓紫棋！\"><a href=\"#我永远喜欢邓紫棋！\" class=\"headerlink\" title=\"我永远喜欢邓紫棋！\"></a>我永远喜欢邓紫棋！</h3><h3 id=\"我永远喜欢-J-FIA！\"><a href=\"#我永远喜欢-J-FIA！\" class=\"headerlink\" title=\"我永远喜欢 J.FIA！\"></a>我永远喜欢 J.FIA！</h3><h3 id=\"我永远喜欢桥本环奈！\"><a href=\"#我永远喜欢桥本环奈！\" class=\"headerlink\" title=\"我永远喜欢桥本环奈！\"></a>我永远喜欢桥本环奈！</h3><h3 id=\"我永远喜欢新垣结衣！\"><a href=\"#我永远喜欢新垣结衣！\" class=\"headerlink\" title=\"我永远喜欢新垣结衣！\"></a>我永远喜欢新垣结衣！</h3><h3 id=\"我永远喜欢小兔子！\"><a href=\"#我永远喜欢小兔子！\" class=\"headerlink\" title=\"我永远喜欢小兔子！\"></a>我永远喜欢小兔子！</h3><h3 id=\"喜欢健身多点\"><a href=\"#喜欢健身多点\" class=\"headerlink\" title=\"喜欢健身多点\"></a>喜欢健身多点</h3>"},{"date":"2018-12-20T02:02:15.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ndate: 2018-12-20 10:02:15\ntype: \"tags\"\n---\n","updated":"2020-06-26T03:18:29.667Z","path":"tags/index.html","title":"","comments":1,"layout":"page","_id":"ckbvns72c0003igujwuo1h9l9","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"2019年10月18日","date":"2018-12-20T02:50:56.000Z","top":true,"_content":"\n#### 逆光 吴青峰\n\n{% iframe \"//music.163.com/outchain/player?type=2&id=1328602542\" \"100%\" \"103px\" %}\n","source":"_posts/2019.md","raw":"---\ntitle: 2019年10月18日\ndate: 2018-12-20 10:50:56\ntags: about\ntop: true\n---\n\n#### 逆光 吴青峰\n\n{% iframe \"//music.163.com/outchain/player?type=2&id=1328602542\" \"100%\" \"103px\" %}\n","slug":"2019","published":1,"updated":"2020-06-26T03:18:29.649Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbvns7250000igujmapg40s9","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h4 id=\"逆光-吴青峰\"><a href=\"#逆光-吴青峰\" class=\"headerlink\" title=\"逆光 吴青峰\"></a>逆光 吴青峰</h4><iframe src=\"//music.163.com/outchain/player?type=2&id=1328602542\" width=\"100%\" height=\"103px\" frameborder=\"0\" allowfullscreen></iframe>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"逆光-吴青峰\"><a href=\"#逆光-吴青峰\" class=\"headerlink\" title=\"逆光 吴青峰\"></a>逆光 吴青峰</h4><iframe src=\"//music.163.com/outchain/player?type=2&id=1328602542\" width=\"100%\" height=\"103px\" frameborder=\"0\" allowfullscreen></iframe>\n"},{"title":"复制粘贴功能","date":"2019-06-05T13:04:49.000Z","_content":"\n```\nfunction copyTextToClipboard(text) {\n    var textArea = document.createElement(\"textarea\")\n\n    textArea.style.position = 'fixed'\n    textArea.style.top = 0\n    textArea.style.left = 0\n    textArea.style.width = '2em'\n    textArea.style.height = '2em'\n    textArea.style.padding = 0\n    textArea.style.border = 'none'\n    textArea.style.outline = 'none'\n    textArea.style.boxShadow = 'none'\n    textArea.style.background = 'transparent'\n    textArea.value = text\n\n    document.body.appendChild(textArea)\n\n    textArea.select()\n\n    try {\n      var msg = document.execCommand('copy') ? '成功' : '失败'\n      alert('复制内容 ' + msg);\n    } catch (err) {\n      alert('不能使用这种方法复制内容');\n    }\n\n    document.body.removeChild(textArea)\n}\n```\n\n#### copyTextToClipboard('新垣结衣')\n","source":"_posts/copy.md","raw":"---\ntitle: 复制粘贴功能\ndate: 2019-06-05 21:04:49\ntags: JS\n---\n\n```\nfunction copyTextToClipboard(text) {\n    var textArea = document.createElement(\"textarea\")\n\n    textArea.style.position = 'fixed'\n    textArea.style.top = 0\n    textArea.style.left = 0\n    textArea.style.width = '2em'\n    textArea.style.height = '2em'\n    textArea.style.padding = 0\n    textArea.style.border = 'none'\n    textArea.style.outline = 'none'\n    textArea.style.boxShadow = 'none'\n    textArea.style.background = 'transparent'\n    textArea.value = text\n\n    document.body.appendChild(textArea)\n\n    textArea.select()\n\n    try {\n      var msg = document.execCommand('copy') ? '成功' : '失败'\n      alert('复制内容 ' + msg);\n    } catch (err) {\n      alert('不能使用这种方法复制内容');\n    }\n\n    document.body.removeChild(textArea)\n}\n```\n\n#### copyTextToClipboard('新垣结衣')\n","slug":"copy","published":1,"updated":"2020-06-26T03:18:29.656Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbvns72b0002igujfynztf6h","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function copyTextToClipboard(text) &#123;</span><br><span class=\"line\">    var textArea = document.createElement(&quot;textarea&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    textArea.style.position = &apos;fixed&apos;</span><br><span class=\"line\">    textArea.style.top = 0</span><br><span class=\"line\">    textArea.style.left = 0</span><br><span class=\"line\">    textArea.style.width = &apos;2em&apos;</span><br><span class=\"line\">    textArea.style.height = &apos;2em&apos;</span><br><span class=\"line\">    textArea.style.padding = 0</span><br><span class=\"line\">    textArea.style.border = &apos;none&apos;</span><br><span class=\"line\">    textArea.style.outline = &apos;none&apos;</span><br><span class=\"line\">    textArea.style.boxShadow = &apos;none&apos;</span><br><span class=\"line\">    textArea.style.background = &apos;transparent&apos;</span><br><span class=\"line\">    textArea.value = text</span><br><span class=\"line\"></span><br><span class=\"line\">    document.body.appendChild(textArea)</span><br><span class=\"line\"></span><br><span class=\"line\">    textArea.select()</span><br><span class=\"line\"></span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      var msg = document.execCommand(&apos;copy&apos;) ? &apos;成功&apos; : &apos;失败&apos;</span><br><span class=\"line\">      alert(&apos;复制内容 &apos; + msg);</span><br><span class=\"line\">    &#125; catch (err) &#123;</span><br><span class=\"line\">      alert(&apos;不能使用这种方法复制内容&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    document.body.removeChild(textArea)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"copyTextToClipboard-‘新垣结衣’\"><a href=\"#copyTextToClipboard-‘新垣结衣’\" class=\"headerlink\" title=\"copyTextToClipboard(‘新垣结衣’)\"></a>copyTextToClipboard(‘新垣结衣’)</h4>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function copyTextToClipboard(text) &#123;</span><br><span class=\"line\">    var textArea = document.createElement(&quot;textarea&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    textArea.style.position = &apos;fixed&apos;</span><br><span class=\"line\">    textArea.style.top = 0</span><br><span class=\"line\">    textArea.style.left = 0</span><br><span class=\"line\">    textArea.style.width = &apos;2em&apos;</span><br><span class=\"line\">    textArea.style.height = &apos;2em&apos;</span><br><span class=\"line\">    textArea.style.padding = 0</span><br><span class=\"line\">    textArea.style.border = &apos;none&apos;</span><br><span class=\"line\">    textArea.style.outline = &apos;none&apos;</span><br><span class=\"line\">    textArea.style.boxShadow = &apos;none&apos;</span><br><span class=\"line\">    textArea.style.background = &apos;transparent&apos;</span><br><span class=\"line\">    textArea.value = text</span><br><span class=\"line\"></span><br><span class=\"line\">    document.body.appendChild(textArea)</span><br><span class=\"line\"></span><br><span class=\"line\">    textArea.select()</span><br><span class=\"line\"></span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      var msg = document.execCommand(&apos;copy&apos;) ? &apos;成功&apos; : &apos;失败&apos;</span><br><span class=\"line\">      alert(&apos;复制内容 &apos; + msg);</span><br><span class=\"line\">    &#125; catch (err) &#123;</span><br><span class=\"line\">      alert(&apos;不能使用这种方法复制内容&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    document.body.removeChild(textArea)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"copyTextToClipboard-‘新垣结衣’\"><a href=\"#copyTextToClipboard-‘新垣结衣’\" class=\"headerlink\" title=\"copyTextToClipboard(‘新垣结衣’)\"></a>copyTextToClipboard(‘新垣结衣’)</h4>"},{"title":"React-Redux学习挖坑","date":"2018-12-23T02:29:12.000Z","_content":"\n### 什么是 Redux\n\n> Redux 是一个流行的 JavaScript 框架，为应用程序提供一个可预测的状态容器。Redux 基于简化版本的 Flux 框架，Flux 是 Facebook 开发的一个框架。在标准的 MVC 框架中，数据可以在 UI 组件和存储之间双向流动，而 Redux 严格限制了数据只能在一个方向上流动\n> ![图](React-Redux学习挖坑/redux.png)\n\n在 Redux 中，所有的数据（比如 state）被保存在一个被称为 store 的容器中 → 在一个应用程序中只能有一个。store 本质上是一个状态树，保存了所有对象的状态。任何 UI 组件都可以直接从 store 访问特定对象的状态。要通过本地或远程组件更改状态，需要分发一个 action。分发在这里意味着将可执行信息发送到 store。当一个 store 接收到一个 action，它将把这个 action 代理给相关的 reducer。reducer 是一个纯函数，它可以查看之前的状态，执行一个 action 并且返回一个新的状态。\n**项目撸起来**\n首先创建一个 react 脚手架项目\n`create-react-app my-app`\n接下来 cd 到项目当中，安装 redux\n`yarn add redux -S`\n页面 index.js\n`import {createStore} from 'redux'`\n\n### State\n\nStore 对象包含所有数据， 当前时刻的 State，可以通过 store.getState()拿到。\n\n```\n//新建store\nconst store = createStore(reducer);\nconst state = store.getState();\nconsole.log(state);\n```\n\n### Action\n\nState 的变化，会导致页面的变化。但是，用户接触不到 State，只能接触到 View。所以，State 的变化必须是 View 导致的。Action 就是 View 发出的通知，表示 State 应该要发生变化了。Action 是一个对象。其中的 type 属性是必须的，表示 Action 的名称。其他属性可以自由设置\n`const action = {type:'0'}`\n\n### store.dispatch()\n\n派发事件，接受 action，将当前的 action 传输给 reducer，生成新的 state\n`store.dispatch(action)`\n\n### Reducer\n\nstore 收到 action 后，经过一些逻辑计算也就是 reducer，然后生成一个新的 state\n\n```\n//通过reducer遍历\n//根据老的state和action来生成新的state\nfunction reducer(state=0,action){\n    switch (action.type) {\n        case '0':\n            return state+1\n            break;\n        default:\n            return state\n            break;\n    }\n}\n```\n\n### store.subscribe()\n\n订阅事件，一旦 State 发生变化，就自动执行这个函数\n\n```\n//订阅事件\nfunction listener(){\n    console.log(store.getState())\n}\nstore.subscribe(listener);\n```\n\n下面直接来一个 demo 吧，index.js\n\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {createStore} from 'redux';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\n\nfunction reducer(state=0,action){\n    switch (action.type) {\n        case '0':\n            return state+1\n            break;\n        default:\n            return state\n            break;\n    }\n}\nconst store = createStore(reducer);\nconst state = store.getState();\n\n//订阅事件\nfunction listener(){\n    console.log(store.getState())\n}\nstore.subscribe(listener);\n\n//派发事件\nconst action = {type:'0'}\nstore.dispatch(action);\nstore.dispatch(action);\nstore.dispatch(action);\n\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n```\n\n页面打印出\n![console](React-Redux学习挖坑/console.png)\n\n### React 怎么和 Redux 一起使用呢\n\n- 把 store.dispatch 方法传递给组件，内部可以调用修改状态\n- Subscribe 订阅 render 函数，每次修改都重新渲染\n- Redux 相关代码，转移到 redux.js 进行管理\n\n在 src 目录创建 redux.js，然后将 reducer 函数放入 redux.js\nindexjs:\n\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {createStore} from 'redux';\nimport App from './App';\nimport {reducer,add} from './redux';\n\nconst store = createStore(reducer);\n\nfunction render(){\n    ReactDOM.render(<App store={store} add={add}/>, document.getElementById('root'));\n}\nrender()\nstore.subscribe(render);\n```\n\nredux.js:\n\n```\nexport function reducer(state=0,action){\n    switch (action.type) {\n        case '0':\n            return state+1\n            break;\n        default:\n            return state\n            break;\n    }\n}\nexport function add(){\n    return {type:'0'}\n}\n```\n\n页面 app.js\n\n```\nimport React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    var store = this.props.store;\n    return (\n      <div className=\"App\">\n        <p>{store.getState()}</p>\n        <button onClick={e=>store.dispatch(this.props.add())}>+</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n这样页面中，每点击一次 button，返回来的 state 就会加 1\n\n### 更进一步，处理异步，调试工具，与 react 更优雅的结合\n\nRedux 默认只处理同步，处理异步，需要 redux-thunk 插件\n使用 applyMiddleware 开始 thunk 中间件\nAction 可以返回函数，使用 dispatch 提交 action\n`yarn add redux-thunk --save`\nindex.js\n\n```\nimport {createStore,applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nconst store = createStore(reducer,applyMiddleware(thunk));\n```\n\nredux.js\n\n```\nexport function addd(){\n    return dispatch=>{\n        setTimeout(()=>{\n            dispatch({type:'0'})\n        },1000)\n    }\n}\n```\n\n刚才咱们返回是对象，这次返回的 action 是一个函数，在 app.js 调用后会发现页面在 1 秒后 state 返回+1\nredux 调试工具在 chrome 这个就需要大家科学上网了, [点击这里下载](https://pan.baidu.com/s/1qVYhg_UUHBJhJwsq9EQnyg)\n\n怎么使用该工具？\n\n- 新建 store 的时候判断 window.devToolsExtension\n- 使用 compose 结合 thunk 和 window.devToolsExtension\n- 调试窗的 redux 选项卡，实时看到 state\n\nindex.js 代码\n\n```\nimport {createStore,applyMiddleware,compose} from 'redux';\n\nconst store = createStore(reducer,compose(\n    applyMiddleware(thunk),\n    window.devToolsExtension?window.devToolsExtension():a=>a\n));\n```\n\n如果出现 state 未初始化这个错误，建议你把工具更新一下~~\n\n### 使用 react-redux\n\n`yarn add react-redux -S`\n忘记 subscribe，记住 reducer，action 和 dispatch 即可\nReact-redux 提供 connect 和 Provider 两个接口来链接\nindex.js\n\n```\nimport { Provider } from 'react-redux';\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n```\n\napp.js\n\n```\nimport {connect} from 'react-redux';\nimport {addState,remove} from './redux';\n\nclass App extends React.component{\n  render(){\n    const store = this.props.store;\n    return (\n      <div>\n        <h1>我永远喜欢新垣结衣{this.props.num}</h1>\n        <button onClick={e=>this.props.addState()}>+</button>\n        <button onClick={e=>this.props.remove()}>-</button>\n      </div>\n    )\n  }\n}\n//进行装饰器\nlet mapStatetoProps = state=>{\n  return {num : state}\n}\nlet action = {addState,remove}\nApp = connect(mapStatetoProps,action)(App)\n//\nexport default App\n```\n\nconnect 使用装饰器来写可以省略代码，首先 yarn eject 弹出来个性化配置\n首先安装一个支持装饰器的插件\n`yarn add babel-plugin-transform-decorators-legacy -D`\n\n然后在 package.json 下的 babel 添加一个参数\n\n```\n\"babel\": {\n    \"presets\": [\"react-app\"],\n    \"plugins\": [\n      [\"import\",{\"libraryName\": \"antd-mobile\",\"style\": \"css\"}],\n      [\"transform-decorators-legacy\"]  //就是这个\n    ]\n  },\n```\n\n添加之后在页面重新书写 connect\n\n```\nimport {connect} from 'react-redux';\nimport {addState,remove} from './redux';\n\n@connect(\n  state => ({num:state}),\n  {addState,remove}\n)\n\nclass App extends React.component{\n  render(){\n    const store = this.props.store;\n    return (\n      <div>\n        <h1>我永远喜欢新垣结衣{this.props.num}</h1>\n        <button onClick={e=>this.props.addState()}>+</button>\n        <button onClick={e=>this.props.remove()}>-</button>\n      </div>\n    )\n  }\n}\nexport default App\n```\n\n这样代码简洁美观\n","source":"_posts/React-Redux学习挖坑.md","raw":"---\ntitle: React-Redux学习挖坑\ndate: 2018-12-23 10:29:12\ntags: React\n---\n\n### 什么是 Redux\n\n> Redux 是一个流行的 JavaScript 框架，为应用程序提供一个可预测的状态容器。Redux 基于简化版本的 Flux 框架，Flux 是 Facebook 开发的一个框架。在标准的 MVC 框架中，数据可以在 UI 组件和存储之间双向流动，而 Redux 严格限制了数据只能在一个方向上流动\n> ![图](React-Redux学习挖坑/redux.png)\n\n在 Redux 中，所有的数据（比如 state）被保存在一个被称为 store 的容器中 → 在一个应用程序中只能有一个。store 本质上是一个状态树，保存了所有对象的状态。任何 UI 组件都可以直接从 store 访问特定对象的状态。要通过本地或远程组件更改状态，需要分发一个 action。分发在这里意味着将可执行信息发送到 store。当一个 store 接收到一个 action，它将把这个 action 代理给相关的 reducer。reducer 是一个纯函数，它可以查看之前的状态，执行一个 action 并且返回一个新的状态。\n**项目撸起来**\n首先创建一个 react 脚手架项目\n`create-react-app my-app`\n接下来 cd 到项目当中，安装 redux\n`yarn add redux -S`\n页面 index.js\n`import {createStore} from 'redux'`\n\n### State\n\nStore 对象包含所有数据， 当前时刻的 State，可以通过 store.getState()拿到。\n\n```\n//新建store\nconst store = createStore(reducer);\nconst state = store.getState();\nconsole.log(state);\n```\n\n### Action\n\nState 的变化，会导致页面的变化。但是，用户接触不到 State，只能接触到 View。所以，State 的变化必须是 View 导致的。Action 就是 View 发出的通知，表示 State 应该要发生变化了。Action 是一个对象。其中的 type 属性是必须的，表示 Action 的名称。其他属性可以自由设置\n`const action = {type:'0'}`\n\n### store.dispatch()\n\n派发事件，接受 action，将当前的 action 传输给 reducer，生成新的 state\n`store.dispatch(action)`\n\n### Reducer\n\nstore 收到 action 后，经过一些逻辑计算也就是 reducer，然后生成一个新的 state\n\n```\n//通过reducer遍历\n//根据老的state和action来生成新的state\nfunction reducer(state=0,action){\n    switch (action.type) {\n        case '0':\n            return state+1\n            break;\n        default:\n            return state\n            break;\n    }\n}\n```\n\n### store.subscribe()\n\n订阅事件，一旦 State 发生变化，就自动执行这个函数\n\n```\n//订阅事件\nfunction listener(){\n    console.log(store.getState())\n}\nstore.subscribe(listener);\n```\n\n下面直接来一个 demo 吧，index.js\n\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {createStore} from 'redux';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\n\nfunction reducer(state=0,action){\n    switch (action.type) {\n        case '0':\n            return state+1\n            break;\n        default:\n            return state\n            break;\n    }\n}\nconst store = createStore(reducer);\nconst state = store.getState();\n\n//订阅事件\nfunction listener(){\n    console.log(store.getState())\n}\nstore.subscribe(listener);\n\n//派发事件\nconst action = {type:'0'}\nstore.dispatch(action);\nstore.dispatch(action);\nstore.dispatch(action);\n\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n```\n\n页面打印出\n![console](React-Redux学习挖坑/console.png)\n\n### React 怎么和 Redux 一起使用呢\n\n- 把 store.dispatch 方法传递给组件，内部可以调用修改状态\n- Subscribe 订阅 render 函数，每次修改都重新渲染\n- Redux 相关代码，转移到 redux.js 进行管理\n\n在 src 目录创建 redux.js，然后将 reducer 函数放入 redux.js\nindexjs:\n\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {createStore} from 'redux';\nimport App from './App';\nimport {reducer,add} from './redux';\n\nconst store = createStore(reducer);\n\nfunction render(){\n    ReactDOM.render(<App store={store} add={add}/>, document.getElementById('root'));\n}\nrender()\nstore.subscribe(render);\n```\n\nredux.js:\n\n```\nexport function reducer(state=0,action){\n    switch (action.type) {\n        case '0':\n            return state+1\n            break;\n        default:\n            return state\n            break;\n    }\n}\nexport function add(){\n    return {type:'0'}\n}\n```\n\n页面 app.js\n\n```\nimport React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    var store = this.props.store;\n    return (\n      <div className=\"App\">\n        <p>{store.getState()}</p>\n        <button onClick={e=>store.dispatch(this.props.add())}>+</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n这样页面中，每点击一次 button，返回来的 state 就会加 1\n\n### 更进一步，处理异步，调试工具，与 react 更优雅的结合\n\nRedux 默认只处理同步，处理异步，需要 redux-thunk 插件\n使用 applyMiddleware 开始 thunk 中间件\nAction 可以返回函数，使用 dispatch 提交 action\n`yarn add redux-thunk --save`\nindex.js\n\n```\nimport {createStore,applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nconst store = createStore(reducer,applyMiddleware(thunk));\n```\n\nredux.js\n\n```\nexport function addd(){\n    return dispatch=>{\n        setTimeout(()=>{\n            dispatch({type:'0'})\n        },1000)\n    }\n}\n```\n\n刚才咱们返回是对象，这次返回的 action 是一个函数，在 app.js 调用后会发现页面在 1 秒后 state 返回+1\nredux 调试工具在 chrome 这个就需要大家科学上网了, [点击这里下载](https://pan.baidu.com/s/1qVYhg_UUHBJhJwsq9EQnyg)\n\n怎么使用该工具？\n\n- 新建 store 的时候判断 window.devToolsExtension\n- 使用 compose 结合 thunk 和 window.devToolsExtension\n- 调试窗的 redux 选项卡，实时看到 state\n\nindex.js 代码\n\n```\nimport {createStore,applyMiddleware,compose} from 'redux';\n\nconst store = createStore(reducer,compose(\n    applyMiddleware(thunk),\n    window.devToolsExtension?window.devToolsExtension():a=>a\n));\n```\n\n如果出现 state 未初始化这个错误，建议你把工具更新一下~~\n\n### 使用 react-redux\n\n`yarn add react-redux -S`\n忘记 subscribe，记住 reducer，action 和 dispatch 即可\nReact-redux 提供 connect 和 Provider 两个接口来链接\nindex.js\n\n```\nimport { Provider } from 'react-redux';\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n```\n\napp.js\n\n```\nimport {connect} from 'react-redux';\nimport {addState,remove} from './redux';\n\nclass App extends React.component{\n  render(){\n    const store = this.props.store;\n    return (\n      <div>\n        <h1>我永远喜欢新垣结衣{this.props.num}</h1>\n        <button onClick={e=>this.props.addState()}>+</button>\n        <button onClick={e=>this.props.remove()}>-</button>\n      </div>\n    )\n  }\n}\n//进行装饰器\nlet mapStatetoProps = state=>{\n  return {num : state}\n}\nlet action = {addState,remove}\nApp = connect(mapStatetoProps,action)(App)\n//\nexport default App\n```\n\nconnect 使用装饰器来写可以省略代码，首先 yarn eject 弹出来个性化配置\n首先安装一个支持装饰器的插件\n`yarn add babel-plugin-transform-decorators-legacy -D`\n\n然后在 package.json 下的 babel 添加一个参数\n\n```\n\"babel\": {\n    \"presets\": [\"react-app\"],\n    \"plugins\": [\n      [\"import\",{\"libraryName\": \"antd-mobile\",\"style\": \"css\"}],\n      [\"transform-decorators-legacy\"]  //就是这个\n    ]\n  },\n```\n\n添加之后在页面重新书写 connect\n\n```\nimport {connect} from 'react-redux';\nimport {addState,remove} from './redux';\n\n@connect(\n  state => ({num:state}),\n  {addState,remove}\n)\n\nclass App extends React.component{\n  render(){\n    const store = this.props.store;\n    return (\n      <div>\n        <h1>我永远喜欢新垣结衣{this.props.num}</h1>\n        <button onClick={e=>this.props.addState()}>+</button>\n        <button onClick={e=>this.props.remove()}>-</button>\n      </div>\n    )\n  }\n}\nexport default App\n```\n\n这样代码简洁美观\n","slug":"React-Redux学习挖坑","published":1,"updated":"2020-06-26T03:18:29.655Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbvns72g0005iguj4plt2h7b","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"什么是-Redux\"><a href=\"#什么是-Redux\" class=\"headerlink\" title=\"什么是 Redux\"></a>什么是 Redux</h3><blockquote>\n<p>Redux 是一个流行的 JavaScript 框架，为应用程序提供一个可预测的状态容器。Redux 基于简化版本的 Flux 框架，Flux 是 Facebook 开发的一个框架。在标准的 MVC 框架中，数据可以在 UI 组件和存储之间双向流动，而 Redux 严格限制了数据只能在一个方向上流动<br><img src=\"/2018/12/23/React-Redux学习挖坑/redux.png\" alt=\"图\"></p>\n</blockquote>\n<p>在 Redux 中，所有的数据（比如 state）被保存在一个被称为 store 的容器中 → 在一个应用程序中只能有一个。store 本质上是一个状态树，保存了所有对象的状态。任何 UI 组件都可以直接从 store 访问特定对象的状态。要通过本地或远程组件更改状态，需要分发一个 action。分发在这里意味着将可执行信息发送到 store。当一个 store 接收到一个 action，它将把这个 action 代理给相关的 reducer。reducer 是一个纯函数，它可以查看之前的状态，执行一个 action 并且返回一个新的状态。<br><strong>项目撸起来</strong><br>首先创建一个 react 脚手架项目<br><code>create-react-app my-app</code><br>接下来 cd 到项目当中，安装 redux<br><code>yarn add redux -S</code><br>页面 index.js<br><code>import {createStore} from &#39;redux&#39;</code></p>\n<h3 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h3><p>Store 对象包含所有数据， 当前时刻的 State，可以通过 store.getState()拿到。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//新建store</span><br><span class=\"line\">const store = createStore(reducer);</span><br><span class=\"line\">const state = store.getState();</span><br><span class=\"line\">console.log(state);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h3><p>State 的变化，会导致页面的变化。但是，用户接触不到 State，只能接触到 View。所以，State 的变化必须是 View 导致的。Action 就是 View 发出的通知，表示 State 应该要发生变化了。Action 是一个对象。其中的 type 属性是必须的，表示 Action 的名称。其他属性可以自由设置<br><code>const action = {type:&#39;0&#39;}</code></p>\n<h3 id=\"store-dispatch\"><a href=\"#store-dispatch\" class=\"headerlink\" title=\"store.dispatch()\"></a>store.dispatch()</h3><p>派发事件，接受 action，将当前的 action 传输给 reducer，生成新的 state<br><code>store.dispatch(action)</code></p>\n<h3 id=\"Reducer\"><a href=\"#Reducer\" class=\"headerlink\" title=\"Reducer\"></a>Reducer</h3><p>store 收到 action 后，经过一些逻辑计算也就是 reducer，然后生成一个新的 state</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//通过reducer遍历</span><br><span class=\"line\">//根据老的state和action来生成新的state</span><br><span class=\"line\">function reducer(state=0,action)&#123;</span><br><span class=\"line\">    switch (action.type) &#123;</span><br><span class=\"line\">        case &apos;0&apos;:</span><br><span class=\"line\">            return state+1</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return state</span><br><span class=\"line\">            break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"store-subscribe\"><a href=\"#store-subscribe\" class=\"headerlink\" title=\"store.subscribe()\"></a>store.subscribe()</h3><p>订阅事件，一旦 State 发生变化，就自动执行这个函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//订阅事件</span><br><span class=\"line\">function listener()&#123;</span><br><span class=\"line\">    console.log(store.getState())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">store.subscribe(listener);</span><br></pre></td></tr></table></figure>\n<p>下面直接来一个 demo 吧，index.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &apos;react&apos;;</span><br><span class=\"line\">import ReactDOM from &apos;react-dom&apos;;</span><br><span class=\"line\">import &apos;./index.css&apos;;</span><br><span class=\"line\">import &#123;createStore&#125; from &apos;redux&apos;;</span><br><span class=\"line\">import App from &apos;./App&apos;;</span><br><span class=\"line\">import registerServiceWorker from &apos;./registerServiceWorker&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">function reducer(state=0,action)&#123;</span><br><span class=\"line\">    switch (action.type) &#123;</span><br><span class=\"line\">        case &apos;0&apos;:</span><br><span class=\"line\">            return state+1</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return state</span><br><span class=\"line\">            break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const store = createStore(reducer);</span><br><span class=\"line\">const state = store.getState();</span><br><span class=\"line\"></span><br><span class=\"line\">//订阅事件</span><br><span class=\"line\">function listener()&#123;</span><br><span class=\"line\">    console.log(store.getState())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">store.subscribe(listener);</span><br><span class=\"line\"></span><br><span class=\"line\">//派发事件</span><br><span class=\"line\">const action = &#123;type:&apos;0&apos;&#125;</span><br><span class=\"line\">store.dispatch(action);</span><br><span class=\"line\">store.dispatch(action);</span><br><span class=\"line\">store.dispatch(action);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(&lt;App /&gt;, document.getElementById(&apos;root&apos;));</span><br><span class=\"line\">registerServiceWorker();</span><br></pre></td></tr></table></figure>\n<p>页面打印出<br><img src=\"/2018/12/23/React-Redux学习挖坑/console.png\" alt=\"console\"></p>\n<h3 id=\"React-怎么和-Redux-一起使用呢\"><a href=\"#React-怎么和-Redux-一起使用呢\" class=\"headerlink\" title=\"React 怎么和 Redux 一起使用呢\"></a>React 怎么和 Redux 一起使用呢</h3><ul>\n<li>把 store.dispatch 方法传递给组件，内部可以调用修改状态</li>\n<li>Subscribe 订阅 render 函数，每次修改都重新渲染</li>\n<li>Redux 相关代码，转移到 redux.js 进行管理</li>\n</ul>\n<p>在 src 目录创建 redux.js，然后将 reducer 函数放入 redux.js<br>indexjs:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &apos;react&apos;;</span><br><span class=\"line\">import ReactDOM from &apos;react-dom&apos;;</span><br><span class=\"line\">import &apos;./index.css&apos;;</span><br><span class=\"line\">import &#123;createStore&#125; from &apos;redux&apos;;</span><br><span class=\"line\">import App from &apos;./App&apos;;</span><br><span class=\"line\">import &#123;reducer,add&#125; from &apos;./redux&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">const store = createStore(reducer);</span><br><span class=\"line\"></span><br><span class=\"line\">function render()&#123;</span><br><span class=\"line\">    ReactDOM.render(&lt;App store=&#123;store&#125; add=&#123;add&#125;/&gt;, document.getElementById(&apos;root&apos;));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">render()</span><br><span class=\"line\">store.subscribe(render);</span><br></pre></td></tr></table></figure>\n<p>redux.js:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function reducer(state=0,action)&#123;</span><br><span class=\"line\">    switch (action.type) &#123;</span><br><span class=\"line\">        case &apos;0&apos;:</span><br><span class=\"line\">            return state+1</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return state</span><br><span class=\"line\">            break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export function add()&#123;</span><br><span class=\"line\">    return &#123;type:&apos;0&apos;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>页面 app.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\">import &apos;./App.css&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class App extends Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    var store = this.props.store;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div className=&quot;App&quot;&gt;</span><br><span class=\"line\">        &lt;p&gt;&#123;store.getState()&#125;&lt;/p&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;e=&gt;store.dispatch(this.props.add())&#125;&gt;+&lt;/button&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default App;</span><br></pre></td></tr></table></figure>\n<p>这样页面中，每点击一次 button，返回来的 state 就会加 1</p>\n<h3 id=\"更进一步，处理异步，调试工具，与-react-更优雅的结合\"><a href=\"#更进一步，处理异步，调试工具，与-react-更优雅的结合\" class=\"headerlink\" title=\"更进一步，处理异步，调试工具，与 react 更优雅的结合\"></a>更进一步，处理异步，调试工具，与 react 更优雅的结合</h3><p>Redux 默认只处理同步，处理异步，需要 redux-thunk 插件<br>使用 applyMiddleware 开始 thunk 中间件<br>Action 可以返回函数，使用 dispatch 提交 action<br><code>yarn add redux-thunk --save</code><br>index.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;createStore,applyMiddleware&#125; from &apos;redux&apos;;</span><br><span class=\"line\">import thunk from &apos;redux-thunk&apos;;</span><br><span class=\"line\">const store = createStore(reducer,applyMiddleware(thunk));</span><br></pre></td></tr></table></figure>\n<p>redux.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function addd()&#123;</span><br><span class=\"line\">    return dispatch=&gt;&#123;</span><br><span class=\"line\">        setTimeout(()=&gt;&#123;</span><br><span class=\"line\">            dispatch(&#123;type:&apos;0&apos;&#125;)</span><br><span class=\"line\">        &#125;,1000)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>刚才咱们返回是对象，这次返回的 action 是一个函数，在 app.js 调用后会发现页面在 1 秒后 state 返回+1<br>redux 调试工具在 chrome 这个就需要大家科学上网了, <a href=\"https://pan.baidu.com/s/1qVYhg_UUHBJhJwsq9EQnyg\" target=\"_blank\" rel=\"noopener\">点击这里下载</a></p>\n<p>怎么使用该工具？</p>\n<ul>\n<li>新建 store 的时候判断 window.devToolsExtension</li>\n<li>使用 compose 结合 thunk 和 window.devToolsExtension</li>\n<li>调试窗的 redux 选项卡，实时看到 state</li>\n</ul>\n<p>index.js 代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;createStore,applyMiddleware,compose&#125; from &apos;redux&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">const store = createStore(reducer,compose(</span><br><span class=\"line\">    applyMiddleware(thunk),</span><br><span class=\"line\">    window.devToolsExtension?window.devToolsExtension():a=&gt;a</span><br><span class=\"line\">));</span><br></pre></td></tr></table></figure>\n<p>如果出现 state 未初始化这个错误，建议你把工具更新一下~~</p>\n<h3 id=\"使用-react-redux\"><a href=\"#使用-react-redux\" class=\"headerlink\" title=\"使用 react-redux\"></a>使用 react-redux</h3><p><code>yarn add react-redux -S</code><br>忘记 subscribe，记住 reducer，action 和 dispatch 即可<br>React-redux 提供 connect 和 Provider 两个接口来链接<br>index.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; Provider &#125; from &apos;react-redux&apos;;</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class=\"line\">        &lt;App /&gt;</span><br><span class=\"line\">    &lt;/Provider&gt;,</span><br><span class=\"line\">    document.getElementById(&apos;root&apos;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>app.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;connect&#125; from &apos;react-redux&apos;;</span><br><span class=\"line\">import &#123;addState,remove&#125; from &apos;./redux&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class App extends React.component&#123;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    const store = this.props.store;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;我永远喜欢新垣结衣&#123;this.props.num&#125;&lt;/h1&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;e=&gt;this.props.addState()&#125;&gt;+&lt;/button&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;e=&gt;this.props.remove()&#125;&gt;-&lt;/button&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//进行装饰器</span><br><span class=\"line\">let mapStatetoProps = state=&gt;&#123;</span><br><span class=\"line\">  return &#123;num : state&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let action = &#123;addState,remove&#125;</span><br><span class=\"line\">App = connect(mapStatetoProps,action)(App)</span><br><span class=\"line\">//</span><br><span class=\"line\">export default App</span><br></pre></td></tr></table></figure>\n<p>connect 使用装饰器来写可以省略代码，首先 yarn eject 弹出来个性化配置<br>首先安装一个支持装饰器的插件<br><code>yarn add babel-plugin-transform-decorators-legacy -D</code></p>\n<p>然后在 package.json 下的 babel 添加一个参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;babel&quot;: &#123;</span><br><span class=\"line\">    &quot;presets&quot;: [&quot;react-app&quot;],</span><br><span class=\"line\">    &quot;plugins&quot;: [</span><br><span class=\"line\">      [&quot;import&quot;,&#123;&quot;libraryName&quot;: &quot;antd-mobile&quot;,&quot;style&quot;: &quot;css&quot;&#125;],</span><br><span class=\"line\">      [&quot;transform-decorators-legacy&quot;]  //就是这个</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<p>添加之后在页面重新书写 connect</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;connect&#125; from &apos;react-redux&apos;;</span><br><span class=\"line\">import &#123;addState,remove&#125; from &apos;./redux&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">@connect(</span><br><span class=\"line\">  state =&gt; (&#123;num:state&#125;),</span><br><span class=\"line\">  &#123;addState,remove&#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">class App extends React.component&#123;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    const store = this.props.store;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;我永远喜欢新垣结衣&#123;this.props.num&#125;&lt;/h1&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;e=&gt;this.props.addState()&#125;&gt;+&lt;/button&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;e=&gt;this.props.remove()&#125;&gt;-&lt;/button&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default App</span><br></pre></td></tr></table></figure>\n<p>这样代码简洁美观</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"什么是-Redux\"><a href=\"#什么是-Redux\" class=\"headerlink\" title=\"什么是 Redux\"></a>什么是 Redux</h3><blockquote>\n<p>Redux 是一个流行的 JavaScript 框架，为应用程序提供一个可预测的状态容器。Redux 基于简化版本的 Flux 框架，Flux 是 Facebook 开发的一个框架。在标准的 MVC 框架中，数据可以在 UI 组件和存储之间双向流动，而 Redux 严格限制了数据只能在一个方向上流动<br><img src=\"/2018/12/23/React-Redux学习挖坑/redux.png\" alt=\"图\"></p>\n</blockquote>\n<p>在 Redux 中，所有的数据（比如 state）被保存在一个被称为 store 的容器中 → 在一个应用程序中只能有一个。store 本质上是一个状态树，保存了所有对象的状态。任何 UI 组件都可以直接从 store 访问特定对象的状态。要通过本地或远程组件更改状态，需要分发一个 action。分发在这里意味着将可执行信息发送到 store。当一个 store 接收到一个 action，它将把这个 action 代理给相关的 reducer。reducer 是一个纯函数，它可以查看之前的状态，执行一个 action 并且返回一个新的状态。<br><strong>项目撸起来</strong><br>首先创建一个 react 脚手架项目<br><code>create-react-app my-app</code><br>接下来 cd 到项目当中，安装 redux<br><code>yarn add redux -S</code><br>页面 index.js<br><code>import {createStore} from &#39;redux&#39;</code></p>\n<h3 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h3><p>Store 对象包含所有数据， 当前时刻的 State，可以通过 store.getState()拿到。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//新建store</span><br><span class=\"line\">const store = createStore(reducer);</span><br><span class=\"line\">const state = store.getState();</span><br><span class=\"line\">console.log(state);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h3><p>State 的变化，会导致页面的变化。但是，用户接触不到 State，只能接触到 View。所以，State 的变化必须是 View 导致的。Action 就是 View 发出的通知，表示 State 应该要发生变化了。Action 是一个对象。其中的 type 属性是必须的，表示 Action 的名称。其他属性可以自由设置<br><code>const action = {type:&#39;0&#39;}</code></p>\n<h3 id=\"store-dispatch\"><a href=\"#store-dispatch\" class=\"headerlink\" title=\"store.dispatch()\"></a>store.dispatch()</h3><p>派发事件，接受 action，将当前的 action 传输给 reducer，生成新的 state<br><code>store.dispatch(action)</code></p>\n<h3 id=\"Reducer\"><a href=\"#Reducer\" class=\"headerlink\" title=\"Reducer\"></a>Reducer</h3><p>store 收到 action 后，经过一些逻辑计算也就是 reducer，然后生成一个新的 state</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//通过reducer遍历</span><br><span class=\"line\">//根据老的state和action来生成新的state</span><br><span class=\"line\">function reducer(state=0,action)&#123;</span><br><span class=\"line\">    switch (action.type) &#123;</span><br><span class=\"line\">        case &apos;0&apos;:</span><br><span class=\"line\">            return state+1</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return state</span><br><span class=\"line\">            break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"store-subscribe\"><a href=\"#store-subscribe\" class=\"headerlink\" title=\"store.subscribe()\"></a>store.subscribe()</h3><p>订阅事件，一旦 State 发生变化，就自动执行这个函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//订阅事件</span><br><span class=\"line\">function listener()&#123;</span><br><span class=\"line\">    console.log(store.getState())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">store.subscribe(listener);</span><br></pre></td></tr></table></figure>\n<p>下面直接来一个 demo 吧，index.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &apos;react&apos;;</span><br><span class=\"line\">import ReactDOM from &apos;react-dom&apos;;</span><br><span class=\"line\">import &apos;./index.css&apos;;</span><br><span class=\"line\">import &#123;createStore&#125; from &apos;redux&apos;;</span><br><span class=\"line\">import App from &apos;./App&apos;;</span><br><span class=\"line\">import registerServiceWorker from &apos;./registerServiceWorker&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">function reducer(state=0,action)&#123;</span><br><span class=\"line\">    switch (action.type) &#123;</span><br><span class=\"line\">        case &apos;0&apos;:</span><br><span class=\"line\">            return state+1</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return state</span><br><span class=\"line\">            break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const store = createStore(reducer);</span><br><span class=\"line\">const state = store.getState();</span><br><span class=\"line\"></span><br><span class=\"line\">//订阅事件</span><br><span class=\"line\">function listener()&#123;</span><br><span class=\"line\">    console.log(store.getState())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">store.subscribe(listener);</span><br><span class=\"line\"></span><br><span class=\"line\">//派发事件</span><br><span class=\"line\">const action = &#123;type:&apos;0&apos;&#125;</span><br><span class=\"line\">store.dispatch(action);</span><br><span class=\"line\">store.dispatch(action);</span><br><span class=\"line\">store.dispatch(action);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(&lt;App /&gt;, document.getElementById(&apos;root&apos;));</span><br><span class=\"line\">registerServiceWorker();</span><br></pre></td></tr></table></figure>\n<p>页面打印出<br><img src=\"/2018/12/23/React-Redux学习挖坑/console.png\" alt=\"console\"></p>\n<h3 id=\"React-怎么和-Redux-一起使用呢\"><a href=\"#React-怎么和-Redux-一起使用呢\" class=\"headerlink\" title=\"React 怎么和 Redux 一起使用呢\"></a>React 怎么和 Redux 一起使用呢</h3><ul>\n<li>把 store.dispatch 方法传递给组件，内部可以调用修改状态</li>\n<li>Subscribe 订阅 render 函数，每次修改都重新渲染</li>\n<li>Redux 相关代码，转移到 redux.js 进行管理</li>\n</ul>\n<p>在 src 目录创建 redux.js，然后将 reducer 函数放入 redux.js<br>indexjs:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &apos;react&apos;;</span><br><span class=\"line\">import ReactDOM from &apos;react-dom&apos;;</span><br><span class=\"line\">import &apos;./index.css&apos;;</span><br><span class=\"line\">import &#123;createStore&#125; from &apos;redux&apos;;</span><br><span class=\"line\">import App from &apos;./App&apos;;</span><br><span class=\"line\">import &#123;reducer,add&#125; from &apos;./redux&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">const store = createStore(reducer);</span><br><span class=\"line\"></span><br><span class=\"line\">function render()&#123;</span><br><span class=\"line\">    ReactDOM.render(&lt;App store=&#123;store&#125; add=&#123;add&#125;/&gt;, document.getElementById(&apos;root&apos;));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">render()</span><br><span class=\"line\">store.subscribe(render);</span><br></pre></td></tr></table></figure>\n<p>redux.js:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function reducer(state=0,action)&#123;</span><br><span class=\"line\">    switch (action.type) &#123;</span><br><span class=\"line\">        case &apos;0&apos;:</span><br><span class=\"line\">            return state+1</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return state</span><br><span class=\"line\">            break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export function add()&#123;</span><br><span class=\"line\">    return &#123;type:&apos;0&apos;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>页面 app.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\">import &apos;./App.css&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class App extends Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    var store = this.props.store;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div className=&quot;App&quot;&gt;</span><br><span class=\"line\">        &lt;p&gt;&#123;store.getState()&#125;&lt;/p&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;e=&gt;store.dispatch(this.props.add())&#125;&gt;+&lt;/button&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default App;</span><br></pre></td></tr></table></figure>\n<p>这样页面中，每点击一次 button，返回来的 state 就会加 1</p>\n<h3 id=\"更进一步，处理异步，调试工具，与-react-更优雅的结合\"><a href=\"#更进一步，处理异步，调试工具，与-react-更优雅的结合\" class=\"headerlink\" title=\"更进一步，处理异步，调试工具，与 react 更优雅的结合\"></a>更进一步，处理异步，调试工具，与 react 更优雅的结合</h3><p>Redux 默认只处理同步，处理异步，需要 redux-thunk 插件<br>使用 applyMiddleware 开始 thunk 中间件<br>Action 可以返回函数，使用 dispatch 提交 action<br><code>yarn add redux-thunk --save</code><br>index.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;createStore,applyMiddleware&#125; from &apos;redux&apos;;</span><br><span class=\"line\">import thunk from &apos;redux-thunk&apos;;</span><br><span class=\"line\">const store = createStore(reducer,applyMiddleware(thunk));</span><br></pre></td></tr></table></figure>\n<p>redux.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function addd()&#123;</span><br><span class=\"line\">    return dispatch=&gt;&#123;</span><br><span class=\"line\">        setTimeout(()=&gt;&#123;</span><br><span class=\"line\">            dispatch(&#123;type:&apos;0&apos;&#125;)</span><br><span class=\"line\">        &#125;,1000)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>刚才咱们返回是对象，这次返回的 action 是一个函数，在 app.js 调用后会发现页面在 1 秒后 state 返回+1<br>redux 调试工具在 chrome 这个就需要大家科学上网了, <a href=\"https://pan.baidu.com/s/1qVYhg_UUHBJhJwsq9EQnyg\" target=\"_blank\" rel=\"noopener\">点击这里下载</a></p>\n<p>怎么使用该工具？</p>\n<ul>\n<li>新建 store 的时候判断 window.devToolsExtension</li>\n<li>使用 compose 结合 thunk 和 window.devToolsExtension</li>\n<li>调试窗的 redux 选项卡，实时看到 state</li>\n</ul>\n<p>index.js 代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;createStore,applyMiddleware,compose&#125; from &apos;redux&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">const store = createStore(reducer,compose(</span><br><span class=\"line\">    applyMiddleware(thunk),</span><br><span class=\"line\">    window.devToolsExtension?window.devToolsExtension():a=&gt;a</span><br><span class=\"line\">));</span><br></pre></td></tr></table></figure>\n<p>如果出现 state 未初始化这个错误，建议你把工具更新一下~~</p>\n<h3 id=\"使用-react-redux\"><a href=\"#使用-react-redux\" class=\"headerlink\" title=\"使用 react-redux\"></a>使用 react-redux</h3><p><code>yarn add react-redux -S</code><br>忘记 subscribe，记住 reducer，action 和 dispatch 即可<br>React-redux 提供 connect 和 Provider 两个接口来链接<br>index.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; Provider &#125; from &apos;react-redux&apos;;</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class=\"line\">        &lt;App /&gt;</span><br><span class=\"line\">    &lt;/Provider&gt;,</span><br><span class=\"line\">    document.getElementById(&apos;root&apos;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>app.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;connect&#125; from &apos;react-redux&apos;;</span><br><span class=\"line\">import &#123;addState,remove&#125; from &apos;./redux&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class App extends React.component&#123;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    const store = this.props.store;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;我永远喜欢新垣结衣&#123;this.props.num&#125;&lt;/h1&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;e=&gt;this.props.addState()&#125;&gt;+&lt;/button&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;e=&gt;this.props.remove()&#125;&gt;-&lt;/button&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//进行装饰器</span><br><span class=\"line\">let mapStatetoProps = state=&gt;&#123;</span><br><span class=\"line\">  return &#123;num : state&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let action = &#123;addState,remove&#125;</span><br><span class=\"line\">App = connect(mapStatetoProps,action)(App)</span><br><span class=\"line\">//</span><br><span class=\"line\">export default App</span><br></pre></td></tr></table></figure>\n<p>connect 使用装饰器来写可以省略代码，首先 yarn eject 弹出来个性化配置<br>首先安装一个支持装饰器的插件<br><code>yarn add babel-plugin-transform-decorators-legacy -D</code></p>\n<p>然后在 package.json 下的 babel 添加一个参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;babel&quot;: &#123;</span><br><span class=\"line\">    &quot;presets&quot;: [&quot;react-app&quot;],</span><br><span class=\"line\">    &quot;plugins&quot;: [</span><br><span class=\"line\">      [&quot;import&quot;,&#123;&quot;libraryName&quot;: &quot;antd-mobile&quot;,&quot;style&quot;: &quot;css&quot;&#125;],</span><br><span class=\"line\">      [&quot;transform-decorators-legacy&quot;]  //就是这个</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<p>添加之后在页面重新书写 connect</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;connect&#125; from &apos;react-redux&apos;;</span><br><span class=\"line\">import &#123;addState,remove&#125; from &apos;./redux&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">@connect(</span><br><span class=\"line\">  state =&gt; (&#123;num:state&#125;),</span><br><span class=\"line\">  &#123;addState,remove&#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">class App extends React.component&#123;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    const store = this.props.store;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;我永远喜欢新垣结衣&#123;this.props.num&#125;&lt;/h1&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;e=&gt;this.props.addState()&#125;&gt;+&lt;/button&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;e=&gt;this.props.remove()&#125;&gt;-&lt;/button&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default App</span><br></pre></td></tr></table></figure>\n<p>这样代码简洁美观</p>\n"},{"title":"面试题收集","date":"2019-02-20T01:03:20.000Z","_content":"\n> 想必大家很厌烦笔试，因为脑海中都是一些分散的知识点，无法关联成网，一直处于时曾相识的状态。不知道多少人和我一样，至今每次写阻止冒泡都需要百度一番如何拼写。\n\n### CSS\n\n#### 1.盒模型\n\n页面渲染时，dom 元素所采用的布局模型。可通过 box-sizing 进行设置。根据计算宽高的区域可分为：\n\n- content-box (W3C 标准盒模型,在宽度和高度之外绘制元素的内边距和边框)\n- border-box (为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制)\n- inherit (从父元素继承 box-sizing 属性的值)\n\n#### 2.层叠上下文\n\n- z-index 属性值并不是在任何元素上都有效果。它仅在定位元素（定义了 position 属性，且属性值为非 static 值的元素）上有效果\n- 判断元素在 Z 轴上的堆叠顺序，不仅仅是直接比较两个元素的 z-index 值的大小，这个堆叠顺序实际由元素的层叠上下文、层叠等级共同决定。\n  ![z](Interview/z.png)\n  层叠上下文通俗的讲就是，两个父元素各自有一个子元素，子元素全部设置有 position 和 z-index，那么这时候因为父元素没有设置 z-index，所以没有产生上下文，此时 z-index 谁大谁就在上面,如果两个父元素同时设置了 z-index,就算你其中子元素的 z-index 设置了 99999 也没用，因为你的父元素所产生的层叠上下文比别人的小，也就是 z-index。\n\n#### 3.居中布局\n\n水平居中\n\n- 行内元素: text-align:center\n- 块级元素: margin:0 auto\n- absolute+transform（position: absolute;top: 50%;left: 50%;transform: translate(-50%, -50%);）\n- flex+justify-content:center\n\n垂直居中\n\n- line-height:height\n- absolute+transform\n- flex+align-items:center\n- display: table-cell\n\n水平垂直居中\n\n- absolute+transform\n- flex+justify-content+align-items\n\n#### 4.选择器优先级\n\n- !important > 行内样式 > #id > .class > tag > \\* > 继承 > 默认\n- 选择器从右往左解析\n\n#### 5.去除浮动影响，防止父级高度塌陷\n\n- 通过增加尾元素清除浮动(::after{content:'';clear:both;display:block;})\n- 父级设置高度\n- 父元素设置 overflow:hidden;\n\n### javascript\n\n#### 1.原型 / 构造函数 / 实例\n\n```\n原型(prototype):一个简单的对象，用于实现对象的属性继承。可以简单的理解成对象的爹。在Firefox和Chrome中，\n每个JavaScript对象中都包含一个 __proto__(非标准)的属性指向它爹(该对象的原型)，可obj.__proto__进行访问。\n构造函数:可以通过new来新建一个对象的函数。\n实例: 通过构造函数和new创建出来的对象，便是实例,实例通过 __proto__指向原型，通过constructor指向构造函数。\n实例.__proto__ === 原型\n原型.constructor === 构造函数\n构造函数.prototype === 原型\n原型.constructorr === 构造函数\n```\n\n#### 2.原型链\n\n```\n原型链是由原型对象组成，每个对象都有__proto__属性，指向了创建该对象的构造函数的原型，\n__proto__将对象连接起来组成了原型链。是一个用来实现继承和共享属性的有限的对象链。\n具体还是去这个网站吧https://www.jianshu.com/p/dee9f8b14771\n```\n\n#### 3.作用域\n\n作用域其实可理解为该上下文中声明的变量和声明的作用范围。可分为块级作用域和函数作用域\n\n- 声明提前: 一个声明在函数体内都是可见的, 函数优先于变量\n- 非匿名自执行函数，函数变量为只读状态，无法修改\n\n```\nconst foo = 1\n(function foo() {\n    foo = 10 // 由于foo在函数中只为可读，因此赋值无效\n    console.log(foo)\n}())\n// 结果打印：  ƒ foo() { foo = 10 ; console.log(foo) }\n```\n\n#### 4.作用域链\n\n我们可以在执行上下文中访问到父级甚至全局的变量，这便是作用域链的功劳。作用域链可以理解为一组对象列表，包含父级和自身的变量对象，因此我们便能通过作用域链访问到父级里声明的变量或者函数。\n\n#### 5.闭包\n\n闭包属于一种特殊的作用域，称为静态作用域。它的定义可以理解为: 父函数被销毁 的情况下，返回出的子函数仍然保留着父级的单变量对象和作用域链，因此可以继续访问到父级的变量对象，这样的函数称为闭包。\n闭包也会产生一个问题：\n\n- 多个子函数都是同时指向父级，是完全共享的。因此当父级的变量对象被修改时，所有子函数都受到影响。\n  解决方法：\n- 变量可以通过函数参数的形式传入\n- 使用块级作用域，让变量成为自己上下文的属性，避免共享\n\n#### 6.对象的拷贝\n\n浅拷贝: 以赋值的形式拷贝引用对象，仍指向同一个地址，修改时原对象也会受到影响\n\n- Object.assign\n- ...扩展运算符\n  深拷贝: 完全拷贝一个新对象，修改时原对象不再受到任何影响\n- 当值为函数或 undefined 时，无法拷贝\n- JSON.parse(JSON.stringify(obj)): 性能最快\n- 递归进行逐一赋值\n\n#### 7.new 运算符的执行过程\n\n- 新生成一个对象\n- 链接到原型 prototype\n- 绑定 this\n- 返回新对象\n\n#### 8.代码的复用\n\n- 函数封装\n- 继承\n- 混入 mixin 模式（感觉和继承差不多鸭）\n- 借用 apply/call\n\n#### 9.继承\n\n在 JS 中，继承通常指的便是原型链继承，也就是通过指定原型，并可以通过原型链继承原型上的属性或者方法。\n\n- 使用 ES6 的语法糖 class/extends\n\n#### 10.类型转换\n\n在 JS 中在使用运算符号或者对比符时，会自带隐式转换，规则如下:\n\n- -、\\*、/、% ：一律转换成数值后计算\n- [1].toString()==='1'\n- {}.toString()==='[object object]' +：\n- 数字 + 字符串 = 字符串， 运算顺序是从左到右\n- 数字 + 对象， 优先调用对象的 valueOf -> toString\n- 数字 + boolean/null = 数字\n- 数字 + undefined == NaN\n\n#### 11.类型判断\n\n判断类型，单单用 typeof 并无法完全满足，这其实并不是 bug，本质原因是 JS 的万物皆对象的理论。因此要真正完美判断时，我们需要区分对待\n\n- 基本类型(null): 使用 String(null)\n- 基本类型(string/number/boolean/undefined) + function: 直接使用 typeof 即可\n- 其余引用类型(Array/Date/RegExpError): 调用 toString 后根据 [objectXXX]进行判断\n\n#### 12.模块化\n\n- es6: import/exports\n- commonjs: require/module.exports/exports\n\nrequire 与 import 的区别\n\n- require 支持动态导入， import 不支持，正在提案 (babel 下可支持)\n- require 是同步导入， import 属于异步导入\n- require 是值拷贝，导出值变化不会影响导入值； import 指向内存地址，导入值会随导出值而变化\n\n#### 13.防抖与节流\n\n具体看前几篇的博客\n\n#### 14.this 指向\n\n要明白 this 指向，其实就是要搞清楚函数的运行环境，说人话就是，谁调用了函数。例如:\n\n- obj.fn()，便是 obj 调用了函数，既函数中的 this===obj\n- fn()，这里可以看成 window.fn()，因此 this===window\n\n但这种机制并不完全能满足我们的业务需求，因此提供了三种方式可以手动修改 this 的指向:\n\n- call:fn.call(target,1,2)\n- apply:fn.apply(target,[1,2])\n- bind:fn.bind(target)(1,2)\n\n这三种方式在前几篇博客有详情\n\n#### 15.ES6/ES7\n\n- 声明:let/const: 块级作用域、不存在变量提升、暂时性死区、不允许重复声明,const: 声明常量，无法修改\n- 解构赋值\n- class/extend: 类声明与继承\n- Set/Map: 新的数据结构\n- Promise 的使用与实现,await/async\n\n具体参考阮一峰的 es6 入门：http://es6.ruanyifeng.com/#README\n\n#### 16.数组\n\n- map: 遍历数组，返回回调返回值组成的新数组\n- forEach: 无法 break，可以用 try/catch 中 thrownewError 来停止\n- filter: 过滤\n- sort(fn)/reverse: 排序与反转，改变原数组\n- concat: 连接数组，不影响原数组， 浅拷贝\n  .......\n\n### 浏览器\n\n#### 常见状态码\n\n- 1xx: 接受，继续处理\n- 200: 成功，并返回数据\n- 201: 已创建\n- 202: 已接受\n- 203: 成为，但未授权\n- 204: 成功，无内容\n- 205: 成功，重置内容\n- 206: 成功，部分内容\n- 301: 永久移动，重定向\n- 302: 临时移动，可使用原有 URI\n- 304: 资源未修改，可使用缓存\n- 305: 需代理访问\n- 400: 请求语法错误\n- 401: 要求身份认证\n- 403: 拒绝请求\n- 404: 资源不存在\n- 500: 服务器错误\n\n#### get / post\n\nget: 缓存、请求长度受限、会被历史保存记录\npost: 安全、大数据、更多编码类型\n\n### 框架：Vue\n\n#### 1.nextTick\n\n在下次 dom 更新循环结束之后执行延迟回调，可用于获取更新后的 dom 状态\n\n#### 2. 生命周期\n\n- beforeCreate\n- created\n- beforeMount\n- mounted\n- beforeUpdate\n- updated\n- beforeDestroy\n- destroyed\n","source":"_posts/Interview.md","raw":"---\ntitle: 面试题收集\ndate: 2019-02-20 09:03:20\ntags: JS\n---\n\n> 想必大家很厌烦笔试，因为脑海中都是一些分散的知识点，无法关联成网，一直处于时曾相识的状态。不知道多少人和我一样，至今每次写阻止冒泡都需要百度一番如何拼写。\n\n### CSS\n\n#### 1.盒模型\n\n页面渲染时，dom 元素所采用的布局模型。可通过 box-sizing 进行设置。根据计算宽高的区域可分为：\n\n- content-box (W3C 标准盒模型,在宽度和高度之外绘制元素的内边距和边框)\n- border-box (为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制)\n- inherit (从父元素继承 box-sizing 属性的值)\n\n#### 2.层叠上下文\n\n- z-index 属性值并不是在任何元素上都有效果。它仅在定位元素（定义了 position 属性，且属性值为非 static 值的元素）上有效果\n- 判断元素在 Z 轴上的堆叠顺序，不仅仅是直接比较两个元素的 z-index 值的大小，这个堆叠顺序实际由元素的层叠上下文、层叠等级共同决定。\n  ![z](Interview/z.png)\n  层叠上下文通俗的讲就是，两个父元素各自有一个子元素，子元素全部设置有 position 和 z-index，那么这时候因为父元素没有设置 z-index，所以没有产生上下文，此时 z-index 谁大谁就在上面,如果两个父元素同时设置了 z-index,就算你其中子元素的 z-index 设置了 99999 也没用，因为你的父元素所产生的层叠上下文比别人的小，也就是 z-index。\n\n#### 3.居中布局\n\n水平居中\n\n- 行内元素: text-align:center\n- 块级元素: margin:0 auto\n- absolute+transform（position: absolute;top: 50%;left: 50%;transform: translate(-50%, -50%);）\n- flex+justify-content:center\n\n垂直居中\n\n- line-height:height\n- absolute+transform\n- flex+align-items:center\n- display: table-cell\n\n水平垂直居中\n\n- absolute+transform\n- flex+justify-content+align-items\n\n#### 4.选择器优先级\n\n- !important > 行内样式 > #id > .class > tag > \\* > 继承 > 默认\n- 选择器从右往左解析\n\n#### 5.去除浮动影响，防止父级高度塌陷\n\n- 通过增加尾元素清除浮动(::after{content:'';clear:both;display:block;})\n- 父级设置高度\n- 父元素设置 overflow:hidden;\n\n### javascript\n\n#### 1.原型 / 构造函数 / 实例\n\n```\n原型(prototype):一个简单的对象，用于实现对象的属性继承。可以简单的理解成对象的爹。在Firefox和Chrome中，\n每个JavaScript对象中都包含一个 __proto__(非标准)的属性指向它爹(该对象的原型)，可obj.__proto__进行访问。\n构造函数:可以通过new来新建一个对象的函数。\n实例: 通过构造函数和new创建出来的对象，便是实例,实例通过 __proto__指向原型，通过constructor指向构造函数。\n实例.__proto__ === 原型\n原型.constructor === 构造函数\n构造函数.prototype === 原型\n原型.constructorr === 构造函数\n```\n\n#### 2.原型链\n\n```\n原型链是由原型对象组成，每个对象都有__proto__属性，指向了创建该对象的构造函数的原型，\n__proto__将对象连接起来组成了原型链。是一个用来实现继承和共享属性的有限的对象链。\n具体还是去这个网站吧https://www.jianshu.com/p/dee9f8b14771\n```\n\n#### 3.作用域\n\n作用域其实可理解为该上下文中声明的变量和声明的作用范围。可分为块级作用域和函数作用域\n\n- 声明提前: 一个声明在函数体内都是可见的, 函数优先于变量\n- 非匿名自执行函数，函数变量为只读状态，无法修改\n\n```\nconst foo = 1\n(function foo() {\n    foo = 10 // 由于foo在函数中只为可读，因此赋值无效\n    console.log(foo)\n}())\n// 结果打印：  ƒ foo() { foo = 10 ; console.log(foo) }\n```\n\n#### 4.作用域链\n\n我们可以在执行上下文中访问到父级甚至全局的变量，这便是作用域链的功劳。作用域链可以理解为一组对象列表，包含父级和自身的变量对象，因此我们便能通过作用域链访问到父级里声明的变量或者函数。\n\n#### 5.闭包\n\n闭包属于一种特殊的作用域，称为静态作用域。它的定义可以理解为: 父函数被销毁 的情况下，返回出的子函数仍然保留着父级的单变量对象和作用域链，因此可以继续访问到父级的变量对象，这样的函数称为闭包。\n闭包也会产生一个问题：\n\n- 多个子函数都是同时指向父级，是完全共享的。因此当父级的变量对象被修改时，所有子函数都受到影响。\n  解决方法：\n- 变量可以通过函数参数的形式传入\n- 使用块级作用域，让变量成为自己上下文的属性，避免共享\n\n#### 6.对象的拷贝\n\n浅拷贝: 以赋值的形式拷贝引用对象，仍指向同一个地址，修改时原对象也会受到影响\n\n- Object.assign\n- ...扩展运算符\n  深拷贝: 完全拷贝一个新对象，修改时原对象不再受到任何影响\n- 当值为函数或 undefined 时，无法拷贝\n- JSON.parse(JSON.stringify(obj)): 性能最快\n- 递归进行逐一赋值\n\n#### 7.new 运算符的执行过程\n\n- 新生成一个对象\n- 链接到原型 prototype\n- 绑定 this\n- 返回新对象\n\n#### 8.代码的复用\n\n- 函数封装\n- 继承\n- 混入 mixin 模式（感觉和继承差不多鸭）\n- 借用 apply/call\n\n#### 9.继承\n\n在 JS 中，继承通常指的便是原型链继承，也就是通过指定原型，并可以通过原型链继承原型上的属性或者方法。\n\n- 使用 ES6 的语法糖 class/extends\n\n#### 10.类型转换\n\n在 JS 中在使用运算符号或者对比符时，会自带隐式转换，规则如下:\n\n- -、\\*、/、% ：一律转换成数值后计算\n- [1].toString()==='1'\n- {}.toString()==='[object object]' +：\n- 数字 + 字符串 = 字符串， 运算顺序是从左到右\n- 数字 + 对象， 优先调用对象的 valueOf -> toString\n- 数字 + boolean/null = 数字\n- 数字 + undefined == NaN\n\n#### 11.类型判断\n\n判断类型，单单用 typeof 并无法完全满足，这其实并不是 bug，本质原因是 JS 的万物皆对象的理论。因此要真正完美判断时，我们需要区分对待\n\n- 基本类型(null): 使用 String(null)\n- 基本类型(string/number/boolean/undefined) + function: 直接使用 typeof 即可\n- 其余引用类型(Array/Date/RegExpError): 调用 toString 后根据 [objectXXX]进行判断\n\n#### 12.模块化\n\n- es6: import/exports\n- commonjs: require/module.exports/exports\n\nrequire 与 import 的区别\n\n- require 支持动态导入， import 不支持，正在提案 (babel 下可支持)\n- require 是同步导入， import 属于异步导入\n- require 是值拷贝，导出值变化不会影响导入值； import 指向内存地址，导入值会随导出值而变化\n\n#### 13.防抖与节流\n\n具体看前几篇的博客\n\n#### 14.this 指向\n\n要明白 this 指向，其实就是要搞清楚函数的运行环境，说人话就是，谁调用了函数。例如:\n\n- obj.fn()，便是 obj 调用了函数，既函数中的 this===obj\n- fn()，这里可以看成 window.fn()，因此 this===window\n\n但这种机制并不完全能满足我们的业务需求，因此提供了三种方式可以手动修改 this 的指向:\n\n- call:fn.call(target,1,2)\n- apply:fn.apply(target,[1,2])\n- bind:fn.bind(target)(1,2)\n\n这三种方式在前几篇博客有详情\n\n#### 15.ES6/ES7\n\n- 声明:let/const: 块级作用域、不存在变量提升、暂时性死区、不允许重复声明,const: 声明常量，无法修改\n- 解构赋值\n- class/extend: 类声明与继承\n- Set/Map: 新的数据结构\n- Promise 的使用与实现,await/async\n\n具体参考阮一峰的 es6 入门：http://es6.ruanyifeng.com/#README\n\n#### 16.数组\n\n- map: 遍历数组，返回回调返回值组成的新数组\n- forEach: 无法 break，可以用 try/catch 中 thrownewError 来停止\n- filter: 过滤\n- sort(fn)/reverse: 排序与反转，改变原数组\n- concat: 连接数组，不影响原数组， 浅拷贝\n  .......\n\n### 浏览器\n\n#### 常见状态码\n\n- 1xx: 接受，继续处理\n- 200: 成功，并返回数据\n- 201: 已创建\n- 202: 已接受\n- 203: 成为，但未授权\n- 204: 成功，无内容\n- 205: 成功，重置内容\n- 206: 成功，部分内容\n- 301: 永久移动，重定向\n- 302: 临时移动，可使用原有 URI\n- 304: 资源未修改，可使用缓存\n- 305: 需代理访问\n- 400: 请求语法错误\n- 401: 要求身份认证\n- 403: 拒绝请求\n- 404: 资源不存在\n- 500: 服务器错误\n\n#### get / post\n\nget: 缓存、请求长度受限、会被历史保存记录\npost: 安全、大数据、更多编码类型\n\n### 框架：Vue\n\n#### 1.nextTick\n\n在下次 dom 更新循环结束之后执行延迟回调，可用于获取更新后的 dom 状态\n\n#### 2. 生命周期\n\n- beforeCreate\n- created\n- beforeMount\n- mounted\n- beforeUpdate\n- updated\n- beforeDestroy\n- destroyed\n","slug":"Interview","published":1,"updated":"2020-06-26T03:18:29.654Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbvns72k0006igujozzsoo5l","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><blockquote>\n<p>想必大家很厌烦笔试，因为脑海中都是一些分散的知识点，无法关联成网，一直处于时曾相识的状态。不知道多少人和我一样，至今每次写阻止冒泡都需要百度一番如何拼写。</p>\n</blockquote>\n<h3 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><h4 id=\"1-盒模型\"><a href=\"#1-盒模型\" class=\"headerlink\" title=\"1.盒模型\"></a>1.盒模型</h4><p>页面渲染时，dom 元素所采用的布局模型。可通过 box-sizing 进行设置。根据计算宽高的区域可分为：</p>\n<ul>\n<li>content-box (W3C 标准盒模型,在宽度和高度之外绘制元素的内边距和边框)</li>\n<li>border-box (为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制)</li>\n<li>inherit (从父元素继承 box-sizing 属性的值)</li>\n</ul>\n<h4 id=\"2-层叠上下文\"><a href=\"#2-层叠上下文\" class=\"headerlink\" title=\"2.层叠上下文\"></a>2.层叠上下文</h4><ul>\n<li>z-index 属性值并不是在任何元素上都有效果。它仅在定位元素（定义了 position 属性，且属性值为非 static 值的元素）上有效果</li>\n<li>判断元素在 Z 轴上的堆叠顺序，不仅仅是直接比较两个元素的 z-index 值的大小，这个堆叠顺序实际由元素的层叠上下文、层叠等级共同决定。<br><img src=\"/2019/02/20/Interview/z.png\" alt=\"z\"><br>层叠上下文通俗的讲就是，两个父元素各自有一个子元素，子元素全部设置有 position 和 z-index，那么这时候因为父元素没有设置 z-index，所以没有产生上下文，此时 z-index 谁大谁就在上面,如果两个父元素同时设置了 z-index,就算你其中子元素的 z-index 设置了 99999 也没用，因为你的父元素所产生的层叠上下文比别人的小，也就是 z-index。</li>\n</ul>\n<h4 id=\"3-居中布局\"><a href=\"#3-居中布局\" class=\"headerlink\" title=\"3.居中布局\"></a>3.居中布局</h4><p>水平居中</p>\n<ul>\n<li>行内元素: text-align:center</li>\n<li>块级元素: margin:0 auto</li>\n<li>absolute+transform（position: absolute;top: 50%;left: 50%;transform: translate(-50%, -50%);）</li>\n<li>flex+justify-content:center</li>\n</ul>\n<p>垂直居中</p>\n<ul>\n<li>line-height:height</li>\n<li>absolute+transform</li>\n<li>flex+align-items:center</li>\n<li>display: table-cell</li>\n</ul>\n<p>水平垂直居中</p>\n<ul>\n<li>absolute+transform</li>\n<li>flex+justify-content+align-items</li>\n</ul>\n<h4 id=\"4-选择器优先级\"><a href=\"#4-选择器优先级\" class=\"headerlink\" title=\"4.选择器优先级\"></a>4.选择器优先级</h4><ul>\n<li>!important &gt; 行内样式 &gt; #id &gt; .class &gt; tag &gt; * &gt; 继承 &gt; 默认</li>\n<li>选择器从右往左解析</li>\n</ul>\n<h4 id=\"5-去除浮动影响，防止父级高度塌陷\"><a href=\"#5-去除浮动影响，防止父级高度塌陷\" class=\"headerlink\" title=\"5.去除浮动影响，防止父级高度塌陷\"></a>5.去除浮动影响，防止父级高度塌陷</h4><ul>\n<li>通过增加尾元素清除浮动(::after{content:’’;clear:both;display:block;})</li>\n<li>父级设置高度</li>\n<li>父元素设置 overflow:hidden;</li>\n</ul>\n<h3 id=\"javascript\"><a href=\"#javascript\" class=\"headerlink\" title=\"javascript\"></a>javascript</h3><h4 id=\"1-原型-构造函数-实例\"><a href=\"#1-原型-构造函数-实例\" class=\"headerlink\" title=\"1.原型 / 构造函数 / 实例\"></a>1.原型 / 构造函数 / 实例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原型(prototype):一个简单的对象，用于实现对象的属性继承。可以简单的理解成对象的爹。在Firefox和Chrome中，</span><br><span class=\"line\">每个JavaScript对象中都包含一个 __proto__(非标准)的属性指向它爹(该对象的原型)，可obj.__proto__进行访问。</span><br><span class=\"line\">构造函数:可以通过new来新建一个对象的函数。</span><br><span class=\"line\">实例: 通过构造函数和new创建出来的对象，便是实例,实例通过 __proto__指向原型，通过constructor指向构造函数。</span><br><span class=\"line\">实例.__proto__ === 原型</span><br><span class=\"line\">原型.constructor === 构造函数</span><br><span class=\"line\">构造函数.prototype === 原型</span><br><span class=\"line\">原型.constructorr === 构造函数</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-原型链\"><a href=\"#2-原型链\" class=\"headerlink\" title=\"2.原型链\"></a>2.原型链</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原型链是由原型对象组成，每个对象都有__proto__属性，指向了创建该对象的构造函数的原型，</span><br><span class=\"line\">__proto__将对象连接起来组成了原型链。是一个用来实现继承和共享属性的有限的对象链。</span><br><span class=\"line\">具体还是去这个网站吧https://www.jianshu.com/p/dee9f8b14771</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-作用域\"><a href=\"#3-作用域\" class=\"headerlink\" title=\"3.作用域\"></a>3.作用域</h4><p>作用域其实可理解为该上下文中声明的变量和声明的作用范围。可分为块级作用域和函数作用域</p>\n<ul>\n<li>声明提前: 一个声明在函数体内都是可见的, 函数优先于变量</li>\n<li>非匿名自执行函数，函数变量为只读状态，无法修改</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const foo = 1</span><br><span class=\"line\">(function foo() &#123;</span><br><span class=\"line\">    foo = 10 // 由于foo在函数中只为可读，因此赋值无效</span><br><span class=\"line\">    console.log(foo)</span><br><span class=\"line\">&#125;())</span><br><span class=\"line\">// 结果打印：  ƒ foo() &#123; foo = 10 ; console.log(foo) &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-作用域链\"><a href=\"#4-作用域链\" class=\"headerlink\" title=\"4.作用域链\"></a>4.作用域链</h4><p>我们可以在执行上下文中访问到父级甚至全局的变量，这便是作用域链的功劳。作用域链可以理解为一组对象列表，包含父级和自身的变量对象，因此我们便能通过作用域链访问到父级里声明的变量或者函数。</p>\n<h4 id=\"5-闭包\"><a href=\"#5-闭包\" class=\"headerlink\" title=\"5.闭包\"></a>5.闭包</h4><p>闭包属于一种特殊的作用域，称为静态作用域。它的定义可以理解为: 父函数被销毁 的情况下，返回出的子函数仍然保留着父级的单变量对象和作用域链，因此可以继续访问到父级的变量对象，这样的函数称为闭包。<br>闭包也会产生一个问题：</p>\n<ul>\n<li>多个子函数都是同时指向父级，是完全共享的。因此当父级的变量对象被修改时，所有子函数都受到影响。<br>解决方法：</li>\n<li>变量可以通过函数参数的形式传入</li>\n<li>使用块级作用域，让变量成为自己上下文的属性，避免共享</li>\n</ul>\n<h4 id=\"6-对象的拷贝\"><a href=\"#6-对象的拷贝\" class=\"headerlink\" title=\"6.对象的拷贝\"></a>6.对象的拷贝</h4><p>浅拷贝: 以赋值的形式拷贝引用对象，仍指向同一个地址，修改时原对象也会受到影响</p>\n<ul>\n<li>Object.assign</li>\n<li>…扩展运算符<br>深拷贝: 完全拷贝一个新对象，修改时原对象不再受到任何影响</li>\n<li>当值为函数或 undefined 时，无法拷贝</li>\n<li>JSON.parse(JSON.stringify(obj)): 性能最快</li>\n<li>递归进行逐一赋值</li>\n</ul>\n<h4 id=\"7-new-运算符的执行过程\"><a href=\"#7-new-运算符的执行过程\" class=\"headerlink\" title=\"7.new 运算符的执行过程\"></a>7.new 运算符的执行过程</h4><ul>\n<li>新生成一个对象</li>\n<li>链接到原型 prototype</li>\n<li>绑定 this</li>\n<li>返回新对象</li>\n</ul>\n<h4 id=\"8-代码的复用\"><a href=\"#8-代码的复用\" class=\"headerlink\" title=\"8.代码的复用\"></a>8.代码的复用</h4><ul>\n<li>函数封装</li>\n<li>继承</li>\n<li>混入 mixin 模式（感觉和继承差不多鸭）</li>\n<li>借用 apply/call</li>\n</ul>\n<h4 id=\"9-继承\"><a href=\"#9-继承\" class=\"headerlink\" title=\"9.继承\"></a>9.继承</h4><p>在 JS 中，继承通常指的便是原型链继承，也就是通过指定原型，并可以通过原型链继承原型上的属性或者方法。</p>\n<ul>\n<li>使用 ES6 的语法糖 class/extends</li>\n</ul>\n<h4 id=\"10-类型转换\"><a href=\"#10-类型转换\" class=\"headerlink\" title=\"10.类型转换\"></a>10.类型转换</h4><p>在 JS 中在使用运算符号或者对比符时，会自带隐式转换，规则如下:</p>\n<ul>\n<li>-、*、/、% ：一律转换成数值后计算</li>\n<li>[1].toString()===’1’</li>\n<li>{}.toString()===’[object object]’ +：</li>\n<li>数字 + 字符串 = 字符串， 运算顺序是从左到右</li>\n<li>数字 + 对象， 优先调用对象的 valueOf -&gt; toString</li>\n<li>数字 + boolean/null = 数字</li>\n<li>数字 + undefined == NaN</li>\n</ul>\n<h4 id=\"11-类型判断\"><a href=\"#11-类型判断\" class=\"headerlink\" title=\"11.类型判断\"></a>11.类型判断</h4><p>判断类型，单单用 typeof 并无法完全满足，这其实并不是 bug，本质原因是 JS 的万物皆对象的理论。因此要真正完美判断时，我们需要区分对待</p>\n<ul>\n<li>基本类型(null): 使用 String(null)</li>\n<li>基本类型(string/number/boolean/undefined) + function: 直接使用 typeof 即可</li>\n<li>其余引用类型(Array/Date/RegExpError): 调用 toString 后根据 [objectXXX]进行判断</li>\n</ul>\n<h4 id=\"12-模块化\"><a href=\"#12-模块化\" class=\"headerlink\" title=\"12.模块化\"></a>12.模块化</h4><ul>\n<li>es6: import/exports</li>\n<li>commonjs: require/module.exports/exports</li>\n</ul>\n<p>require 与 import 的区别</p>\n<ul>\n<li>require 支持动态导入， import 不支持，正在提案 (babel 下可支持)</li>\n<li>require 是同步导入， import 属于异步导入</li>\n<li>require 是值拷贝，导出值变化不会影响导入值； import 指向内存地址，导入值会随导出值而变化</li>\n</ul>\n<h4 id=\"13-防抖与节流\"><a href=\"#13-防抖与节流\" class=\"headerlink\" title=\"13.防抖与节流\"></a>13.防抖与节流</h4><p>具体看前几篇的博客</p>\n<h4 id=\"14-this-指向\"><a href=\"#14-this-指向\" class=\"headerlink\" title=\"14.this 指向\"></a>14.this 指向</h4><p>要明白 this 指向，其实就是要搞清楚函数的运行环境，说人话就是，谁调用了函数。例如:</p>\n<ul>\n<li>obj.fn()，便是 obj 调用了函数，既函数中的 this===obj</li>\n<li>fn()，这里可以看成 window.fn()，因此 this===window</li>\n</ul>\n<p>但这种机制并不完全能满足我们的业务需求，因此提供了三种方式可以手动修改 this 的指向:</p>\n<ul>\n<li>call:fn.call(target,1,2)</li>\n<li>apply:fn.apply(target,[1,2])</li>\n<li>bind:fn.bind(target)(1,2)</li>\n</ul>\n<p>这三种方式在前几篇博客有详情</p>\n<h4 id=\"15-ES6-ES7\"><a href=\"#15-ES6-ES7\" class=\"headerlink\" title=\"15.ES6/ES7\"></a>15.ES6/ES7</h4><ul>\n<li>声明:let/const: 块级作用域、不存在变量提升、暂时性死区、不允许重复声明,const: 声明常量，无法修改</li>\n<li>解构赋值</li>\n<li>class/extend: 类声明与继承</li>\n<li>Set/Map: 新的数据结构</li>\n<li>Promise 的使用与实现,await/async</li>\n</ul>\n<p>具体参考阮一峰的 es6 入门：<a href=\"http://es6.ruanyifeng.com/#README\" target=\"_blank\" rel=\"noopener\">http://es6.ruanyifeng.com/#README</a></p>\n<h4 id=\"16-数组\"><a href=\"#16-数组\" class=\"headerlink\" title=\"16.数组\"></a>16.数组</h4><ul>\n<li>map: 遍历数组，返回回调返回值组成的新数组</li>\n<li>forEach: 无法 break，可以用 try/catch 中 thrownewError 来停止</li>\n<li>filter: 过滤</li>\n<li>sort(fn)/reverse: 排序与反转，改变原数组</li>\n<li>concat: 连接数组，不影响原数组， 浅拷贝<br>…….</li>\n</ul>\n<h3 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h3><h4 id=\"常见状态码\"><a href=\"#常见状态码\" class=\"headerlink\" title=\"常见状态码\"></a>常见状态码</h4><ul>\n<li>1xx: 接受，继续处理</li>\n<li>200: 成功，并返回数据</li>\n<li>201: 已创建</li>\n<li>202: 已接受</li>\n<li>203: 成为，但未授权</li>\n<li>204: 成功，无内容</li>\n<li>205: 成功，重置内容</li>\n<li>206: 成功，部分内容</li>\n<li>301: 永久移动，重定向</li>\n<li>302: 临时移动，可使用原有 URI</li>\n<li>304: 资源未修改，可使用缓存</li>\n<li>305: 需代理访问</li>\n<li>400: 请求语法错误</li>\n<li>401: 要求身份认证</li>\n<li>403: 拒绝请求</li>\n<li>404: 资源不存在</li>\n<li>500: 服务器错误</li>\n</ul>\n<h4 id=\"get-post\"><a href=\"#get-post\" class=\"headerlink\" title=\"get / post\"></a>get / post</h4><p>get: 缓存、请求长度受限、会被历史保存记录<br>post: 安全、大数据、更多编码类型</p>\n<h3 id=\"框架：Vue\"><a href=\"#框架：Vue\" class=\"headerlink\" title=\"框架：Vue\"></a>框架：Vue</h3><h4 id=\"1-nextTick\"><a href=\"#1-nextTick\" class=\"headerlink\" title=\"1.nextTick\"></a>1.nextTick</h4><p>在下次 dom 更新循环结束之后执行延迟回调，可用于获取更新后的 dom 状态</p>\n<h4 id=\"2-生命周期\"><a href=\"#2-生命周期\" class=\"headerlink\" title=\"2. 生命周期\"></a>2. 生命周期</h4><ul>\n<li>beforeCreate</li>\n<li>created</li>\n<li>beforeMount</li>\n<li>mounted</li>\n<li>beforeUpdate</li>\n<li>updated</li>\n<li>beforeDestroy</li>\n<li>destroyed</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>想必大家很厌烦笔试，因为脑海中都是一些分散的知识点，无法关联成网，一直处于时曾相识的状态。不知道多少人和我一样，至今每次写阻止冒泡都需要百度一番如何拼写。</p>\n</blockquote>\n<h3 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><h4 id=\"1-盒模型\"><a href=\"#1-盒模型\" class=\"headerlink\" title=\"1.盒模型\"></a>1.盒模型</h4><p>页面渲染时，dom 元素所采用的布局模型。可通过 box-sizing 进行设置。根据计算宽高的区域可分为：</p>\n<ul>\n<li>content-box (W3C 标准盒模型,在宽度和高度之外绘制元素的内边距和边框)</li>\n<li>border-box (为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制)</li>\n<li>inherit (从父元素继承 box-sizing 属性的值)</li>\n</ul>\n<h4 id=\"2-层叠上下文\"><a href=\"#2-层叠上下文\" class=\"headerlink\" title=\"2.层叠上下文\"></a>2.层叠上下文</h4><ul>\n<li>z-index 属性值并不是在任何元素上都有效果。它仅在定位元素（定义了 position 属性，且属性值为非 static 值的元素）上有效果</li>\n<li>判断元素在 Z 轴上的堆叠顺序，不仅仅是直接比较两个元素的 z-index 值的大小，这个堆叠顺序实际由元素的层叠上下文、层叠等级共同决定。<br><img src=\"/2019/02/20/Interview/z.png\" alt=\"z\"><br>层叠上下文通俗的讲就是，两个父元素各自有一个子元素，子元素全部设置有 position 和 z-index，那么这时候因为父元素没有设置 z-index，所以没有产生上下文，此时 z-index 谁大谁就在上面,如果两个父元素同时设置了 z-index,就算你其中子元素的 z-index 设置了 99999 也没用，因为你的父元素所产生的层叠上下文比别人的小，也就是 z-index。</li>\n</ul>\n<h4 id=\"3-居中布局\"><a href=\"#3-居中布局\" class=\"headerlink\" title=\"3.居中布局\"></a>3.居中布局</h4><p>水平居中</p>\n<ul>\n<li>行内元素: text-align:center</li>\n<li>块级元素: margin:0 auto</li>\n<li>absolute+transform（position: absolute;top: 50%;left: 50%;transform: translate(-50%, -50%);）</li>\n<li>flex+justify-content:center</li>\n</ul>\n<p>垂直居中</p>\n<ul>\n<li>line-height:height</li>\n<li>absolute+transform</li>\n<li>flex+align-items:center</li>\n<li>display: table-cell</li>\n</ul>\n<p>水平垂直居中</p>\n<ul>\n<li>absolute+transform</li>\n<li>flex+justify-content+align-items</li>\n</ul>\n<h4 id=\"4-选择器优先级\"><a href=\"#4-选择器优先级\" class=\"headerlink\" title=\"4.选择器优先级\"></a>4.选择器优先级</h4><ul>\n<li>!important &gt; 行内样式 &gt; #id &gt; .class &gt; tag &gt; * &gt; 继承 &gt; 默认</li>\n<li>选择器从右往左解析</li>\n</ul>\n<h4 id=\"5-去除浮动影响，防止父级高度塌陷\"><a href=\"#5-去除浮动影响，防止父级高度塌陷\" class=\"headerlink\" title=\"5.去除浮动影响，防止父级高度塌陷\"></a>5.去除浮动影响，防止父级高度塌陷</h4><ul>\n<li>通过增加尾元素清除浮动(::after{content:’’;clear:both;display:block;})</li>\n<li>父级设置高度</li>\n<li>父元素设置 overflow:hidden;</li>\n</ul>\n<h3 id=\"javascript\"><a href=\"#javascript\" class=\"headerlink\" title=\"javascript\"></a>javascript</h3><h4 id=\"1-原型-构造函数-实例\"><a href=\"#1-原型-构造函数-实例\" class=\"headerlink\" title=\"1.原型 / 构造函数 / 实例\"></a>1.原型 / 构造函数 / 实例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原型(prototype):一个简单的对象，用于实现对象的属性继承。可以简单的理解成对象的爹。在Firefox和Chrome中，</span><br><span class=\"line\">每个JavaScript对象中都包含一个 __proto__(非标准)的属性指向它爹(该对象的原型)，可obj.__proto__进行访问。</span><br><span class=\"line\">构造函数:可以通过new来新建一个对象的函数。</span><br><span class=\"line\">实例: 通过构造函数和new创建出来的对象，便是实例,实例通过 __proto__指向原型，通过constructor指向构造函数。</span><br><span class=\"line\">实例.__proto__ === 原型</span><br><span class=\"line\">原型.constructor === 构造函数</span><br><span class=\"line\">构造函数.prototype === 原型</span><br><span class=\"line\">原型.constructorr === 构造函数</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-原型链\"><a href=\"#2-原型链\" class=\"headerlink\" title=\"2.原型链\"></a>2.原型链</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原型链是由原型对象组成，每个对象都有__proto__属性，指向了创建该对象的构造函数的原型，</span><br><span class=\"line\">__proto__将对象连接起来组成了原型链。是一个用来实现继承和共享属性的有限的对象链。</span><br><span class=\"line\">具体还是去这个网站吧https://www.jianshu.com/p/dee9f8b14771</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-作用域\"><a href=\"#3-作用域\" class=\"headerlink\" title=\"3.作用域\"></a>3.作用域</h4><p>作用域其实可理解为该上下文中声明的变量和声明的作用范围。可分为块级作用域和函数作用域</p>\n<ul>\n<li>声明提前: 一个声明在函数体内都是可见的, 函数优先于变量</li>\n<li>非匿名自执行函数，函数变量为只读状态，无法修改</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const foo = 1</span><br><span class=\"line\">(function foo() &#123;</span><br><span class=\"line\">    foo = 10 // 由于foo在函数中只为可读，因此赋值无效</span><br><span class=\"line\">    console.log(foo)</span><br><span class=\"line\">&#125;())</span><br><span class=\"line\">// 结果打印：  ƒ foo() &#123; foo = 10 ; console.log(foo) &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-作用域链\"><a href=\"#4-作用域链\" class=\"headerlink\" title=\"4.作用域链\"></a>4.作用域链</h4><p>我们可以在执行上下文中访问到父级甚至全局的变量，这便是作用域链的功劳。作用域链可以理解为一组对象列表，包含父级和自身的变量对象，因此我们便能通过作用域链访问到父级里声明的变量或者函数。</p>\n<h4 id=\"5-闭包\"><a href=\"#5-闭包\" class=\"headerlink\" title=\"5.闭包\"></a>5.闭包</h4><p>闭包属于一种特殊的作用域，称为静态作用域。它的定义可以理解为: 父函数被销毁 的情况下，返回出的子函数仍然保留着父级的单变量对象和作用域链，因此可以继续访问到父级的变量对象，这样的函数称为闭包。<br>闭包也会产生一个问题：</p>\n<ul>\n<li>多个子函数都是同时指向父级，是完全共享的。因此当父级的变量对象被修改时，所有子函数都受到影响。<br>解决方法：</li>\n<li>变量可以通过函数参数的形式传入</li>\n<li>使用块级作用域，让变量成为自己上下文的属性，避免共享</li>\n</ul>\n<h4 id=\"6-对象的拷贝\"><a href=\"#6-对象的拷贝\" class=\"headerlink\" title=\"6.对象的拷贝\"></a>6.对象的拷贝</h4><p>浅拷贝: 以赋值的形式拷贝引用对象，仍指向同一个地址，修改时原对象也会受到影响</p>\n<ul>\n<li>Object.assign</li>\n<li>…扩展运算符<br>深拷贝: 完全拷贝一个新对象，修改时原对象不再受到任何影响</li>\n<li>当值为函数或 undefined 时，无法拷贝</li>\n<li>JSON.parse(JSON.stringify(obj)): 性能最快</li>\n<li>递归进行逐一赋值</li>\n</ul>\n<h4 id=\"7-new-运算符的执行过程\"><a href=\"#7-new-运算符的执行过程\" class=\"headerlink\" title=\"7.new 运算符的执行过程\"></a>7.new 运算符的执行过程</h4><ul>\n<li>新生成一个对象</li>\n<li>链接到原型 prototype</li>\n<li>绑定 this</li>\n<li>返回新对象</li>\n</ul>\n<h4 id=\"8-代码的复用\"><a href=\"#8-代码的复用\" class=\"headerlink\" title=\"8.代码的复用\"></a>8.代码的复用</h4><ul>\n<li>函数封装</li>\n<li>继承</li>\n<li>混入 mixin 模式（感觉和继承差不多鸭）</li>\n<li>借用 apply/call</li>\n</ul>\n<h4 id=\"9-继承\"><a href=\"#9-继承\" class=\"headerlink\" title=\"9.继承\"></a>9.继承</h4><p>在 JS 中，继承通常指的便是原型链继承，也就是通过指定原型，并可以通过原型链继承原型上的属性或者方法。</p>\n<ul>\n<li>使用 ES6 的语法糖 class/extends</li>\n</ul>\n<h4 id=\"10-类型转换\"><a href=\"#10-类型转换\" class=\"headerlink\" title=\"10.类型转换\"></a>10.类型转换</h4><p>在 JS 中在使用运算符号或者对比符时，会自带隐式转换，规则如下:</p>\n<ul>\n<li>-、*、/、% ：一律转换成数值后计算</li>\n<li>[1].toString()===’1’</li>\n<li>{}.toString()===’[object object]’ +：</li>\n<li>数字 + 字符串 = 字符串， 运算顺序是从左到右</li>\n<li>数字 + 对象， 优先调用对象的 valueOf -&gt; toString</li>\n<li>数字 + boolean/null = 数字</li>\n<li>数字 + undefined == NaN</li>\n</ul>\n<h4 id=\"11-类型判断\"><a href=\"#11-类型判断\" class=\"headerlink\" title=\"11.类型判断\"></a>11.类型判断</h4><p>判断类型，单单用 typeof 并无法完全满足，这其实并不是 bug，本质原因是 JS 的万物皆对象的理论。因此要真正完美判断时，我们需要区分对待</p>\n<ul>\n<li>基本类型(null): 使用 String(null)</li>\n<li>基本类型(string/number/boolean/undefined) + function: 直接使用 typeof 即可</li>\n<li>其余引用类型(Array/Date/RegExpError): 调用 toString 后根据 [objectXXX]进行判断</li>\n</ul>\n<h4 id=\"12-模块化\"><a href=\"#12-模块化\" class=\"headerlink\" title=\"12.模块化\"></a>12.模块化</h4><ul>\n<li>es6: import/exports</li>\n<li>commonjs: require/module.exports/exports</li>\n</ul>\n<p>require 与 import 的区别</p>\n<ul>\n<li>require 支持动态导入， import 不支持，正在提案 (babel 下可支持)</li>\n<li>require 是同步导入， import 属于异步导入</li>\n<li>require 是值拷贝，导出值变化不会影响导入值； import 指向内存地址，导入值会随导出值而变化</li>\n</ul>\n<h4 id=\"13-防抖与节流\"><a href=\"#13-防抖与节流\" class=\"headerlink\" title=\"13.防抖与节流\"></a>13.防抖与节流</h4><p>具体看前几篇的博客</p>\n<h4 id=\"14-this-指向\"><a href=\"#14-this-指向\" class=\"headerlink\" title=\"14.this 指向\"></a>14.this 指向</h4><p>要明白 this 指向，其实就是要搞清楚函数的运行环境，说人话就是，谁调用了函数。例如:</p>\n<ul>\n<li>obj.fn()，便是 obj 调用了函数，既函数中的 this===obj</li>\n<li>fn()，这里可以看成 window.fn()，因此 this===window</li>\n</ul>\n<p>但这种机制并不完全能满足我们的业务需求，因此提供了三种方式可以手动修改 this 的指向:</p>\n<ul>\n<li>call:fn.call(target,1,2)</li>\n<li>apply:fn.apply(target,[1,2])</li>\n<li>bind:fn.bind(target)(1,2)</li>\n</ul>\n<p>这三种方式在前几篇博客有详情</p>\n<h4 id=\"15-ES6-ES7\"><a href=\"#15-ES6-ES7\" class=\"headerlink\" title=\"15.ES6/ES7\"></a>15.ES6/ES7</h4><ul>\n<li>声明:let/const: 块级作用域、不存在变量提升、暂时性死区、不允许重复声明,const: 声明常量，无法修改</li>\n<li>解构赋值</li>\n<li>class/extend: 类声明与继承</li>\n<li>Set/Map: 新的数据结构</li>\n<li>Promise 的使用与实现,await/async</li>\n</ul>\n<p>具体参考阮一峰的 es6 入门：<a href=\"http://es6.ruanyifeng.com/#README\" target=\"_blank\" rel=\"noopener\">http://es6.ruanyifeng.com/#README</a></p>\n<h4 id=\"16-数组\"><a href=\"#16-数组\" class=\"headerlink\" title=\"16.数组\"></a>16.数组</h4><ul>\n<li>map: 遍历数组，返回回调返回值组成的新数组</li>\n<li>forEach: 无法 break，可以用 try/catch 中 thrownewError 来停止</li>\n<li>filter: 过滤</li>\n<li>sort(fn)/reverse: 排序与反转，改变原数组</li>\n<li>concat: 连接数组，不影响原数组， 浅拷贝<br>…….</li>\n</ul>\n<h3 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h3><h4 id=\"常见状态码\"><a href=\"#常见状态码\" class=\"headerlink\" title=\"常见状态码\"></a>常见状态码</h4><ul>\n<li>1xx: 接受，继续处理</li>\n<li>200: 成功，并返回数据</li>\n<li>201: 已创建</li>\n<li>202: 已接受</li>\n<li>203: 成为，但未授权</li>\n<li>204: 成功，无内容</li>\n<li>205: 成功，重置内容</li>\n<li>206: 成功，部分内容</li>\n<li>301: 永久移动，重定向</li>\n<li>302: 临时移动，可使用原有 URI</li>\n<li>304: 资源未修改，可使用缓存</li>\n<li>305: 需代理访问</li>\n<li>400: 请求语法错误</li>\n<li>401: 要求身份认证</li>\n<li>403: 拒绝请求</li>\n<li>404: 资源不存在</li>\n<li>500: 服务器错误</li>\n</ul>\n<h4 id=\"get-post\"><a href=\"#get-post\" class=\"headerlink\" title=\"get / post\"></a>get / post</h4><p>get: 缓存、请求长度受限、会被历史保存记录<br>post: 安全、大数据、更多编码类型</p>\n<h3 id=\"框架：Vue\"><a href=\"#框架：Vue\" class=\"headerlink\" title=\"框架：Vue\"></a>框架：Vue</h3><h4 id=\"1-nextTick\"><a href=\"#1-nextTick\" class=\"headerlink\" title=\"1.nextTick\"></a>1.nextTick</h4><p>在下次 dom 更新循环结束之后执行延迟回调，可用于获取更新后的 dom 状态</p>\n<h4 id=\"2-生命周期\"><a href=\"#2-生命周期\" class=\"headerlink\" title=\"2. 生命周期\"></a>2. 生命周期</h4><ul>\n<li>beforeCreate</li>\n<li>created</li>\n<li>beforeMount</li>\n<li>mounted</li>\n<li>beforeUpdate</li>\n<li>updated</li>\n<li>beforeDestroy</li>\n<li>destroyed</li>\n</ul>\n"},{"title":"downLoad","date":"2020-06-26T03:20:05.000Z","_content":"```\nclass DownLoad {\n    constructor(type) {\n        this.arr = {}\n        this.type = type\n        this.arr[type] = 0\n    }\n    int() {\n        this.arr[this.type] += 1\n        this.total()\n    }\n    total() {\n        let num = Object.entries(this.arr).reduce((all, [key, value]) => {\n            all += value\n            return all\n        }, 0);\n        console.log('总数量：', num)\n        return num\n    }\n}\nclass DownLoadSmall {\n    constructor(res = { isDown: false, url: './1.png' }) {\n        this.arr = res\n    }\n    start(DownLoad) {\n        if (this.arr.isDown) return this.arr\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                this.arr.isDown = true\n                DownLoad.int()\n                resolve(this.arr)\n            }, 500)\n        })\n    }\n}\nclass Image {\n    constructor(images) {\n        this.images = images\n    }\n    startDown(DownLoad) {\n        return new Promise(async resolve => {\n            for (let i = 0; i < this.images.length; i++) {\n                let data = new DownLoadSmall(this.images[i])\n                this.images[i] = await data.start(DownLoad, this.images[i])\n            }\n            console.log(this.images)\n            resolve()\n        })\n    }\n}\n\nlet images = [\n    { isDown: false, url: './1.png' },\n    { isDown: false, url: './2.png' },\n    { isDown: false, url: './3.png' },\n    { isDown: false, url: './4.png' },\n    { isDown: false, url: './5.png' },\n    { isDown: false, url: './6.png' },\n    { isDown: false, url: './7.png' },\n]\nasync function startDownImage() {\n    let imgClass = new DownLoad('image')\n    let img = new Image(images)\n    await img.startDown(imgClass)\n    await img.startDown(imgClass)\n}\nstartDownImage()\n\n```","source":"_posts/downLoad.md","raw":"---\ntitle: downLoad\ndate: 2020-06-26 11:20:05\ntags: JS\n---\n```\nclass DownLoad {\n    constructor(type) {\n        this.arr = {}\n        this.type = type\n        this.arr[type] = 0\n    }\n    int() {\n        this.arr[this.type] += 1\n        this.total()\n    }\n    total() {\n        let num = Object.entries(this.arr).reduce((all, [key, value]) => {\n            all += value\n            return all\n        }, 0);\n        console.log('总数量：', num)\n        return num\n    }\n}\nclass DownLoadSmall {\n    constructor(res = { isDown: false, url: './1.png' }) {\n        this.arr = res\n    }\n    start(DownLoad) {\n        if (this.arr.isDown) return this.arr\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                this.arr.isDown = true\n                DownLoad.int()\n                resolve(this.arr)\n            }, 500)\n        })\n    }\n}\nclass Image {\n    constructor(images) {\n        this.images = images\n    }\n    startDown(DownLoad) {\n        return new Promise(async resolve => {\n            for (let i = 0; i < this.images.length; i++) {\n                let data = new DownLoadSmall(this.images[i])\n                this.images[i] = await data.start(DownLoad, this.images[i])\n            }\n            console.log(this.images)\n            resolve()\n        })\n    }\n}\n\nlet images = [\n    { isDown: false, url: './1.png' },\n    { isDown: false, url: './2.png' },\n    { isDown: false, url: './3.png' },\n    { isDown: false, url: './4.png' },\n    { isDown: false, url: './5.png' },\n    { isDown: false, url: './6.png' },\n    { isDown: false, url: './7.png' },\n]\nasync function startDownImage() {\n    let imgClass = new DownLoad('image')\n    let img = new Image(images)\n    await img.startDown(imgClass)\n    await img.startDown(imgClass)\n}\nstartDownImage()\n\n```","slug":"downLoad","published":1,"updated":"2020-06-26T03:20:38.649Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbvns72o0007iguj4ad2m384","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class DownLoad &#123;</span><br><span class=\"line\">    constructor(type) &#123;</span><br><span class=\"line\">        this.arr = &#123;&#125;</span><br><span class=\"line\">        this.type = type</span><br><span class=\"line\">        this.arr[type] = 0</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int() &#123;</span><br><span class=\"line\">        this.arr[this.type] += 1</span><br><span class=\"line\">        this.total()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    total() &#123;</span><br><span class=\"line\">        let num = Object.entries(this.arr).reduce((all, [key, value]) =&gt; &#123;</span><br><span class=\"line\">            all += value</span><br><span class=\"line\">            return all</span><br><span class=\"line\">        &#125;, 0);</span><br><span class=\"line\">        console.log(&apos;总数量：&apos;, num)</span><br><span class=\"line\">        return num</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class DownLoadSmall &#123;</span><br><span class=\"line\">    constructor(res = &#123; isDown: false, url: &apos;./1.png&apos; &#125;) &#123;</span><br><span class=\"line\">        this.arr = res</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    start(DownLoad) &#123;</span><br><span class=\"line\">        if (this.arr.isDown) return this.arr</span><br><span class=\"line\">        return new Promise((resolve) =&gt; &#123;</span><br><span class=\"line\">            setTimeout(() =&gt; &#123;</span><br><span class=\"line\">                this.arr.isDown = true</span><br><span class=\"line\">                DownLoad.int()</span><br><span class=\"line\">                resolve(this.arr)</span><br><span class=\"line\">            &#125;, 500)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Image &#123;</span><br><span class=\"line\">    constructor(images) &#123;</span><br><span class=\"line\">        this.images = images</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    startDown(DownLoad) &#123;</span><br><span class=\"line\">        return new Promise(async resolve =&gt; &#123;</span><br><span class=\"line\">            for (let i = 0; i &lt; this.images.length; i++) &#123;</span><br><span class=\"line\">                let data = new DownLoadSmall(this.images[i])</span><br><span class=\"line\">                this.images[i] = await data.start(DownLoad, this.images[i])</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            console.log(this.images)</span><br><span class=\"line\">            resolve()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let images = [</span><br><span class=\"line\">    &#123; isDown: false, url: &apos;./1.png&apos; &#125;,</span><br><span class=\"line\">    &#123; isDown: false, url: &apos;./2.png&apos; &#125;,</span><br><span class=\"line\">    &#123; isDown: false, url: &apos;./3.png&apos; &#125;,</span><br><span class=\"line\">    &#123; isDown: false, url: &apos;./4.png&apos; &#125;,</span><br><span class=\"line\">    &#123; isDown: false, url: &apos;./5.png&apos; &#125;,</span><br><span class=\"line\">    &#123; isDown: false, url: &apos;./6.png&apos; &#125;,</span><br><span class=\"line\">    &#123; isDown: false, url: &apos;./7.png&apos; &#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\">async function startDownImage() &#123;</span><br><span class=\"line\">    let imgClass = new DownLoad(&apos;image&apos;)</span><br><span class=\"line\">    let img = new Image(images)</span><br><span class=\"line\">    await img.startDown(imgClass)</span><br><span class=\"line\">    await img.startDown(imgClass)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">startDownImage()</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class DownLoad &#123;</span><br><span class=\"line\">    constructor(type) &#123;</span><br><span class=\"line\">        this.arr = &#123;&#125;</span><br><span class=\"line\">        this.type = type</span><br><span class=\"line\">        this.arr[type] = 0</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int() &#123;</span><br><span class=\"line\">        this.arr[this.type] += 1</span><br><span class=\"line\">        this.total()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    total() &#123;</span><br><span class=\"line\">        let num = Object.entries(this.arr).reduce((all, [key, value]) =&gt; &#123;</span><br><span class=\"line\">            all += value</span><br><span class=\"line\">            return all</span><br><span class=\"line\">        &#125;, 0);</span><br><span class=\"line\">        console.log(&apos;总数量：&apos;, num)</span><br><span class=\"line\">        return num</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class DownLoadSmall &#123;</span><br><span class=\"line\">    constructor(res = &#123; isDown: false, url: &apos;./1.png&apos; &#125;) &#123;</span><br><span class=\"line\">        this.arr = res</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    start(DownLoad) &#123;</span><br><span class=\"line\">        if (this.arr.isDown) return this.arr</span><br><span class=\"line\">        return new Promise((resolve) =&gt; &#123;</span><br><span class=\"line\">            setTimeout(() =&gt; &#123;</span><br><span class=\"line\">                this.arr.isDown = true</span><br><span class=\"line\">                DownLoad.int()</span><br><span class=\"line\">                resolve(this.arr)</span><br><span class=\"line\">            &#125;, 500)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Image &#123;</span><br><span class=\"line\">    constructor(images) &#123;</span><br><span class=\"line\">        this.images = images</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    startDown(DownLoad) &#123;</span><br><span class=\"line\">        return new Promise(async resolve =&gt; &#123;</span><br><span class=\"line\">            for (let i = 0; i &lt; this.images.length; i++) &#123;</span><br><span class=\"line\">                let data = new DownLoadSmall(this.images[i])</span><br><span class=\"line\">                this.images[i] = await data.start(DownLoad, this.images[i])</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            console.log(this.images)</span><br><span class=\"line\">            resolve()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let images = [</span><br><span class=\"line\">    &#123; isDown: false, url: &apos;./1.png&apos; &#125;,</span><br><span class=\"line\">    &#123; isDown: false, url: &apos;./2.png&apos; &#125;,</span><br><span class=\"line\">    &#123; isDown: false, url: &apos;./3.png&apos; &#125;,</span><br><span class=\"line\">    &#123; isDown: false, url: &apos;./4.png&apos; &#125;,</span><br><span class=\"line\">    &#123; isDown: false, url: &apos;./5.png&apos; &#125;,</span><br><span class=\"line\">    &#123; isDown: false, url: &apos;./6.png&apos; &#125;,</span><br><span class=\"line\">    &#123; isDown: false, url: &apos;./7.png&apos; &#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\">async function startDownImage() &#123;</span><br><span class=\"line\">    let imgClass = new DownLoad(&apos;image&apos;)</span><br><span class=\"line\">    let img = new Image(images)</span><br><span class=\"line\">    await img.startDown(imgClass)</span><br><span class=\"line\">    await img.startDown(imgClass)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">startDownImage()</span><br></pre></td></tr></table></figure>"},{"title":"express学习日记","date":"2019-11-01T03:14:07.000Z","_content":"\n# hello,world\n\n19.11.1\n首先来一个 hello,world\n\n```\nmkdir express\ncd express\nnpm init -y\nyarn\nyarn add express -S\nyarn add nodemon -S\n```\n\n好了接下来写代码\n\n```\nconst express = require('express')\nconst app = new express()\n\napp.get('/', (req, res) => res.send('hello.world'))\napp.listen(8888, () => console.log('我永远喜欢新垣结衣，8888'))\n```\n\n学习完毕，关电脑玩游戏（滑稽）\n\n# router\n\nindex 入口文件\n\n```\napp.use('/', require('./router/index.js'))\n```\n\nrouter 下的 index\n\n```\nconst express = require('express')\nconst router = express.Router()\n\nrouter.get('/', (req, res) => res.send('我是主页'))\n\nmodule.exports = router\n```\n\n# 连接数据库\n\n```\nmkdir mysql\ncd mysql\ntouch index.js\nyarn add mysql -S\n```\n\n安装后在 index.js 里边写入\n\n```\nvar mysql = require('mysql')\nvar db\nif (!db) {\n  db = mysql.createPool({\n    host: 'localhost',\n    user: 'admin',\n    password: '1',\n    database: 'lijiapeng'\n  })\n}\n\nmodule.exports = db\n\n```\n\n然后在路由文件引入\n\n```\nconst express = require('express')\nconst router = express.Router()\nconst db = require('../mysql')\n\nrouter.get('/', (req, res) => {\n  db.query('select * from user', (err, data) => {\n    return res.json(data)\n  })\n})\n\nmodule.exports = router\n```\n","source":"_posts/express.md","raw":"---\ntitle: express学习日记\ndate: 2019-11-01 11:14:07\ntags: express\n---\n\n# hello,world\n\n19.11.1\n首先来一个 hello,world\n\n```\nmkdir express\ncd express\nnpm init -y\nyarn\nyarn add express -S\nyarn add nodemon -S\n```\n\n好了接下来写代码\n\n```\nconst express = require('express')\nconst app = new express()\n\napp.get('/', (req, res) => res.send('hello.world'))\napp.listen(8888, () => console.log('我永远喜欢新垣结衣，8888'))\n```\n\n学习完毕，关电脑玩游戏（滑稽）\n\n# router\n\nindex 入口文件\n\n```\napp.use('/', require('./router/index.js'))\n```\n\nrouter 下的 index\n\n```\nconst express = require('express')\nconst router = express.Router()\n\nrouter.get('/', (req, res) => res.send('我是主页'))\n\nmodule.exports = router\n```\n\n# 连接数据库\n\n```\nmkdir mysql\ncd mysql\ntouch index.js\nyarn add mysql -S\n```\n\n安装后在 index.js 里边写入\n\n```\nvar mysql = require('mysql')\nvar db\nif (!db) {\n  db = mysql.createPool({\n    host: 'localhost',\n    user: 'admin',\n    password: '1',\n    database: 'lijiapeng'\n  })\n}\n\nmodule.exports = db\n\n```\n\n然后在路由文件引入\n\n```\nconst express = require('express')\nconst router = express.Router()\nconst db = require('../mysql')\n\nrouter.get('/', (req, res) => {\n  db.query('select * from user', (err, data) => {\n    return res.json(data)\n  })\n})\n\nmodule.exports = router\n```\n","slug":"express","published":1,"updated":"2020-06-26T03:18:29.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbvns72r000aigujkw53mj6t","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"hello-world\"><a href=\"#hello-world\" class=\"headerlink\" title=\"hello,world\"></a>hello,world</h1><p>19.11.1<br>首先来一个 hello,world</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir express</span><br><span class=\"line\">cd express</span><br><span class=\"line\">npm init -y</span><br><span class=\"line\">yarn</span><br><span class=\"line\">yarn add express -S</span><br><span class=\"line\">yarn add nodemon -S</span><br></pre></td></tr></table></figure>\n<p>好了接下来写代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express = require(&apos;express&apos;)</span><br><span class=\"line\">const app = new express()</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(&apos;/&apos;, (req, res) =&gt; res.send(&apos;hello.world&apos;))</span><br><span class=\"line\">app.listen(8888, () =&gt; console.log(&apos;我永远喜欢新垣结衣，8888&apos;))</span><br></pre></td></tr></table></figure>\n<p>学习完毕，关电脑玩游戏（滑稽）</p>\n<h1 id=\"router\"><a href=\"#router\" class=\"headerlink\" title=\"router\"></a>router</h1><p>index 入口文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(&apos;/&apos;, require(&apos;./router/index.js&apos;))</span><br></pre></td></tr></table></figure>\n<p>router 下的 index</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express = require(&apos;express&apos;)</span><br><span class=\"line\">const router = express.Router()</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(&apos;/&apos;, (req, res) =&gt; res.send(&apos;我是主页&apos;))</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = router</span><br></pre></td></tr></table></figure>\n<h1 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir mysql</span><br><span class=\"line\">cd mysql</span><br><span class=\"line\">touch index.js</span><br><span class=\"line\">yarn add mysql -S</span><br></pre></td></tr></table></figure>\n<p>安装后在 index.js 里边写入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mysql = require(&apos;mysql&apos;)</span><br><span class=\"line\">var db</span><br><span class=\"line\">if (!db) &#123;</span><br><span class=\"line\">  db = mysql.createPool(&#123;</span><br><span class=\"line\">    host: &apos;localhost&apos;,</span><br><span class=\"line\">    user: &apos;admin&apos;,</span><br><span class=\"line\">    password: &apos;1&apos;,</span><br><span class=\"line\">    database: &apos;lijiapeng&apos;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = db</span><br></pre></td></tr></table></figure>\n<p>然后在路由文件引入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express = require(&apos;express&apos;)</span><br><span class=\"line\">const router = express.Router()</span><br><span class=\"line\">const db = require(&apos;../mysql&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(&apos;/&apos;, (req, res) =&gt; &#123;</span><br><span class=\"line\">  db.query(&apos;select * from user&apos;, (err, data) =&gt; &#123;</span><br><span class=\"line\">    return res.json(data)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = router</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"hello-world\"><a href=\"#hello-world\" class=\"headerlink\" title=\"hello,world\"></a>hello,world</h1><p>19.11.1<br>首先来一个 hello,world</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir express</span><br><span class=\"line\">cd express</span><br><span class=\"line\">npm init -y</span><br><span class=\"line\">yarn</span><br><span class=\"line\">yarn add express -S</span><br><span class=\"line\">yarn add nodemon -S</span><br></pre></td></tr></table></figure>\n<p>好了接下来写代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express = require(&apos;express&apos;)</span><br><span class=\"line\">const app = new express()</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(&apos;/&apos;, (req, res) =&gt; res.send(&apos;hello.world&apos;))</span><br><span class=\"line\">app.listen(8888, () =&gt; console.log(&apos;我永远喜欢新垣结衣，8888&apos;))</span><br></pre></td></tr></table></figure>\n<p>学习完毕，关电脑玩游戏（滑稽）</p>\n<h1 id=\"router\"><a href=\"#router\" class=\"headerlink\" title=\"router\"></a>router</h1><p>index 入口文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(&apos;/&apos;, require(&apos;./router/index.js&apos;))</span><br></pre></td></tr></table></figure>\n<p>router 下的 index</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express = require(&apos;express&apos;)</span><br><span class=\"line\">const router = express.Router()</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(&apos;/&apos;, (req, res) =&gt; res.send(&apos;我是主页&apos;))</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = router</span><br></pre></td></tr></table></figure>\n<h1 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir mysql</span><br><span class=\"line\">cd mysql</span><br><span class=\"line\">touch index.js</span><br><span class=\"line\">yarn add mysql -S</span><br></pre></td></tr></table></figure>\n<p>安装后在 index.js 里边写入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mysql = require(&apos;mysql&apos;)</span><br><span class=\"line\">var db</span><br><span class=\"line\">if (!db) &#123;</span><br><span class=\"line\">  db = mysql.createPool(&#123;</span><br><span class=\"line\">    host: &apos;localhost&apos;,</span><br><span class=\"line\">    user: &apos;admin&apos;,</span><br><span class=\"line\">    password: &apos;1&apos;,</span><br><span class=\"line\">    database: &apos;lijiapeng&apos;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = db</span><br></pre></td></tr></table></figure>\n<p>然后在路由文件引入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express = require(&apos;express&apos;)</span><br><span class=\"line\">const router = express.Router()</span><br><span class=\"line\">const db = require(&apos;../mysql&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(&apos;/&apos;, (req, res) =&gt; &#123;</span><br><span class=\"line\">  db.query(&apos;select * from user&apos;, (err, data) =&gt; &#123;</span><br><span class=\"line\">    return res.json(data)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = router</span><br></pre></td></tr></table></figure>\n"},{"title":"git常用操作","date":"2019-11-01T02:49:27.000Z","_content":"\n# 分支操作\n\n```\ngit checkout -b dev\n```\n\ngit checkout 加上 -b 参数表示创建并切换，相对于以下两条命令\n\n```\ngit branch dev\ngit checkout dev\n```\n\n查看当前分支 -a 可以查看远程分支\n\n```\ngit branch -a\n```\n\n合并分支\n\n```\ngit merge dev\n```\n\n删除本地分支\n\n```\ngit branch -d dev\n```\n\n切换分支完提交到远程 -d 删除远程仓库分支\n\n```\ngit push origin dev\ngit push -d origin dev\n```\n\n# 标签操作\n\n先切换到需要打标签的分支上，然后敲命令 git tag <name> 就可以打一个新标签\n\n```\ngit checkout dev\ngit tag v1.0.0\n```\n\n如果要打在之前的 commit，可以这样写\n\n```\ngit log --pretty=oneline --abbrev-commit\ngit tag v0.9 f52c633\n```\n\n查看标签列表,git show 可以查看标签信息\n\n```\ngit tag\ngit show <tag>\n```\n\n标签提交到远程\n\n```\ngit push origin <分支名> --tags\n```\n","source":"_posts/git-action.md","raw":"---\ntitle: git常用操作\ndate: 2019-11-01 10:49:27\ntags: git\n---\n\n# 分支操作\n\n```\ngit checkout -b dev\n```\n\ngit checkout 加上 -b 参数表示创建并切换，相对于以下两条命令\n\n```\ngit branch dev\ngit checkout dev\n```\n\n查看当前分支 -a 可以查看远程分支\n\n```\ngit branch -a\n```\n\n合并分支\n\n```\ngit merge dev\n```\n\n删除本地分支\n\n```\ngit branch -d dev\n```\n\n切换分支完提交到远程 -d 删除远程仓库分支\n\n```\ngit push origin dev\ngit push -d origin dev\n```\n\n# 标签操作\n\n先切换到需要打标签的分支上，然后敲命令 git tag <name> 就可以打一个新标签\n\n```\ngit checkout dev\ngit tag v1.0.0\n```\n\n如果要打在之前的 commit，可以这样写\n\n```\ngit log --pretty=oneline --abbrev-commit\ngit tag v0.9 f52c633\n```\n\n查看标签列表,git show 可以查看标签信息\n\n```\ngit tag\ngit show <tag>\n```\n\n标签提交到远程\n\n```\ngit push origin <分支名> --tags\n```\n","slug":"git-action","published":1,"updated":"2020-06-26T03:18:29.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbvns72t000biguj1mje1icg","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"分支操作\"><a href=\"#分支操作\" class=\"headerlink\" title=\"分支操作\"></a>分支操作</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b dev</span><br></pre></td></tr></table></figure>\n<p>git checkout 加上 -b 参数表示创建并切换，相对于以下两条命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch dev</span><br><span class=\"line\">git checkout dev</span><br></pre></td></tr></table></figure>\n<p>查看当前分支 -a 可以查看远程分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n<p>合并分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge dev</span><br></pre></td></tr></table></figure>\n<p>删除本地分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d dev</span><br></pre></td></tr></table></figure>\n<p>切换分支完提交到远程 -d 删除远程仓库分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin dev</span><br><span class=\"line\">git push -d origin dev</span><br></pre></td></tr></table></figure>\n<h1 id=\"标签操作\"><a href=\"#标签操作\" class=\"headerlink\" title=\"标签操作\"></a>标签操作</h1><p>先切换到需要打标签的分支上，然后敲命令 git tag <name> 就可以打一个新标签</name></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout dev</span><br><span class=\"line\">git tag v1.0.0</span><br></pre></td></tr></table></figure>\n<p>如果要打在之前的 commit，可以这样写</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --pretty=oneline --abbrev-commit</span><br><span class=\"line\">git tag v0.9 f52c633</span><br></pre></td></tr></table></figure>\n<p>查看标签列表,git show 可以查看标签信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag</span><br><span class=\"line\">git show &lt;tag&gt;</span><br></pre></td></tr></table></figure>\n<p>标签提交到远程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin &lt;分支名&gt; --tags</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"分支操作\"><a href=\"#分支操作\" class=\"headerlink\" title=\"分支操作\"></a>分支操作</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b dev</span><br></pre></td></tr></table></figure>\n<p>git checkout 加上 -b 参数表示创建并切换，相对于以下两条命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch dev</span><br><span class=\"line\">git checkout dev</span><br></pre></td></tr></table></figure>\n<p>查看当前分支 -a 可以查看远程分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n<p>合并分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge dev</span><br></pre></td></tr></table></figure>\n<p>删除本地分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d dev</span><br></pre></td></tr></table></figure>\n<p>切换分支完提交到远程 -d 删除远程仓库分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin dev</span><br><span class=\"line\">git push -d origin dev</span><br></pre></td></tr></table></figure>\n<h1 id=\"标签操作\"><a href=\"#标签操作\" class=\"headerlink\" title=\"标签操作\"></a>标签操作</h1><p>先切换到需要打标签的分支上，然后敲命令 git tag <name> 就可以打一个新标签</name></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout dev</span><br><span class=\"line\">git tag v1.0.0</span><br></pre></td></tr></table></figure>\n<p>如果要打在之前的 commit，可以这样写</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --pretty=oneline --abbrev-commit</span><br><span class=\"line\">git tag v0.9 f52c633</span><br></pre></td></tr></table></figure>\n<p>查看标签列表,git show 可以查看标签信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag</span><br><span class=\"line\">git show &lt;tag&gt;</span><br></pre></td></tr></table></figure>\n<p>标签提交到远程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin &lt;分支名&gt; --tags</span><br></pre></td></tr></table></figure>\n"},{"title":"实现一个简单的拖拽","date":"2019-10-14T09:10:48.000Z","_content":"\n#### 采用了 h5 的新特性\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n   <meta charset=\"UTF-8\">\n   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n   <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n   <title>Document</title>\n   <style>\n      .el {\n         flex-wrap: wrap;\n      }\n\n      .a,\n      .b {\n         width: 400px;\n         height: 400px;\n         border: 3px solid greenyellow;\n         margin-right: 80px;\n         margin-bottom: 50px;\n         line-height: 400px;\n         text-align: center;\n         font-size: 56px;\n      }\n\n      .flex {\n         display: flex;\n      }\n   </style>\n</head>\n\n<body>\n   <div class=\"el flex\">\n      <div class=\"a\" draggable='true'>1</div>\n      <div class=\"b\" draggable='true'>2</div>\n   </div>\n</body>\n<script>\n   let $ = (el) => document.querySelector(el)\n   let $$ = (el) => document.querySelectorAll(el)\n   class Drag {\n      constructor(dom) {\n         this.dom = dom\n         this.fromDom = null\n         this.toFrom = null\n      }\n      init() {\n         let filterChild = [...this.dom.childNodes].filter(it => it.nodeName !== \"#text\" && !/\\s/.test(it.nodeValue))\n         filterChild.map(it => {\n            it.setAttribute('draggable', 'true')\n            this.dragStart(it)\n            this.dragEnter(it)\n            this.drop(it)\n         })\n      }\n      dragStart(dom) {\n         let that = this\n         dom.ondragstart = function () {\n            that.fromDom = dom\n         }\n      }\n      dragEnter(dom) {\n         let that = this\n         dom.ondragover = function (e) {\n            that.toFrom = dom\n            e.preventDefault();\n         }\n      }\n      drop(dom) {\n         let that = this\n         dom.ondrop = function (e) {\n            let d = that.fromDom.innerHTML\n            that.fromDom.innerHTML = that.toFrom.innerHTML\n            that.toFrom.innerHTML = d\n            that.fromDom = null\n            that.toDom = null\n         }\n      }\n   }\n   let drap = new Drag($('.el'))\n   drap.init()\n</script>\n\n</html>\n```\n","source":"_posts/drap.md","raw":"---\ntitle: 实现一个简单的拖拽\ndate: 2019-10-14 17:10:48\ntags:\n---\n\n#### 采用了 h5 的新特性\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n   <meta charset=\"UTF-8\">\n   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n   <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n   <title>Document</title>\n   <style>\n      .el {\n         flex-wrap: wrap;\n      }\n\n      .a,\n      .b {\n         width: 400px;\n         height: 400px;\n         border: 3px solid greenyellow;\n         margin-right: 80px;\n         margin-bottom: 50px;\n         line-height: 400px;\n         text-align: center;\n         font-size: 56px;\n      }\n\n      .flex {\n         display: flex;\n      }\n   </style>\n</head>\n\n<body>\n   <div class=\"el flex\">\n      <div class=\"a\" draggable='true'>1</div>\n      <div class=\"b\" draggable='true'>2</div>\n   </div>\n</body>\n<script>\n   let $ = (el) => document.querySelector(el)\n   let $$ = (el) => document.querySelectorAll(el)\n   class Drag {\n      constructor(dom) {\n         this.dom = dom\n         this.fromDom = null\n         this.toFrom = null\n      }\n      init() {\n         let filterChild = [...this.dom.childNodes].filter(it => it.nodeName !== \"#text\" && !/\\s/.test(it.nodeValue))\n         filterChild.map(it => {\n            it.setAttribute('draggable', 'true')\n            this.dragStart(it)\n            this.dragEnter(it)\n            this.drop(it)\n         })\n      }\n      dragStart(dom) {\n         let that = this\n         dom.ondragstart = function () {\n            that.fromDom = dom\n         }\n      }\n      dragEnter(dom) {\n         let that = this\n         dom.ondragover = function (e) {\n            that.toFrom = dom\n            e.preventDefault();\n         }\n      }\n      drop(dom) {\n         let that = this\n         dom.ondrop = function (e) {\n            let d = that.fromDom.innerHTML\n            that.fromDom.innerHTML = that.toFrom.innerHTML\n            that.toFrom.innerHTML = d\n            that.fromDom = null\n            that.toDom = null\n         }\n      }\n   }\n   let drap = new Drag($('.el'))\n   drap.init()\n</script>\n\n</html>\n```\n","slug":"drap","published":1,"updated":"2020-06-26T03:18:29.656Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbvns72w000diguj6iorbjx3","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h4 id=\"采用了-h5-的新特性\"><a href=\"#采用了-h5-的新特性\" class=\"headerlink\" title=\"采用了 h5 的新特性\"></a>采用了 h5 的新特性</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">   &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">   &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">   &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class=\"line\">   &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">   &lt;style&gt;</span><br><span class=\"line\">      .el &#123;</span><br><span class=\"line\">         flex-wrap: wrap;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      .a,</span><br><span class=\"line\">      .b &#123;</span><br><span class=\"line\">         width: 400px;</span><br><span class=\"line\">         height: 400px;</span><br><span class=\"line\">         border: 3px solid greenyellow;</span><br><span class=\"line\">         margin-right: 80px;</span><br><span class=\"line\">         margin-bottom: 50px;</span><br><span class=\"line\">         line-height: 400px;</span><br><span class=\"line\">         text-align: center;</span><br><span class=\"line\">         font-size: 56px;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      .flex &#123;</span><br><span class=\"line\">         display: flex;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">   &lt;div class=&quot;el flex&quot;&gt;</span><br><span class=\"line\">      &lt;div class=&quot;a&quot; draggable=&apos;true&apos;&gt;1&lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;b&quot; draggable=&apos;true&apos;&gt;2&lt;/div&gt;</span><br><span class=\"line\">   &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">   let $ = (el) =&gt; document.querySelector(el)</span><br><span class=\"line\">   let $$ = (el) =&gt; document.querySelectorAll(el)</span><br><span class=\"line\">   class Drag &#123;</span><br><span class=\"line\">      constructor(dom) &#123;</span><br><span class=\"line\">         this.dom = dom</span><br><span class=\"line\">         this.fromDom = null</span><br><span class=\"line\">         this.toFrom = null</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      init() &#123;</span><br><span class=\"line\">         let filterChild = [...this.dom.childNodes].filter(it =&gt; it.nodeName !== &quot;#text&quot; &amp;&amp; !/\\s/.test(it.nodeValue))</span><br><span class=\"line\">         filterChild.map(it =&gt; &#123;</span><br><span class=\"line\">            it.setAttribute(&apos;draggable&apos;, &apos;true&apos;)</span><br><span class=\"line\">            this.dragStart(it)</span><br><span class=\"line\">            this.dragEnter(it)</span><br><span class=\"line\">            this.drop(it)</span><br><span class=\"line\">         &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      dragStart(dom) &#123;</span><br><span class=\"line\">         let that = this</span><br><span class=\"line\">         dom.ondragstart = function () &#123;</span><br><span class=\"line\">            that.fromDom = dom</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      dragEnter(dom) &#123;</span><br><span class=\"line\">         let that = this</span><br><span class=\"line\">         dom.ondragover = function (e) &#123;</span><br><span class=\"line\">            that.toFrom = dom</span><br><span class=\"line\">            e.preventDefault();</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      drop(dom) &#123;</span><br><span class=\"line\">         let that = this</span><br><span class=\"line\">         dom.ondrop = function (e) &#123;</span><br><span class=\"line\">            let d = that.fromDom.innerHTML</span><br><span class=\"line\">            that.fromDom.innerHTML = that.toFrom.innerHTML</span><br><span class=\"line\">            that.toFrom.innerHTML = d</span><br><span class=\"line\">            that.fromDom = null</span><br><span class=\"line\">            that.toDom = null</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   let drap = new Drag($(&apos;.el&apos;))</span><br><span class=\"line\">   drap.init()</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"采用了-h5-的新特性\"><a href=\"#采用了-h5-的新特性\" class=\"headerlink\" title=\"采用了 h5 的新特性\"></a>采用了 h5 的新特性</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">   &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">   &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">   &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class=\"line\">   &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">   &lt;style&gt;</span><br><span class=\"line\">      .el &#123;</span><br><span class=\"line\">         flex-wrap: wrap;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      .a,</span><br><span class=\"line\">      .b &#123;</span><br><span class=\"line\">         width: 400px;</span><br><span class=\"line\">         height: 400px;</span><br><span class=\"line\">         border: 3px solid greenyellow;</span><br><span class=\"line\">         margin-right: 80px;</span><br><span class=\"line\">         margin-bottom: 50px;</span><br><span class=\"line\">         line-height: 400px;</span><br><span class=\"line\">         text-align: center;</span><br><span class=\"line\">         font-size: 56px;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      .flex &#123;</span><br><span class=\"line\">         display: flex;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">   &lt;div class=&quot;el flex&quot;&gt;</span><br><span class=\"line\">      &lt;div class=&quot;a&quot; draggable=&apos;true&apos;&gt;1&lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;b&quot; draggable=&apos;true&apos;&gt;2&lt;/div&gt;</span><br><span class=\"line\">   &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">   let $ = (el) =&gt; document.querySelector(el)</span><br><span class=\"line\">   let $$ = (el) =&gt; document.querySelectorAll(el)</span><br><span class=\"line\">   class Drag &#123;</span><br><span class=\"line\">      constructor(dom) &#123;</span><br><span class=\"line\">         this.dom = dom</span><br><span class=\"line\">         this.fromDom = null</span><br><span class=\"line\">         this.toFrom = null</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      init() &#123;</span><br><span class=\"line\">         let filterChild = [...this.dom.childNodes].filter(it =&gt; it.nodeName !== &quot;#text&quot; &amp;&amp; !/\\s/.test(it.nodeValue))</span><br><span class=\"line\">         filterChild.map(it =&gt; &#123;</span><br><span class=\"line\">            it.setAttribute(&apos;draggable&apos;, &apos;true&apos;)</span><br><span class=\"line\">            this.dragStart(it)</span><br><span class=\"line\">            this.dragEnter(it)</span><br><span class=\"line\">            this.drop(it)</span><br><span class=\"line\">         &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      dragStart(dom) &#123;</span><br><span class=\"line\">         let that = this</span><br><span class=\"line\">         dom.ondragstart = function () &#123;</span><br><span class=\"line\">            that.fromDom = dom</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      dragEnter(dom) &#123;</span><br><span class=\"line\">         let that = this</span><br><span class=\"line\">         dom.ondragover = function (e) &#123;</span><br><span class=\"line\">            that.toFrom = dom</span><br><span class=\"line\">            e.preventDefault();</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      drop(dom) &#123;</span><br><span class=\"line\">         let that = this</span><br><span class=\"line\">         dom.ondrop = function (e) &#123;</span><br><span class=\"line\">            let d = that.fromDom.innerHTML</span><br><span class=\"line\">            that.fromDom.innerHTML = that.toFrom.innerHTML</span><br><span class=\"line\">            that.toFrom.innerHTML = d</span><br><span class=\"line\">            that.fromDom = null</span><br><span class=\"line\">            that.toDom = null</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   let drap = new Drag($(&apos;.el&apos;))</span><br><span class=\"line\">   drap.init()</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n"},{"title":"阿里云服务器配置jenkins新手入门","date":"2019-10-23T06:00:19.000Z","_content":"\n#### 安装 java 并设置环境变量\n\n```\n我有点迷，当时我是自己下载然后用ftp上传上去然后解压，后续其他方法我再试试\n最好安装10.x版本\n环境变量地址: vi /etc/profile\n```\n\n#### 安装 docker\n\n```\n# 安装必要的一些系统工具\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n\n# 添加软件源\nsudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n\n# 添加软国内软件源\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\n# 官网推荐\n# 更新并安装Docker-CE\nsudo yum install docker-ce docker-ce-cli containerd.io\n```\n\n#### 然后安装 jenkins 镜像\n\n```\n# 查看安装镜像\ndocker image ls\n\n# 安装jenkins镜像\ndocker pull jenkinsci/blueocean\n\n# 创建一个jenkins目录\nmkdir /home/jenkins_home\n\n# 启动一个jenkins容器 -d后台运行\n# /home/jenkins_home/:/home/jenkins_home/ 是为了做共享文件夹，从git克隆代码后然后共享到主机进行打包\n# --name 自定义名字\ndocker run --name jenkins -p 8081:8080  -v /home/jenkins_home/:/home/jenkins_home/ jenkinsci/blueocean -d\n\n# 启动docker 启动镜像\nsystemctl start docker\nservice docker stop #关闭docker\ndocker start jenkins #开启容器\ndocker kill #关闭容器\ndocker restart [container id] #重启容器\n\n# 查看正在运行的容器\ndocker ps\n```\n\n成功后应该是下面这个页面\n![jenkins](jenkins/success.png)\n\n#### 查看端口是否映射成功\n\n`docker ps -a`\n\n#### 浏览器启动\n\n虚拟机 IP：端口\n\n#### 获取密钥\n\ndocker exec -it jenkins bash\n\n#### 配置钉钉机器人通知\n\n首先在钉钉创建自定义机器人，添加成功后获取到一个 access_token 保存好\n创建的时候添加地址即可，我加密然后就不行了\n然后在 jenkins 配置下载钉钉通知器插件，下载成功后在项目构建后操作选择钉钉通知器\n![jenkins](jenkins/action.png)\n","source":"_posts/jenkins.md","raw":"---\ntitle: 阿里云服务器配置jenkins新手入门\ndate: 2019-10-23 14:00:19\ntags: JS\n---\n\n#### 安装 java 并设置环境变量\n\n```\n我有点迷，当时我是自己下载然后用ftp上传上去然后解压，后续其他方法我再试试\n最好安装10.x版本\n环境变量地址: vi /etc/profile\n```\n\n#### 安装 docker\n\n```\n# 安装必要的一些系统工具\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n\n# 添加软件源\nsudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n\n# 添加软国内软件源\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\n# 官网推荐\n# 更新并安装Docker-CE\nsudo yum install docker-ce docker-ce-cli containerd.io\n```\n\n#### 然后安装 jenkins 镜像\n\n```\n# 查看安装镜像\ndocker image ls\n\n# 安装jenkins镜像\ndocker pull jenkinsci/blueocean\n\n# 创建一个jenkins目录\nmkdir /home/jenkins_home\n\n# 启动一个jenkins容器 -d后台运行\n# /home/jenkins_home/:/home/jenkins_home/ 是为了做共享文件夹，从git克隆代码后然后共享到主机进行打包\n# --name 自定义名字\ndocker run --name jenkins -p 8081:8080  -v /home/jenkins_home/:/home/jenkins_home/ jenkinsci/blueocean -d\n\n# 启动docker 启动镜像\nsystemctl start docker\nservice docker stop #关闭docker\ndocker start jenkins #开启容器\ndocker kill #关闭容器\ndocker restart [container id] #重启容器\n\n# 查看正在运行的容器\ndocker ps\n```\n\n成功后应该是下面这个页面\n![jenkins](jenkins/success.png)\n\n#### 查看端口是否映射成功\n\n`docker ps -a`\n\n#### 浏览器启动\n\n虚拟机 IP：端口\n\n#### 获取密钥\n\ndocker exec -it jenkins bash\n\n#### 配置钉钉机器人通知\n\n首先在钉钉创建自定义机器人，添加成功后获取到一个 access_token 保存好\n创建的时候添加地址即可，我加密然后就不行了\n然后在 jenkins 配置下载钉钉通知器插件，下载成功后在项目构建后操作选择钉钉通知器\n![jenkins](jenkins/action.png)\n","slug":"jenkins","published":1,"updated":"2020-06-26T03:18:29.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbvns72z000figujh3oak20z","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h4 id=\"安装-java-并设置环境变量\"><a href=\"#安装-java-并设置环境变量\" class=\"headerlink\" title=\"安装 java 并设置环境变量\"></a>安装 java 并设置环境变量</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我有点迷，当时我是自己下载然后用ftp上传上去然后解压，后续其他方法我再试试</span><br><span class=\"line\">最好安装10.x版本</span><br><span class=\"line\">环境变量地址: vi /etc/profile</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装-docker\"><a href=\"#安装-docker\" class=\"headerlink\" title=\"安装 docker\"></a>安装 docker</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装必要的一些系统工具</span><br><span class=\"line\">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加软件源</span><br><span class=\"line\">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加软国内软件源</span><br><span class=\"line\">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\"># 官网推荐</span><br><span class=\"line\"># 更新并安装Docker-CE</span><br><span class=\"line\">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>\n<h4 id=\"然后安装-jenkins-镜像\"><a href=\"#然后安装-jenkins-镜像\" class=\"headerlink\" title=\"然后安装 jenkins 镜像\"></a>然后安装 jenkins 镜像</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看安装镜像</span><br><span class=\"line\">docker image ls</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装jenkins镜像</span><br><span class=\"line\">docker pull jenkinsci/blueocean</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建一个jenkins目录</span><br><span class=\"line\">mkdir /home/jenkins_home</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动一个jenkins容器 -d后台运行</span><br><span class=\"line\"># /home/jenkins_home/:/home/jenkins_home/ 是为了做共享文件夹，从git克隆代码后然后共享到主机进行打包</span><br><span class=\"line\"># --name 自定义名字</span><br><span class=\"line\">docker run --name jenkins -p 8081:8080  -v /home/jenkins_home/:/home/jenkins_home/ jenkinsci/blueocean -d</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动docker 启动镜像</span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\">service docker stop #关闭docker</span><br><span class=\"line\">docker start jenkins #开启容器</span><br><span class=\"line\">docker kill #关闭容器</span><br><span class=\"line\">docker restart [container id] #重启容器</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看正在运行的容器</span><br><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n<p>成功后应该是下面这个页面<br><img src=\"/2019/10/23/jenkins/success.png\" alt=\"jenkins\"></p>\n<h4 id=\"查看端口是否映射成功\"><a href=\"#查看端口是否映射成功\" class=\"headerlink\" title=\"查看端口是否映射成功\"></a>查看端口是否映射成功</h4><p><code>docker ps -a</code></p>\n<h4 id=\"浏览器启动\"><a href=\"#浏览器启动\" class=\"headerlink\" title=\"浏览器启动\"></a>浏览器启动</h4><p>虚拟机 IP：端口</p>\n<h4 id=\"获取密钥\"><a href=\"#获取密钥\" class=\"headerlink\" title=\"获取密钥\"></a>获取密钥</h4><p>docker exec -it jenkins bash</p>\n<h4 id=\"配置钉钉机器人通知\"><a href=\"#配置钉钉机器人通知\" class=\"headerlink\" title=\"配置钉钉机器人通知\"></a>配置钉钉机器人通知</h4><p>首先在钉钉创建自定义机器人，添加成功后获取到一个 access_token 保存好<br>创建的时候添加地址即可，我加密然后就不行了<br>然后在 jenkins 配置下载钉钉通知器插件，下载成功后在项目构建后操作选择钉钉通知器<br><img src=\"/2019/10/23/jenkins/action.png\" alt=\"jenkins\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"安装-java-并设置环境变量\"><a href=\"#安装-java-并设置环境变量\" class=\"headerlink\" title=\"安装 java 并设置环境变量\"></a>安装 java 并设置环境变量</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我有点迷，当时我是自己下载然后用ftp上传上去然后解压，后续其他方法我再试试</span><br><span class=\"line\">最好安装10.x版本</span><br><span class=\"line\">环境变量地址: vi /etc/profile</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装-docker\"><a href=\"#安装-docker\" class=\"headerlink\" title=\"安装 docker\"></a>安装 docker</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装必要的一些系统工具</span><br><span class=\"line\">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加软件源</span><br><span class=\"line\">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加软国内软件源</span><br><span class=\"line\">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\"># 官网推荐</span><br><span class=\"line\"># 更新并安装Docker-CE</span><br><span class=\"line\">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>\n<h4 id=\"然后安装-jenkins-镜像\"><a href=\"#然后安装-jenkins-镜像\" class=\"headerlink\" title=\"然后安装 jenkins 镜像\"></a>然后安装 jenkins 镜像</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看安装镜像</span><br><span class=\"line\">docker image ls</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装jenkins镜像</span><br><span class=\"line\">docker pull jenkinsci/blueocean</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建一个jenkins目录</span><br><span class=\"line\">mkdir /home/jenkins_home</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动一个jenkins容器 -d后台运行</span><br><span class=\"line\"># /home/jenkins_home/:/home/jenkins_home/ 是为了做共享文件夹，从git克隆代码后然后共享到主机进行打包</span><br><span class=\"line\"># --name 自定义名字</span><br><span class=\"line\">docker run --name jenkins -p 8081:8080  -v /home/jenkins_home/:/home/jenkins_home/ jenkinsci/blueocean -d</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动docker 启动镜像</span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\">service docker stop #关闭docker</span><br><span class=\"line\">docker start jenkins #开启容器</span><br><span class=\"line\">docker kill #关闭容器</span><br><span class=\"line\">docker restart [container id] #重启容器</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看正在运行的容器</span><br><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n<p>成功后应该是下面这个页面<br><img src=\"/2019/10/23/jenkins/success.png\" alt=\"jenkins\"></p>\n<h4 id=\"查看端口是否映射成功\"><a href=\"#查看端口是否映射成功\" class=\"headerlink\" title=\"查看端口是否映射成功\"></a>查看端口是否映射成功</h4><p><code>docker ps -a</code></p>\n<h4 id=\"浏览器启动\"><a href=\"#浏览器启动\" class=\"headerlink\" title=\"浏览器启动\"></a>浏览器启动</h4><p>虚拟机 IP：端口</p>\n<h4 id=\"获取密钥\"><a href=\"#获取密钥\" class=\"headerlink\" title=\"获取密钥\"></a>获取密钥</h4><p>docker exec -it jenkins bash</p>\n<h4 id=\"配置钉钉机器人通知\"><a href=\"#配置钉钉机器人通知\" class=\"headerlink\" title=\"配置钉钉机器人通知\"></a>配置钉钉机器人通知</h4><p>首先在钉钉创建自定义机器人，添加成功后获取到一个 access_token 保存好<br>创建的时候添加地址即可，我加密然后就不行了<br>然后在 jenkins 配置下载钉钉通知器插件，下载成功后在项目构建后操作选择钉钉通知器<br><img src=\"/2019/10/23/jenkins/action.png\" alt=\"jenkins\"></p>\n"},{"title":"常用的工具","date":"2019-07-15T09:09:46.000Z","_content":"\n### 超出行隐藏\n\n```\noverflow:hidden;\ntext-overflow:ellipsis;\ndisplay:-webkit-box;\n-webkit-box-orient:vertical;\n-webkit-line-clamp:2;   参数可为任意行数\n```\n\n### 实现一个 compose\n\n```\nfunction compose(...fns) {\n      return function (x) {\n        return fns.reduce(function (arg, fn) {\n          return fn(arg);\n        }, x)\n      }\n    }\n    function a(num) {\n      return num + 5\n    }\n    function b(num) {\n      return num + 2\n    }\n    console.log(compose(a, b)(5))\n```\n\n### 去掉滚动条\n\n```\n.element::-webkit-scrollbar {display:none}\n```\n\n### flex 一些经常使用的方法\n\n##### flex-direction:主轴的方向\n\n- row（默认值）：主轴为水平方向，起点在左端。\n- row-reverse：主轴为水平方向，起点在右端。\n- column：主轴为垂直方向，起点在上沿。\n- column-reverse：主轴为垂直方向，起点在下沿。\n\n##### align-content 定义了多根轴线的对齐方式\n\n- flex-start：与交叉轴的起点对齐。\n- flex-end：与交叉轴的终点对齐。\n- center：与交叉轴的中点对齐。\n- space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。\n- space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。\n- stretch（默认值）：轴线占满整个交叉轴。\n\n### 一些判断\n\n```\nlet userAgent = ''\nif (typeof navigator !== 'undefined') {\n  userAgent = navigator.userAgent.toLowerCase()\n}\n// ios浏览器\nexport const isiOS = /applewebkit/i.test(userAgent)\n\n// 微信浏览器\nexport const isWx = /micromessenger/i.test(userAgent)\n\n// 支付宝\nexport const isAliPay = /alipayclient/.test(userAgent)\n\n/**\n * @desc   判断是否pc页面\n * @return {Boolean}\n */\nexport const isPc = !/Android|webOS|iPhone|iPod|BlackBerry/i.test(userAgent)\n\n/**\n * @desc   判断是否为手机号\n * @param  {String|Number} str\n * @return {Boolean}\n */\nexport function isPhone(str) {\n  return /^(0|86|17951)?1[3456789]\\d{9}$/.test(str)\n}\n\n/**\n * @desc   判断是否为邮箱地址\n * @param  {String}  str\n * @return {Boolean}\n */\nexport function isEmail(str) {\n  return /\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*/.test(str)\n}\n\n/**\n * @desc   判断是否是数字\n * @param  {String|Number} str\n * @return {Boolean}\n */\nexport function isNum(str) {\n  return /^[0-9]+([.]{1}[0-9]+){0,1}$/.test(str)\n}\n\n/**\n *\n * @desc  判断是否为身份证号\n * @param  {String|Number} str\n * @return {Boolean}\n */\nexport function isIdCard(str) {\n  return /^(^[1-9]\\d{7}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}$)|(^[1-9]\\d{5}[1-9]\\d{3}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])((\\d{4})|\\d{3}[Xx])$)$/.test(\n    str\n  )\n}\n```\n\n###\n","source":"_posts/html.md","raw":"---\ntitle: 常用的工具\ndate: 2019-07-15 17:09:46\ntags: JS\n---\n\n### 超出行隐藏\n\n```\noverflow:hidden;\ntext-overflow:ellipsis;\ndisplay:-webkit-box;\n-webkit-box-orient:vertical;\n-webkit-line-clamp:2;   参数可为任意行数\n```\n\n### 实现一个 compose\n\n```\nfunction compose(...fns) {\n      return function (x) {\n        return fns.reduce(function (arg, fn) {\n          return fn(arg);\n        }, x)\n      }\n    }\n    function a(num) {\n      return num + 5\n    }\n    function b(num) {\n      return num + 2\n    }\n    console.log(compose(a, b)(5))\n```\n\n### 去掉滚动条\n\n```\n.element::-webkit-scrollbar {display:none}\n```\n\n### flex 一些经常使用的方法\n\n##### flex-direction:主轴的方向\n\n- row（默认值）：主轴为水平方向，起点在左端。\n- row-reverse：主轴为水平方向，起点在右端。\n- column：主轴为垂直方向，起点在上沿。\n- column-reverse：主轴为垂直方向，起点在下沿。\n\n##### align-content 定义了多根轴线的对齐方式\n\n- flex-start：与交叉轴的起点对齐。\n- flex-end：与交叉轴的终点对齐。\n- center：与交叉轴的中点对齐。\n- space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。\n- space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。\n- stretch（默认值）：轴线占满整个交叉轴。\n\n### 一些判断\n\n```\nlet userAgent = ''\nif (typeof navigator !== 'undefined') {\n  userAgent = navigator.userAgent.toLowerCase()\n}\n// ios浏览器\nexport const isiOS = /applewebkit/i.test(userAgent)\n\n// 微信浏览器\nexport const isWx = /micromessenger/i.test(userAgent)\n\n// 支付宝\nexport const isAliPay = /alipayclient/.test(userAgent)\n\n/**\n * @desc   判断是否pc页面\n * @return {Boolean}\n */\nexport const isPc = !/Android|webOS|iPhone|iPod|BlackBerry/i.test(userAgent)\n\n/**\n * @desc   判断是否为手机号\n * @param  {String|Number} str\n * @return {Boolean}\n */\nexport function isPhone(str) {\n  return /^(0|86|17951)?1[3456789]\\d{9}$/.test(str)\n}\n\n/**\n * @desc   判断是否为邮箱地址\n * @param  {String}  str\n * @return {Boolean}\n */\nexport function isEmail(str) {\n  return /\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*/.test(str)\n}\n\n/**\n * @desc   判断是否是数字\n * @param  {String|Number} str\n * @return {Boolean}\n */\nexport function isNum(str) {\n  return /^[0-9]+([.]{1}[0-9]+){0,1}$/.test(str)\n}\n\n/**\n *\n * @desc  判断是否为身份证号\n * @param  {String|Number} str\n * @return {Boolean}\n */\nexport function isIdCard(str) {\n  return /^(^[1-9]\\d{7}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}$)|(^[1-9]\\d{5}[1-9]\\d{3}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])((\\d{4})|\\d{3}[Xx])$)$/.test(\n    str\n  )\n}\n```\n\n###\n","slug":"html","published":1,"updated":"2020-06-26T03:18:29.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbvns732000higuj6mjdepmm","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"超出行隐藏\"><a href=\"#超出行隐藏\" class=\"headerlink\" title=\"超出行隐藏\"></a>超出行隐藏</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">overflow:hidden;</span><br><span class=\"line\">text-overflow:ellipsis;</span><br><span class=\"line\">display:-webkit-box;</span><br><span class=\"line\">-webkit-box-orient:vertical;</span><br><span class=\"line\">-webkit-line-clamp:2;   参数可为任意行数</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现一个-compose\"><a href=\"#实现一个-compose\" class=\"headerlink\" title=\"实现一个 compose\"></a>实现一个 compose</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function compose(...fns) &#123;</span><br><span class=\"line\">      return function (x) &#123;</span><br><span class=\"line\">        return fns.reduce(function (arg, fn) &#123;</span><br><span class=\"line\">          return fn(arg);</span><br><span class=\"line\">        &#125;, x)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    function a(num) &#123;</span><br><span class=\"line\">      return num + 5</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    function b(num) &#123;</span><br><span class=\"line\">      return num + 2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(compose(a, b)(5))</span><br></pre></td></tr></table></figure>\n<h3 id=\"去掉滚动条\"><a href=\"#去掉滚动条\" class=\"headerlink\" title=\"去掉滚动条\"></a>去掉滚动条</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.element::-webkit-scrollbar &#123;display:none&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"flex-一些经常使用的方法\"><a href=\"#flex-一些经常使用的方法\" class=\"headerlink\" title=\"flex 一些经常使用的方法\"></a>flex 一些经常使用的方法</h3><h5 id=\"flex-direction-主轴的方向\"><a href=\"#flex-direction-主轴的方向\" class=\"headerlink\" title=\"flex-direction:主轴的方向\"></a>flex-direction:主轴的方向</h5><ul>\n<li>row（默认值）：主轴为水平方向，起点在左端。</li>\n<li>row-reverse：主轴为水平方向，起点在右端。</li>\n<li>column：主轴为垂直方向，起点在上沿。</li>\n<li>column-reverse：主轴为垂直方向，起点在下沿。</li>\n</ul>\n<h5 id=\"align-content-定义了多根轴线的对齐方式\"><a href=\"#align-content-定义了多根轴线的对齐方式\" class=\"headerlink\" title=\"align-content 定义了多根轴线的对齐方式\"></a>align-content 定义了多根轴线的对齐方式</h5><ul>\n<li>flex-start：与交叉轴的起点对齐。</li>\n<li>flex-end：与交叉轴的终点对齐。</li>\n<li>center：与交叉轴的中点对齐。</li>\n<li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>\n<li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>\n<li>stretch（默认值）：轴线占满整个交叉轴。</li>\n</ul>\n<h3 id=\"一些判断\"><a href=\"#一些判断\" class=\"headerlink\" title=\"一些判断\"></a>一些判断</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let userAgent = &apos;&apos;</span><br><span class=\"line\">if (typeof navigator !== &apos;undefined&apos;) &#123;</span><br><span class=\"line\">  userAgent = navigator.userAgent.toLowerCase()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// ios浏览器</span><br><span class=\"line\">export const isiOS = /applewebkit/i.test(userAgent)</span><br><span class=\"line\"></span><br><span class=\"line\">// 微信浏览器</span><br><span class=\"line\">export const isWx = /micromessenger/i.test(userAgent)</span><br><span class=\"line\"></span><br><span class=\"line\">// 支付宝</span><br><span class=\"line\">export const isAliPay = /alipayclient/.test(userAgent)</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @desc   判断是否pc页面</span><br><span class=\"line\"> * @return &#123;Boolean&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">export const isPc = !/Android|webOS|iPhone|iPod|BlackBerry/i.test(userAgent)</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @desc   判断是否为手机号</span><br><span class=\"line\"> * @param  &#123;String|Number&#125; str</span><br><span class=\"line\"> * @return &#123;Boolean&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">export function isPhone(str) &#123;</span><br><span class=\"line\">  return /^(0|86|17951)?1[3456789]\\d&#123;9&#125;$/.test(str)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @desc   判断是否为邮箱地址</span><br><span class=\"line\"> * @param  &#123;String&#125;  str</span><br><span class=\"line\"> * @return &#123;Boolean&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">export function isEmail(str) &#123;</span><br><span class=\"line\">  return /\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*/.test(str)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @desc   判断是否是数字</span><br><span class=\"line\"> * @param  &#123;String|Number&#125; str</span><br><span class=\"line\"> * @return &#123;Boolean&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">export function isNum(str) &#123;</span><br><span class=\"line\">  return /^[0-9]+([.]&#123;1&#125;[0-9]+)&#123;0,1&#125;$/.test(str)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @desc  判断是否为身份证号</span><br><span class=\"line\"> * @param  &#123;String|Number&#125; str</span><br><span class=\"line\"> * @return &#123;Boolean&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">export function isIdCard(str) &#123;</span><br><span class=\"line\">  return /^(^[1-9]\\d&#123;7&#125;((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d&#123;3&#125;$)|(^[1-9]\\d&#123;5&#125;[1-9]\\d&#123;3&#125;((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])((\\d&#123;4&#125;)|\\d&#123;3&#125;[Xx])$)$/.test(</span><br><span class=\"line\">    str</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>###</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"超出行隐藏\"><a href=\"#超出行隐藏\" class=\"headerlink\" title=\"超出行隐藏\"></a>超出行隐藏</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">overflow:hidden;</span><br><span class=\"line\">text-overflow:ellipsis;</span><br><span class=\"line\">display:-webkit-box;</span><br><span class=\"line\">-webkit-box-orient:vertical;</span><br><span class=\"line\">-webkit-line-clamp:2;   参数可为任意行数</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现一个-compose\"><a href=\"#实现一个-compose\" class=\"headerlink\" title=\"实现一个 compose\"></a>实现一个 compose</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function compose(...fns) &#123;</span><br><span class=\"line\">      return function (x) &#123;</span><br><span class=\"line\">        return fns.reduce(function (arg, fn) &#123;</span><br><span class=\"line\">          return fn(arg);</span><br><span class=\"line\">        &#125;, x)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    function a(num) &#123;</span><br><span class=\"line\">      return num + 5</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    function b(num) &#123;</span><br><span class=\"line\">      return num + 2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(compose(a, b)(5))</span><br></pre></td></tr></table></figure>\n<h3 id=\"去掉滚动条\"><a href=\"#去掉滚动条\" class=\"headerlink\" title=\"去掉滚动条\"></a>去掉滚动条</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.element::-webkit-scrollbar &#123;display:none&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"flex-一些经常使用的方法\"><a href=\"#flex-一些经常使用的方法\" class=\"headerlink\" title=\"flex 一些经常使用的方法\"></a>flex 一些经常使用的方法</h3><h5 id=\"flex-direction-主轴的方向\"><a href=\"#flex-direction-主轴的方向\" class=\"headerlink\" title=\"flex-direction:主轴的方向\"></a>flex-direction:主轴的方向</h5><ul>\n<li>row（默认值）：主轴为水平方向，起点在左端。</li>\n<li>row-reverse：主轴为水平方向，起点在右端。</li>\n<li>column：主轴为垂直方向，起点在上沿。</li>\n<li>column-reverse：主轴为垂直方向，起点在下沿。</li>\n</ul>\n<h5 id=\"align-content-定义了多根轴线的对齐方式\"><a href=\"#align-content-定义了多根轴线的对齐方式\" class=\"headerlink\" title=\"align-content 定义了多根轴线的对齐方式\"></a>align-content 定义了多根轴线的对齐方式</h5><ul>\n<li>flex-start：与交叉轴的起点对齐。</li>\n<li>flex-end：与交叉轴的终点对齐。</li>\n<li>center：与交叉轴的中点对齐。</li>\n<li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>\n<li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>\n<li>stretch（默认值）：轴线占满整个交叉轴。</li>\n</ul>\n<h3 id=\"一些判断\"><a href=\"#一些判断\" class=\"headerlink\" title=\"一些判断\"></a>一些判断</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let userAgent = &apos;&apos;</span><br><span class=\"line\">if (typeof navigator !== &apos;undefined&apos;) &#123;</span><br><span class=\"line\">  userAgent = navigator.userAgent.toLowerCase()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// ios浏览器</span><br><span class=\"line\">export const isiOS = /applewebkit/i.test(userAgent)</span><br><span class=\"line\"></span><br><span class=\"line\">// 微信浏览器</span><br><span class=\"line\">export const isWx = /micromessenger/i.test(userAgent)</span><br><span class=\"line\"></span><br><span class=\"line\">// 支付宝</span><br><span class=\"line\">export const isAliPay = /alipayclient/.test(userAgent)</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @desc   判断是否pc页面</span><br><span class=\"line\"> * @return &#123;Boolean&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">export const isPc = !/Android|webOS|iPhone|iPod|BlackBerry/i.test(userAgent)</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @desc   判断是否为手机号</span><br><span class=\"line\"> * @param  &#123;String|Number&#125; str</span><br><span class=\"line\"> * @return &#123;Boolean&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">export function isPhone(str) &#123;</span><br><span class=\"line\">  return /^(0|86|17951)?1[3456789]\\d&#123;9&#125;$/.test(str)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @desc   判断是否为邮箱地址</span><br><span class=\"line\"> * @param  &#123;String&#125;  str</span><br><span class=\"line\"> * @return &#123;Boolean&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">export function isEmail(str) &#123;</span><br><span class=\"line\">  return /\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*/.test(str)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @desc   判断是否是数字</span><br><span class=\"line\"> * @param  &#123;String|Number&#125; str</span><br><span class=\"line\"> * @return &#123;Boolean&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">export function isNum(str) &#123;</span><br><span class=\"line\">  return /^[0-9]+([.]&#123;1&#125;[0-9]+)&#123;0,1&#125;$/.test(str)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @desc  判断是否为身份证号</span><br><span class=\"line\"> * @param  &#123;String|Number&#125; str</span><br><span class=\"line\"> * @return &#123;Boolean&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">export function isIdCard(str) &#123;</span><br><span class=\"line\">  return /^(^[1-9]\\d&#123;7&#125;((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d&#123;3&#125;$)|(^[1-9]\\d&#123;5&#125;[1-9]\\d&#123;3&#125;((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])((\\d&#123;4&#125;)|\\d&#123;3&#125;[Xx])$)$/.test(</span><br><span class=\"line\">    str</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>###</p>\n"},{"title":"关于小程序","date":"2019-11-19T09:33:53.000Z","_content":"\n# 登陆逻辑梳理\n\n# wx.checkSession\n\n# wx.login 换取 session_key\n","source":"_posts/miniapp.md","raw":"---\ntitle: 关于小程序\ndate: 2019-11-19 17:33:53\ntags: JavaScript\n---\n\n# 登陆逻辑梳理\n\n# wx.checkSession\n\n# wx.login 换取 session_key\n","slug":"miniapp","published":1,"updated":"2020-06-26T03:18:29.660Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbvns733000jiguj2d5295bw","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"登陆逻辑梳理\"><a href=\"#登陆逻辑梳理\" class=\"headerlink\" title=\"登陆逻辑梳理\"></a>登陆逻辑梳理</h1><h1 id=\"wx-checkSession\"><a href=\"#wx-checkSession\" class=\"headerlink\" title=\"wx.checkSession\"></a>wx.checkSession</h1><h1 id=\"wx-login-换取-session-key\"><a href=\"#wx-login-换取-session-key\" class=\"headerlink\" title=\"wx.login 换取 session_key\"></a>wx.login 换取 session_key</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"登陆逻辑梳理\"><a href=\"#登陆逻辑梳理\" class=\"headerlink\" title=\"登陆逻辑梳理\"></a>登陆逻辑梳理</h1><h1 id=\"wx-checkSession\"><a href=\"#wx-checkSession\" class=\"headerlink\" title=\"wx.checkSession\"></a>wx.checkSession</h1><h1 id=\"wx-login-换取-session-key\"><a href=\"#wx-login-换取-session-key\" class=\"headerlink\" title=\"wx.login 换取 session_key\"></a>wx.login 换取 session_key</h1>"},{"title":"关于js防抖和节流","date":"2018-12-28T08:49:47.000Z","_content":"\n### JS 防抖\n\n&emsp;&emsp;最近在做公司商城项目时候，有个需求就是购物车里边，数量 input 框需要根据你当前输入的值，每次输入都要发送更新请求，然后后端进行计算，前端重新渲染页面，那么问题来，我每次输入一个数字都会发送一个请求到后端，这样就非常的浪费资源，页面加载也会变慢，于是我查看了下淘宝的购物车页面，发现他们是输入框输入数字停顿大概零点几秒后再开始发送请求，而不是像我这样每次输入都发送，然后我就找到了 js 防抖\n\n原文网址：https://juejin.im/post/5b8de829f265da43623c4261?utm_source=gold_browser_extension\n我把原文缩减了下写了个小 demo\n直接上代码\n\n```\nhtml：\n  <input id='debounce' />\nJS:\nvar timer = false;\nfunction debounce(delay) {\n      clearTimeout(timer)  // 清除未执行的代码，重置回初始化状态\n      timer = setTimeout(function () {\n            console.log('函数鸡柳')\n      }, delay)\n}\nlet inputb = document.getElementById('debounce')\ninputb.addEventListener('keyup', function (e) {\n   debounce(500)\n})\n```\n\n函数防抖的要点，需要一个 setTimeout 来辅助实现,延迟执行需要跑的代码\n如果方法多次触发，则把上次记录的延迟执行代码用 clearTimeout 清掉，重新开始\n多用于用户名邮箱等等认证，或购物车数量\n\n### JS 节流\n\n规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效\n\n```\n<input type=\"text\" id=\"d1\">\n\nvar time = 0\ndocument.getElementById(\"d1\").onkeyup=function(){\n    set()\n}\nfunction set(){\n    var date = new Date().getTime()\n    if(date-time>=2000){\n        timer = setTimeout(e=>{\n            console.log(\"红烧\")\n            time = date\n        },2000)\n    }\n}\n```\n\n然后你就会发现他会每隔 2 秒执行一次\n节流我的思路就是每次输入的时候获取当前的毫秒数，如果当前毫秒数减去上一次的毫秒数>=2000 了，这时候开始进行定时器的逻辑，定时器结束后把结束的时间换成当前的 time\n函数节流应用的实际场景，多数在监听页面元素滚动事件的时候会用到。因为滚动事件，是一个高频触发的事件\n\n### 总结\n\n- 函数防抖和函数节流都是防止某一时间频繁触发，但是这两兄弟之间的原理却不一样\n- 函数防抖是某一段时间内只执行一次，而函数节流是间隔时间执行\n","source":"_posts/js防抖.md","raw":"---\ntitle: 关于js防抖和节流\ndate: 2018-12-28 16:49:47\ntags: JS\n---\n\n### JS 防抖\n\n&emsp;&emsp;最近在做公司商城项目时候，有个需求就是购物车里边，数量 input 框需要根据你当前输入的值，每次输入都要发送更新请求，然后后端进行计算，前端重新渲染页面，那么问题来，我每次输入一个数字都会发送一个请求到后端，这样就非常的浪费资源，页面加载也会变慢，于是我查看了下淘宝的购物车页面，发现他们是输入框输入数字停顿大概零点几秒后再开始发送请求，而不是像我这样每次输入都发送，然后我就找到了 js 防抖\n\n原文网址：https://juejin.im/post/5b8de829f265da43623c4261?utm_source=gold_browser_extension\n我把原文缩减了下写了个小 demo\n直接上代码\n\n```\nhtml：\n  <input id='debounce' />\nJS:\nvar timer = false;\nfunction debounce(delay) {\n      clearTimeout(timer)  // 清除未执行的代码，重置回初始化状态\n      timer = setTimeout(function () {\n            console.log('函数鸡柳')\n      }, delay)\n}\nlet inputb = document.getElementById('debounce')\ninputb.addEventListener('keyup', function (e) {\n   debounce(500)\n})\n```\n\n函数防抖的要点，需要一个 setTimeout 来辅助实现,延迟执行需要跑的代码\n如果方法多次触发，则把上次记录的延迟执行代码用 clearTimeout 清掉，重新开始\n多用于用户名邮箱等等认证，或购物车数量\n\n### JS 节流\n\n规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效\n\n```\n<input type=\"text\" id=\"d1\">\n\nvar time = 0\ndocument.getElementById(\"d1\").onkeyup=function(){\n    set()\n}\nfunction set(){\n    var date = new Date().getTime()\n    if(date-time>=2000){\n        timer = setTimeout(e=>{\n            console.log(\"红烧\")\n            time = date\n        },2000)\n    }\n}\n```\n\n然后你就会发现他会每隔 2 秒执行一次\n节流我的思路就是每次输入的时候获取当前的毫秒数，如果当前毫秒数减去上一次的毫秒数>=2000 了，这时候开始进行定时器的逻辑，定时器结束后把结束的时间换成当前的 time\n函数节流应用的实际场景，多数在监听页面元素滚动事件的时候会用到。因为滚动事件，是一个高频触发的事件\n\n### 总结\n\n- 函数防抖和函数节流都是防止某一时间频繁触发，但是这两兄弟之间的原理却不一样\n- 函数防抖是某一段时间内只执行一次，而函数节流是间隔时间执行\n","slug":"js防抖","published":1,"updated":"2020-06-26T03:18:29.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbvns735000migujdr91a1u6","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"JS-防抖\"><a href=\"#JS-防抖\" class=\"headerlink\" title=\"JS 防抖\"></a>JS 防抖</h3><p>&emsp;&emsp;最近在做公司商城项目时候，有个需求就是购物车里边，数量 input 框需要根据你当前输入的值，每次输入都要发送更新请求，然后后端进行计算，前端重新渲染页面，那么问题来，我每次输入一个数字都会发送一个请求到后端，这样就非常的浪费资源，页面加载也会变慢，于是我查看了下淘宝的购物车页面，发现他们是输入框输入数字停顿大概零点几秒后再开始发送请求，而不是像我这样每次输入都发送，然后我就找到了 js 防抖</p>\n<p>原文网址：<a href=\"https://juejin.im/post/5b8de829f265da43623c4261?utm_source=gold_browser_extension\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5b8de829f265da43623c4261?utm_source=gold_browser_extension</a><br>我把原文缩减了下写了个小 demo<br>直接上代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html：</span><br><span class=\"line\">  &lt;input id=&apos;debounce&apos; /&gt;</span><br><span class=\"line\">JS:</span><br><span class=\"line\">var timer = false;</span><br><span class=\"line\">function debounce(delay) &#123;</span><br><span class=\"line\">      clearTimeout(timer)  // 清除未执行的代码，重置回初始化状态</span><br><span class=\"line\">      timer = setTimeout(function () &#123;</span><br><span class=\"line\">            console.log(&apos;函数鸡柳&apos;)</span><br><span class=\"line\">      &#125;, delay)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let inputb = document.getElementById(&apos;debounce&apos;)</span><br><span class=\"line\">inputb.addEventListener(&apos;keyup&apos;, function (e) &#123;</span><br><span class=\"line\">   debounce(500)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>函数防抖的要点，需要一个 setTimeout 来辅助实现,延迟执行需要跑的代码<br>如果方法多次触发，则把上次记录的延迟执行代码用 clearTimeout 清掉，重新开始<br>多用于用户名邮箱等等认证，或购物车数量</p>\n<h3 id=\"JS-节流\"><a href=\"#JS-节流\" class=\"headerlink\" title=\"JS 节流\"></a>JS 节流</h3><p>规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;text&quot; id=&quot;d1&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">var time = 0</span><br><span class=\"line\">document.getElementById(&quot;d1&quot;).onkeyup=function()&#123;</span><br><span class=\"line\">    set()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function set()&#123;</span><br><span class=\"line\">    var date = new Date().getTime()</span><br><span class=\"line\">    if(date-time&gt;=2000)&#123;</span><br><span class=\"line\">        timer = setTimeout(e=&gt;&#123;</span><br><span class=\"line\">            console.log(&quot;红烧&quot;)</span><br><span class=\"line\">            time = date</span><br><span class=\"line\">        &#125;,2000)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后你就会发现他会每隔 2 秒执行一次<br>节流我的思路就是每次输入的时候获取当前的毫秒数，如果当前毫秒数减去上一次的毫秒数&gt;=2000 了，这时候开始进行定时器的逻辑，定时器结束后把结束的时间换成当前的 time<br>函数节流应用的实际场景，多数在监听页面元素滚动事件的时候会用到。因为滚动事件，是一个高频触发的事件</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>函数防抖和函数节流都是防止某一时间频繁触发，但是这两兄弟之间的原理却不一样</li>\n<li>函数防抖是某一段时间内只执行一次，而函数节流是间隔时间执行</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"JS-防抖\"><a href=\"#JS-防抖\" class=\"headerlink\" title=\"JS 防抖\"></a>JS 防抖</h3><p>&emsp;&emsp;最近在做公司商城项目时候，有个需求就是购物车里边，数量 input 框需要根据你当前输入的值，每次输入都要发送更新请求，然后后端进行计算，前端重新渲染页面，那么问题来，我每次输入一个数字都会发送一个请求到后端，这样就非常的浪费资源，页面加载也会变慢，于是我查看了下淘宝的购物车页面，发现他们是输入框输入数字停顿大概零点几秒后再开始发送请求，而不是像我这样每次输入都发送，然后我就找到了 js 防抖</p>\n<p>原文网址：<a href=\"https://juejin.im/post/5b8de829f265da43623c4261?utm_source=gold_browser_extension\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5b8de829f265da43623c4261?utm_source=gold_browser_extension</a><br>我把原文缩减了下写了个小 demo<br>直接上代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html：</span><br><span class=\"line\">  &lt;input id=&apos;debounce&apos; /&gt;</span><br><span class=\"line\">JS:</span><br><span class=\"line\">var timer = false;</span><br><span class=\"line\">function debounce(delay) &#123;</span><br><span class=\"line\">      clearTimeout(timer)  // 清除未执行的代码，重置回初始化状态</span><br><span class=\"line\">      timer = setTimeout(function () &#123;</span><br><span class=\"line\">            console.log(&apos;函数鸡柳&apos;)</span><br><span class=\"line\">      &#125;, delay)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let inputb = document.getElementById(&apos;debounce&apos;)</span><br><span class=\"line\">inputb.addEventListener(&apos;keyup&apos;, function (e) &#123;</span><br><span class=\"line\">   debounce(500)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>函数防抖的要点，需要一个 setTimeout 来辅助实现,延迟执行需要跑的代码<br>如果方法多次触发，则把上次记录的延迟执行代码用 clearTimeout 清掉，重新开始<br>多用于用户名邮箱等等认证，或购物车数量</p>\n<h3 id=\"JS-节流\"><a href=\"#JS-节流\" class=\"headerlink\" title=\"JS 节流\"></a>JS 节流</h3><p>规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;text&quot; id=&quot;d1&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">var time = 0</span><br><span class=\"line\">document.getElementById(&quot;d1&quot;).onkeyup=function()&#123;</span><br><span class=\"line\">    set()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function set()&#123;</span><br><span class=\"line\">    var date = new Date().getTime()</span><br><span class=\"line\">    if(date-time&gt;=2000)&#123;</span><br><span class=\"line\">        timer = setTimeout(e=&gt;&#123;</span><br><span class=\"line\">            console.log(&quot;红烧&quot;)</span><br><span class=\"line\">            time = date</span><br><span class=\"line\">        &#125;,2000)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后你就会发现他会每隔 2 秒执行一次<br>节流我的思路就是每次输入的时候获取当前的毫秒数，如果当前毫秒数减去上一次的毫秒数&gt;=2000 了，这时候开始进行定时器的逻辑，定时器结束后把结束的时间换成当前的 time<br>函数节流应用的实际场景，多数在监听页面元素滚动事件的时候会用到。因为滚动事件，是一个高频触发的事件</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>函数防抖和函数节流都是防止某一时间频繁触发，但是这两兄弟之间的原理却不一样</li>\n<li>函数防抖是某一段时间内只执行一次，而函数节流是间隔时间执行</li>\n</ul>\n"},{"title":"2019年我绝对不会再买的东西","date":"2019-01-20T08:28:44.000Z","_content":"\n![shop](shop/shop.png)\n### &emsp;&emsp;我的工资都浪费在哪些地方？\n\n#### top1 鞋子\n\n据统计今年我总共买了四双鞋子，总共花费约800元左右，无法想象，记得以前我买了两双特步换着穿两三年才有闲钱换了新的，现在真有点膨胀，这四双鞋中，买完就后悔的有两双，首先是阿迪的这双![shop](shop/a.png)不懂为什么阿迪的41号跟别家的41号不同，我穿着有一点显大而且很容易拖鞋垫，就是你大街上走着走着鞋垫就从后脚跟拖出来了...反正我现在穿它基本就不垫鞋垫了，透气性很适合春夏秋穿至于弹性还行吧跟想象的不一样，接下来是特步家的![shop](shop/t.png),\n这双鞋弹性一般透气可以质量差评，刚穿了一个月撑起鞋舌的那个穿孔就掉了- -...剩下两个还是特步家的，一个运动鞋一个老爹鞋，目前没有任何问题，穿着舒适\n\n#### top2 烤箱和面包机\n\n也不是不能不买，而是买了之后感觉有点用处但是有点鸡肋，18年刚工作的时候想给家里添件电器，家里其他也不缺而我当时被烘焙洗脑了就花了几百块买了个烤箱给我妈，买烤箱的目的就只有一个做面包！![shop](shop/kao.png)但由于技术实在太菜每次都做成馒头硬的不像话，不过实话实说烤箱的质量很不错，但但是！我妈不会烘焙我也是屁股塞黄豆一窍不通，所以主要的功能就是我回家后做鸡胸肉了其余时间都在闲置着，过了一段时间不甘心的我在年中的时候买了一台面包机，这下好了傻瓜式操作，面粉和水的比例说明书都有，总算是满足了我做面包的念想![shop](shop/mian.png),做了几次后就乏味了，成本太高味道不理想也弃了偶尔健身拿来做早餐吃也是美滋滋\n\n#### top3 质量差的生活用品\n\n没什么好解释的贪便宜买的\n![shop](shop/yi1.png)\n![shop](shop/yi2.png)\n![shop](shop/yi3.png)\n价格看起来还行，其实我是蹭了商家的活动，买一赠一，收到衣服后会返回支付款的一半，这些衣服买来之后或多或少都会出现些问题，起毛了等等等等，相比起我在优衣库买的衣服简直就是个屁\n\n#### top4 伪文艺小清新生活用品\n\n![shop](shop/lan.png)记得在淘宝上第一眼看见就喜欢的不得了，买来之后也装了几天衣服后来因为被褥枕头太多就当成集装箱用了.....还有一些瓶子笔盒什么的我都不知道自己当时脑子怎么想的，我还在屋子里用塑料杯种了一些草....\n\n#### top5 健身之类的..\n\n![shop](shop/bei.png)\n觉得好酷炫就买了，结果还不如我原先是用过的杯子...\n\n#### top6 电锅\n\n![shop](shop/guo.png)\n从此我知道了宁愿买电磁炉加铁锅也不能买电锅，再买吃一吨屎！\n\n#### top7 住宿\n\n以后再租房的话不会再租这么贵了，一年光房租花了我1W7.8","source":"_posts/shop.md","raw":"---\ntitle: 2019年我绝对不会再买的东西\ndate: 2019-01-20 16:28:44\ntags: Life\n---\n\n![shop](shop/shop.png)\n### &emsp;&emsp;我的工资都浪费在哪些地方？\n\n#### top1 鞋子\n\n据统计今年我总共买了四双鞋子，总共花费约800元左右，无法想象，记得以前我买了两双特步换着穿两三年才有闲钱换了新的，现在真有点膨胀，这四双鞋中，买完就后悔的有两双，首先是阿迪的这双![shop](shop/a.png)不懂为什么阿迪的41号跟别家的41号不同，我穿着有一点显大而且很容易拖鞋垫，就是你大街上走着走着鞋垫就从后脚跟拖出来了...反正我现在穿它基本就不垫鞋垫了，透气性很适合春夏秋穿至于弹性还行吧跟想象的不一样，接下来是特步家的![shop](shop/t.png),\n这双鞋弹性一般透气可以质量差评，刚穿了一个月撑起鞋舌的那个穿孔就掉了- -...剩下两个还是特步家的，一个运动鞋一个老爹鞋，目前没有任何问题，穿着舒适\n\n#### top2 烤箱和面包机\n\n也不是不能不买，而是买了之后感觉有点用处但是有点鸡肋，18年刚工作的时候想给家里添件电器，家里其他也不缺而我当时被烘焙洗脑了就花了几百块买了个烤箱给我妈，买烤箱的目的就只有一个做面包！![shop](shop/kao.png)但由于技术实在太菜每次都做成馒头硬的不像话，不过实话实说烤箱的质量很不错，但但是！我妈不会烘焙我也是屁股塞黄豆一窍不通，所以主要的功能就是我回家后做鸡胸肉了其余时间都在闲置着，过了一段时间不甘心的我在年中的时候买了一台面包机，这下好了傻瓜式操作，面粉和水的比例说明书都有，总算是满足了我做面包的念想![shop](shop/mian.png),做了几次后就乏味了，成本太高味道不理想也弃了偶尔健身拿来做早餐吃也是美滋滋\n\n#### top3 质量差的生活用品\n\n没什么好解释的贪便宜买的\n![shop](shop/yi1.png)\n![shop](shop/yi2.png)\n![shop](shop/yi3.png)\n价格看起来还行，其实我是蹭了商家的活动，买一赠一，收到衣服后会返回支付款的一半，这些衣服买来之后或多或少都会出现些问题，起毛了等等等等，相比起我在优衣库买的衣服简直就是个屁\n\n#### top4 伪文艺小清新生活用品\n\n![shop](shop/lan.png)记得在淘宝上第一眼看见就喜欢的不得了，买来之后也装了几天衣服后来因为被褥枕头太多就当成集装箱用了.....还有一些瓶子笔盒什么的我都不知道自己当时脑子怎么想的，我还在屋子里用塑料杯种了一些草....\n\n#### top5 健身之类的..\n\n![shop](shop/bei.png)\n觉得好酷炫就买了，结果还不如我原先是用过的杯子...\n\n#### top6 电锅\n\n![shop](shop/guo.png)\n从此我知道了宁愿买电磁炉加铁锅也不能买电锅，再买吃一吨屎！\n\n#### top7 住宿\n\n以后再租房的话不会再租这么贵了，一年光房租花了我1W7.8","slug":"shop","published":1,"updated":"2020-06-26T03:18:29.660Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbvns736000oigujwnzemnkf","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p><img src=\"/2019/01/20/shop/shop.png\" alt=\"shop\"></p>\n<h3 id=\"emsp-emsp-我的工资都浪费在哪些地方？\"><a href=\"#emsp-emsp-我的工资都浪费在哪些地方？\" class=\"headerlink\" title=\"&emsp;&emsp;我的工资都浪费在哪些地方？\"></a>&emsp;&emsp;我的工资都浪费在哪些地方？</h3><h4 id=\"top1-鞋子\"><a href=\"#top1-鞋子\" class=\"headerlink\" title=\"top1 鞋子\"></a>top1 鞋子</h4><p>据统计今年我总共买了四双鞋子，总共花费约800元左右，无法想象，记得以前我买了两双特步换着穿两三年才有闲钱换了新的，现在真有点膨胀，这四双鞋中，买完就后悔的有两双，首先是阿迪的这双<img src=\"/2019/01/20/shop/a.png\" alt=\"shop\">不懂为什么阿迪的41号跟别家的41号不同，我穿着有一点显大而且很容易拖鞋垫，就是你大街上走着走着鞋垫就从后脚跟拖出来了…反正我现在穿它基本就不垫鞋垫了，透气性很适合春夏秋穿至于弹性还行吧跟想象的不一样，接下来是特步家的<img src=\"/2019/01/20/shop/t.png\" alt=\"shop\">,<br>这双鞋弹性一般透气可以质量差评，刚穿了一个月撑起鞋舌的那个穿孔就掉了- -…剩下两个还是特步家的，一个运动鞋一个老爹鞋，目前没有任何问题，穿着舒适</p>\n<h4 id=\"top2-烤箱和面包机\"><a href=\"#top2-烤箱和面包机\" class=\"headerlink\" title=\"top2 烤箱和面包机\"></a>top2 烤箱和面包机</h4><p>也不是不能不买，而是买了之后感觉有点用处但是有点鸡肋，18年刚工作的时候想给家里添件电器，家里其他也不缺而我当时被烘焙洗脑了就花了几百块买了个烤箱给我妈，买烤箱的目的就只有一个做面包！<img src=\"/2019/01/20/shop/kao.png\" alt=\"shop\">但由于技术实在太菜每次都做成馒头硬的不像话，不过实话实说烤箱的质量很不错，但但是！我妈不会烘焙我也是屁股塞黄豆一窍不通，所以主要的功能就是我回家后做鸡胸肉了其余时间都在闲置着，过了一段时间不甘心的我在年中的时候买了一台面包机，这下好了傻瓜式操作，面粉和水的比例说明书都有，总算是满足了我做面包的念想<img src=\"/2019/01/20/shop/mian.png\" alt=\"shop\">,做了几次后就乏味了，成本太高味道不理想也弃了偶尔健身拿来做早餐吃也是美滋滋</p>\n<h4 id=\"top3-质量差的生活用品\"><a href=\"#top3-质量差的生活用品\" class=\"headerlink\" title=\"top3 质量差的生活用品\"></a>top3 质量差的生活用品</h4><p>没什么好解释的贪便宜买的<br><img src=\"/2019/01/20/shop/yi1.png\" alt=\"shop\"><br><img src=\"/2019/01/20/shop/yi2.png\" alt=\"shop\"><br><img src=\"/2019/01/20/shop/yi3.png\" alt=\"shop\"><br>价格看起来还行，其实我是蹭了商家的活动，买一赠一，收到衣服后会返回支付款的一半，这些衣服买来之后或多或少都会出现些问题，起毛了等等等等，相比起我在优衣库买的衣服简直就是个屁</p>\n<h4 id=\"top4-伪文艺小清新生活用品\"><a href=\"#top4-伪文艺小清新生活用品\" class=\"headerlink\" title=\"top4 伪文艺小清新生活用品\"></a>top4 伪文艺小清新生活用品</h4><p><img src=\"/2019/01/20/shop/lan.png\" alt=\"shop\">记得在淘宝上第一眼看见就喜欢的不得了，买来之后也装了几天衣服后来因为被褥枕头太多就当成集装箱用了…..还有一些瓶子笔盒什么的我都不知道自己当时脑子怎么想的，我还在屋子里用塑料杯种了一些草….</p>\n<h4 id=\"top5-健身之类的\"><a href=\"#top5-健身之类的\" class=\"headerlink\" title=\"top5 健身之类的..\"></a>top5 健身之类的..</h4><p><img src=\"/2019/01/20/shop/bei.png\" alt=\"shop\"><br>觉得好酷炫就买了，结果还不如我原先是用过的杯子…</p>\n<h4 id=\"top6-电锅\"><a href=\"#top6-电锅\" class=\"headerlink\" title=\"top6 电锅\"></a>top6 电锅</h4><p><img src=\"/2019/01/20/shop/guo.png\" alt=\"shop\"><br>从此我知道了宁愿买电磁炉加铁锅也不能买电锅，再买吃一吨屎！</p>\n<h4 id=\"top7-住宿\"><a href=\"#top7-住宿\" class=\"headerlink\" title=\"top7 住宿\"></a>top7 住宿</h4><p>以后再租房的话不会再租这么贵了，一年光房租花了我1W7.8</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/2019/01/20/shop/shop.png\" alt=\"shop\"></p>\n<h3 id=\"emsp-emsp-我的工资都浪费在哪些地方？\"><a href=\"#emsp-emsp-我的工资都浪费在哪些地方？\" class=\"headerlink\" title=\"&emsp;&emsp;我的工资都浪费在哪些地方？\"></a>&emsp;&emsp;我的工资都浪费在哪些地方？</h3><h4 id=\"top1-鞋子\"><a href=\"#top1-鞋子\" class=\"headerlink\" title=\"top1 鞋子\"></a>top1 鞋子</h4><p>据统计今年我总共买了四双鞋子，总共花费约800元左右，无法想象，记得以前我买了两双特步换着穿两三年才有闲钱换了新的，现在真有点膨胀，这四双鞋中，买完就后悔的有两双，首先是阿迪的这双<img src=\"/2019/01/20/shop/a.png\" alt=\"shop\">不懂为什么阿迪的41号跟别家的41号不同，我穿着有一点显大而且很容易拖鞋垫，就是你大街上走着走着鞋垫就从后脚跟拖出来了…反正我现在穿它基本就不垫鞋垫了，透气性很适合春夏秋穿至于弹性还行吧跟想象的不一样，接下来是特步家的<img src=\"/2019/01/20/shop/t.png\" alt=\"shop\">,<br>这双鞋弹性一般透气可以质量差评，刚穿了一个月撑起鞋舌的那个穿孔就掉了- -…剩下两个还是特步家的，一个运动鞋一个老爹鞋，目前没有任何问题，穿着舒适</p>\n<h4 id=\"top2-烤箱和面包机\"><a href=\"#top2-烤箱和面包机\" class=\"headerlink\" title=\"top2 烤箱和面包机\"></a>top2 烤箱和面包机</h4><p>也不是不能不买，而是买了之后感觉有点用处但是有点鸡肋，18年刚工作的时候想给家里添件电器，家里其他也不缺而我当时被烘焙洗脑了就花了几百块买了个烤箱给我妈，买烤箱的目的就只有一个做面包！<img src=\"/2019/01/20/shop/kao.png\" alt=\"shop\">但由于技术实在太菜每次都做成馒头硬的不像话，不过实话实说烤箱的质量很不错，但但是！我妈不会烘焙我也是屁股塞黄豆一窍不通，所以主要的功能就是我回家后做鸡胸肉了其余时间都在闲置着，过了一段时间不甘心的我在年中的时候买了一台面包机，这下好了傻瓜式操作，面粉和水的比例说明书都有，总算是满足了我做面包的念想<img src=\"/2019/01/20/shop/mian.png\" alt=\"shop\">,做了几次后就乏味了，成本太高味道不理想也弃了偶尔健身拿来做早餐吃也是美滋滋</p>\n<h4 id=\"top3-质量差的生活用品\"><a href=\"#top3-质量差的生活用品\" class=\"headerlink\" title=\"top3 质量差的生活用品\"></a>top3 质量差的生活用品</h4><p>没什么好解释的贪便宜买的<br><img src=\"/2019/01/20/shop/yi1.png\" alt=\"shop\"><br><img src=\"/2019/01/20/shop/yi2.png\" alt=\"shop\"><br><img src=\"/2019/01/20/shop/yi3.png\" alt=\"shop\"><br>价格看起来还行，其实我是蹭了商家的活动，买一赠一，收到衣服后会返回支付款的一半，这些衣服买来之后或多或少都会出现些问题，起毛了等等等等，相比起我在优衣库买的衣服简直就是个屁</p>\n<h4 id=\"top4-伪文艺小清新生活用品\"><a href=\"#top4-伪文艺小清新生活用品\" class=\"headerlink\" title=\"top4 伪文艺小清新生活用品\"></a>top4 伪文艺小清新生活用品</h4><p><img src=\"/2019/01/20/shop/lan.png\" alt=\"shop\">记得在淘宝上第一眼看见就喜欢的不得了，买来之后也装了几天衣服后来因为被褥枕头太多就当成集装箱用了…..还有一些瓶子笔盒什么的我都不知道自己当时脑子怎么想的，我还在屋子里用塑料杯种了一些草….</p>\n<h4 id=\"top5-健身之类的\"><a href=\"#top5-健身之类的\" class=\"headerlink\" title=\"top5 健身之类的..\"></a>top5 健身之类的..</h4><p><img src=\"/2019/01/20/shop/bei.png\" alt=\"shop\"><br>觉得好酷炫就买了，结果还不如我原先是用过的杯子…</p>\n<h4 id=\"top6-电锅\"><a href=\"#top6-电锅\" class=\"headerlink\" title=\"top6 电锅\"></a>top6 电锅</h4><p><img src=\"/2019/01/20/shop/guo.png\" alt=\"shop\"><br>从此我知道了宁愿买电磁炉加铁锅也不能买电锅，再买吃一吨屎！</p>\n<h4 id=\"top7-住宿\"><a href=\"#top7-住宿\" class=\"headerlink\" title=\"top7 住宿\"></a>top7 住宿</h4><p>以后再租房的话不会再租这么贵了，一年光房租花了我1W7.8</p>\n"},{"title":"关于bind，apply，call以及箭头函数的区别","date":"2018-12-27T03:46:58.000Z","_content":"\n### call,apply\n\n不比比，直接上代码\n\n```\nfunction add(c, d) {\n  return this.a + this.b + c + d;\n}\n\nvar o = {a: 1, b: 3};\n\n// 第一个参数是作为‘this’使用的对象\n// 后续参数作为参数传递给函数调用\nadd.call(o, 5, 7); // 1 + 3 + 5 + 7 = 16\n\n// 第一个参数也是作为‘this’使用的对象\n// 第二个参数是一个数组，数组里的元素用作函数调用中的参数\nadd.apply(o, [10, 20]); // 1 + 3 + 10 + 20 = 34\n```\n\n在使用 call 和 apply 时候，如果传递给 this 的值不是一个对象，JavaScript 会尝试使用内部 ToObject 操作将其转换为对象。因此，如果传递的值是一个原始值比如 7 或 'foo'，那么就会使用相关构造函数将它转换为对象，所以原始值 7 会被转换为对象，像 new Number(7) 这样，而字符串 'foo' 转化成 new String('foo') 这样\n如果你传的 context 就 null 或者 undefined，那么 window 对象就是默认的 context（严格模式下默认 context 是 undefined）\n\n### bind\n\nbind 是 es5 新加的，当你调用 bind 的时候，跟 call 和 apply 不同，他返回的是一个新函数，新函数 this 将永久地被绑定到了 bind 的第一个参数，无论这个函数是如何被调用的。\n\n```\nfunction f(){\n  return this.a;\n}\n\nvar g = f.bind({a:\"azerty\"});\nconsole.log(g()); // azerty\n\nvar h = g.bind({a:'yoo'}); // bind只生效一次！\nconsole.log(h()); // azerty\n\nvar o = {a:37, f:f, g:g, h:h};\nconsole.log(o.f(), o.g(), o.h()); // 37, azerty, azerty\n```\n\n### 箭头函数\n\n在箭头函数中，this 与封闭词法上下文的 this 保持一致。在全局代码中，它将被设置为全局对象\n\n```\nvar globalObject = this;\nvar foo = (() => this);\nconsole.log(foo() === globalObject); // true\n\n//如果将this传递给call、bind、或者apply，它将被忽略。\n\n// 接着上面的代码\n// 作为对象的一个方法调用\nvar obj = {foo: foo};\nconsole.log(obj.foo() === globalObject); // true\n\n// 尝试使用call来设定this\nconsole.log(foo.call(obj) === globalObject); // true\n\n// 尝试使用bind来设定this\nfoo = foo.bind(obj);\nconsole.log(foo() === globalObject); // true\n```\n\n最后一点，当函数作为对象里的方法被调用时，它们的 this 是调用该函数的对象。\n\n```\nvar o = {\n  prop: 37,\n  f: function() {\n    return this.prop;\n  }\n};\n\nconsole.log(o.f()); // logs 37\n```\n","source":"_posts/this.md","raw":"---\ntitle: 关于bind，apply，call以及箭头函数的区别\ndate: 2018-12-27 11:46:58\ntags: JS\n---\n\n### call,apply\n\n不比比，直接上代码\n\n```\nfunction add(c, d) {\n  return this.a + this.b + c + d;\n}\n\nvar o = {a: 1, b: 3};\n\n// 第一个参数是作为‘this’使用的对象\n// 后续参数作为参数传递给函数调用\nadd.call(o, 5, 7); // 1 + 3 + 5 + 7 = 16\n\n// 第一个参数也是作为‘this’使用的对象\n// 第二个参数是一个数组，数组里的元素用作函数调用中的参数\nadd.apply(o, [10, 20]); // 1 + 3 + 10 + 20 = 34\n```\n\n在使用 call 和 apply 时候，如果传递给 this 的值不是一个对象，JavaScript 会尝试使用内部 ToObject 操作将其转换为对象。因此，如果传递的值是一个原始值比如 7 或 'foo'，那么就会使用相关构造函数将它转换为对象，所以原始值 7 会被转换为对象，像 new Number(7) 这样，而字符串 'foo' 转化成 new String('foo') 这样\n如果你传的 context 就 null 或者 undefined，那么 window 对象就是默认的 context（严格模式下默认 context 是 undefined）\n\n### bind\n\nbind 是 es5 新加的，当你调用 bind 的时候，跟 call 和 apply 不同，他返回的是一个新函数，新函数 this 将永久地被绑定到了 bind 的第一个参数，无论这个函数是如何被调用的。\n\n```\nfunction f(){\n  return this.a;\n}\n\nvar g = f.bind({a:\"azerty\"});\nconsole.log(g()); // azerty\n\nvar h = g.bind({a:'yoo'}); // bind只生效一次！\nconsole.log(h()); // azerty\n\nvar o = {a:37, f:f, g:g, h:h};\nconsole.log(o.f(), o.g(), o.h()); // 37, azerty, azerty\n```\n\n### 箭头函数\n\n在箭头函数中，this 与封闭词法上下文的 this 保持一致。在全局代码中，它将被设置为全局对象\n\n```\nvar globalObject = this;\nvar foo = (() => this);\nconsole.log(foo() === globalObject); // true\n\n//如果将this传递给call、bind、或者apply，它将被忽略。\n\n// 接着上面的代码\n// 作为对象的一个方法调用\nvar obj = {foo: foo};\nconsole.log(obj.foo() === globalObject); // true\n\n// 尝试使用call来设定this\nconsole.log(foo.call(obj) === globalObject); // true\n\n// 尝试使用bind来设定this\nfoo = foo.bind(obj);\nconsole.log(foo() === globalObject); // true\n```\n\n最后一点，当函数作为对象里的方法被调用时，它们的 this 是调用该函数的对象。\n\n```\nvar o = {\n  prop: 37,\n  f: function() {\n    return this.prop;\n  }\n};\n\nconsole.log(o.f()); // logs 37\n```\n","slug":"this","published":1,"updated":"2020-06-26T03:18:29.666Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbvns738000rigujeb8o8elp","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"call-apply\"><a href=\"#call-apply\" class=\"headerlink\" title=\"call,apply\"></a>call,apply</h3><p>不比比，直接上代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add(c, d) &#123;</span><br><span class=\"line\">  return this.a + this.b + c + d;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var o = &#123;a: 1, b: 3&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 第一个参数是作为‘this’使用的对象</span><br><span class=\"line\">// 后续参数作为参数传递给函数调用</span><br><span class=\"line\">add.call(o, 5, 7); // 1 + 3 + 5 + 7 = 16</span><br><span class=\"line\"></span><br><span class=\"line\">// 第一个参数也是作为‘this’使用的对象</span><br><span class=\"line\">// 第二个参数是一个数组，数组里的元素用作函数调用中的参数</span><br><span class=\"line\">add.apply(o, [10, 20]); // 1 + 3 + 10 + 20 = 34</span><br></pre></td></tr></table></figure>\n<p>在使用 call 和 apply 时候，如果传递给 this 的值不是一个对象，JavaScript 会尝试使用内部 ToObject 操作将其转换为对象。因此，如果传递的值是一个原始值比如 7 或 ‘foo’，那么就会使用相关构造函数将它转换为对象，所以原始值 7 会被转换为对象，像 new Number(7) 这样，而字符串 ‘foo’ 转化成 new String(‘foo’) 这样<br>如果你传的 context 就 null 或者 undefined，那么 window 对象就是默认的 context（严格模式下默认 context 是 undefined）</p>\n<h3 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h3><p>bind 是 es5 新加的，当你调用 bind 的时候，跟 call 和 apply 不同，他返回的是一个新函数，新函数 this 将永久地被绑定到了 bind 的第一个参数，无论这个函数是如何被调用的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f()&#123;</span><br><span class=\"line\">  return this.a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var g = f.bind(&#123;a:&quot;azerty&quot;&#125;);</span><br><span class=\"line\">console.log(g()); // azerty</span><br><span class=\"line\"></span><br><span class=\"line\">var h = g.bind(&#123;a:&apos;yoo&apos;&#125;); // bind只生效一次！</span><br><span class=\"line\">console.log(h()); // azerty</span><br><span class=\"line\"></span><br><span class=\"line\">var o = &#123;a:37, f:f, g:g, h:h&#125;;</span><br><span class=\"line\">console.log(o.f(), o.g(), o.h()); // 37, azerty, azerty</span><br></pre></td></tr></table></figure>\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><p>在箭头函数中，this 与封闭词法上下文的 this 保持一致。在全局代码中，它将被设置为全局对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var globalObject = this;</span><br><span class=\"line\">var foo = (() =&gt; this);</span><br><span class=\"line\">console.log(foo() === globalObject); // true</span><br><span class=\"line\"></span><br><span class=\"line\">//如果将this传递给call、bind、或者apply，它将被忽略。</span><br><span class=\"line\"></span><br><span class=\"line\">// 接着上面的代码</span><br><span class=\"line\">// 作为对象的一个方法调用</span><br><span class=\"line\">var obj = &#123;foo: foo&#125;;</span><br><span class=\"line\">console.log(obj.foo() === globalObject); // true</span><br><span class=\"line\"></span><br><span class=\"line\">// 尝试使用call来设定this</span><br><span class=\"line\">console.log(foo.call(obj) === globalObject); // true</span><br><span class=\"line\"></span><br><span class=\"line\">// 尝试使用bind来设定this</span><br><span class=\"line\">foo = foo.bind(obj);</span><br><span class=\"line\">console.log(foo() === globalObject); // true</span><br></pre></td></tr></table></figure>\n<p>最后一点，当函数作为对象里的方法被调用时，它们的 this 是调用该函数的对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var o = &#123;</span><br><span class=\"line\">  prop: 37,</span><br><span class=\"line\">  f: function() &#123;</span><br><span class=\"line\">    return this.prop;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(o.f()); // logs 37</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"call-apply\"><a href=\"#call-apply\" class=\"headerlink\" title=\"call,apply\"></a>call,apply</h3><p>不比比，直接上代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add(c, d) &#123;</span><br><span class=\"line\">  return this.a + this.b + c + d;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var o = &#123;a: 1, b: 3&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 第一个参数是作为‘this’使用的对象</span><br><span class=\"line\">// 后续参数作为参数传递给函数调用</span><br><span class=\"line\">add.call(o, 5, 7); // 1 + 3 + 5 + 7 = 16</span><br><span class=\"line\"></span><br><span class=\"line\">// 第一个参数也是作为‘this’使用的对象</span><br><span class=\"line\">// 第二个参数是一个数组，数组里的元素用作函数调用中的参数</span><br><span class=\"line\">add.apply(o, [10, 20]); // 1 + 3 + 10 + 20 = 34</span><br></pre></td></tr></table></figure>\n<p>在使用 call 和 apply 时候，如果传递给 this 的值不是一个对象，JavaScript 会尝试使用内部 ToObject 操作将其转换为对象。因此，如果传递的值是一个原始值比如 7 或 ‘foo’，那么就会使用相关构造函数将它转换为对象，所以原始值 7 会被转换为对象，像 new Number(7) 这样，而字符串 ‘foo’ 转化成 new String(‘foo’) 这样<br>如果你传的 context 就 null 或者 undefined，那么 window 对象就是默认的 context（严格模式下默认 context 是 undefined）</p>\n<h3 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h3><p>bind 是 es5 新加的，当你调用 bind 的时候，跟 call 和 apply 不同，他返回的是一个新函数，新函数 this 将永久地被绑定到了 bind 的第一个参数，无论这个函数是如何被调用的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f()&#123;</span><br><span class=\"line\">  return this.a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var g = f.bind(&#123;a:&quot;azerty&quot;&#125;);</span><br><span class=\"line\">console.log(g()); // azerty</span><br><span class=\"line\"></span><br><span class=\"line\">var h = g.bind(&#123;a:&apos;yoo&apos;&#125;); // bind只生效一次！</span><br><span class=\"line\">console.log(h()); // azerty</span><br><span class=\"line\"></span><br><span class=\"line\">var o = &#123;a:37, f:f, g:g, h:h&#125;;</span><br><span class=\"line\">console.log(o.f(), o.g(), o.h()); // 37, azerty, azerty</span><br></pre></td></tr></table></figure>\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><p>在箭头函数中，this 与封闭词法上下文的 this 保持一致。在全局代码中，它将被设置为全局对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var globalObject = this;</span><br><span class=\"line\">var foo = (() =&gt; this);</span><br><span class=\"line\">console.log(foo() === globalObject); // true</span><br><span class=\"line\"></span><br><span class=\"line\">//如果将this传递给call、bind、或者apply，它将被忽略。</span><br><span class=\"line\"></span><br><span class=\"line\">// 接着上面的代码</span><br><span class=\"line\">// 作为对象的一个方法调用</span><br><span class=\"line\">var obj = &#123;foo: foo&#125;;</span><br><span class=\"line\">console.log(obj.foo() === globalObject); // true</span><br><span class=\"line\"></span><br><span class=\"line\">// 尝试使用call来设定this</span><br><span class=\"line\">console.log(foo.call(obj) === globalObject); // true</span><br><span class=\"line\"></span><br><span class=\"line\">// 尝试使用bind来设定this</span><br><span class=\"line\">foo = foo.bind(obj);</span><br><span class=\"line\">console.log(foo() === globalObject); // true</span><br></pre></td></tr></table></figure>\n<p>最后一点，当函数作为对象里的方法被调用时，它们的 this 是调用该函数的对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var o = &#123;</span><br><span class=\"line\">  prop: 37,</span><br><span class=\"line\">  f: function() &#123;</span><br><span class=\"line\">    return this.prop;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(o.f()); // logs 37</span><br></pre></td></tr></table></figure>\n"},{"title":"前端学习笔记","date":"2019-12-05T06:15:15.000Z","_content":"\n# js:关于类型，有哪些你不知道的细节\n\nundefined 是一个变量，而并非是一个关键字，这是 JavaScript 语言公认的设计失误之一，所以，我们为了避免无意中被篡改，我建议使用 void 0 来获取 undefined 值。\nUndefined 跟 null 有一定的表意差别，null 表示的是：“定义了但是为空”。所以，在实际编程时，我们一般不会把变量赋值为 undefined，这样可以保证所有值为 undefined 的变量，都是从未赋值的自然状态。\n\nString 有最大长度是 2^53 - 1\n\n基于对象而不是面向对象\n","source":"_posts/study.md","raw":"---\ntitle: 前端学习笔记\ndate: 2019-12-05 14:15:15\ntags: JavaScript\n---\n\n# js:关于类型，有哪些你不知道的细节\n\nundefined 是一个变量，而并非是一个关键字，这是 JavaScript 语言公认的设计失误之一，所以，我们为了避免无意中被篡改，我建议使用 void 0 来获取 undefined 值。\nUndefined 跟 null 有一定的表意差别，null 表示的是：“定义了但是为空”。所以，在实际编程时，我们一般不会把变量赋值为 undefined，这样可以保证所有值为 undefined 的变量，都是从未赋值的自然状态。\n\nString 有最大长度是 2^53 - 1\n\n基于对象而不是面向对象\n","slug":"study","published":1,"updated":"2020-06-26T03:18:29.665Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbvns739000tigujgrzm8wcy","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"js-关于类型，有哪些你不知道的细节\"><a href=\"#js-关于类型，有哪些你不知道的细节\" class=\"headerlink\" title=\"js:关于类型，有哪些你不知道的细节\"></a>js:关于类型，有哪些你不知道的细节</h1><p>undefined 是一个变量，而并非是一个关键字，这是 JavaScript 语言公认的设计失误之一，所以，我们为了避免无意中被篡改，我建议使用 void 0 来获取 undefined 值。<br>Undefined 跟 null 有一定的表意差别，null 表示的是：“定义了但是为空”。所以，在实际编程时，我们一般不会把变量赋值为 undefined，这样可以保证所有值为 undefined 的变量，都是从未赋值的自然状态。</p>\n<p>String 有最大长度是 2^53 - 1</p>\n<p>基于对象而不是面向对象</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"js-关于类型，有哪些你不知道的细节\"><a href=\"#js-关于类型，有哪些你不知道的细节\" class=\"headerlink\" title=\"js:关于类型，有哪些你不知道的细节\"></a>js:关于类型，有哪些你不知道的细节</h1><p>undefined 是一个变量，而并非是一个关键字，这是 JavaScript 语言公认的设计失误之一，所以，我们为了避免无意中被篡改，我建议使用 void 0 来获取 undefined 值。<br>Undefined 跟 null 有一定的表意差别，null 表示的是：“定义了但是为空”。所以，在实际编程时，我们一般不会把变量赋值为 undefined，这样可以保证所有值为 undefined 的变量，都是从未赋值的自然状态。</p>\n<p>String 有最大长度是 2^53 - 1</p>\n<p>基于对象而不是面向对象</p>\n"},{"title":"正则表达式入门笔记","date":"2018-12-24T08:08:05.000Z","_content":"\n**正则一直是我弱项，闲着没事写笔记学习吧~**\n\n#### RegExp 对象\n\njs 的内置对象 RegExp 支持正则表达式\n有两种方法实例化 RegExp 对象\n\n- 字面量 var reg = /a/\n- 构造函数 var reg = new RegExp('/a/')\n\n#### 元字符\n\n正则表达式由两种基本字符类型组成\n\n- 原义文本字符，也就是我想搜索 a 那就/a/\n- 元字符，在正则表达式中有特殊含义的非字母字符比如\\b 边界，以及 \\* + ? ^ () {} []\n\n| 字符 |        含义         |\n| ---- | :-----------------: |\n| \\t   |     水平制表符      |\n| \\v   |     垂直制表符      |\n| \\n   |       换行符        |\n| \\r   |       回车符        |\n| \\o   |       空字符        |\n| \\f   |       换页符        |\n| \\cX  | 与 X 对应的控制字符 |\n\n#### 字符类\n\n有时候我们不想特指某个字符，想匹配某个范围内\n\n- 我们可以用元字符 [] 来构建一个简单的类\n- 所谓类是指符合某些特性的对象，一个泛指，而不是特指某个字符\n- 表达式[abc]就把字符 a,b,c 归为一类，表达式可以匹配这类的字符\n\n字符类取反\n\n- 使用元字符^创建反向类/负向类\n- 反向类的意思是不属于某类的内容\n- 表达式[^abc]标识不是字符 a,b,c 的内容\n\n#### 范围类\n\n我们想匹配所有数字，或者所有字母的时候，正则提供了范围类\n\n- [a-z]就表示从 a 到 z 的任意字符\n- 这是个闭区间，也包含 a 和 z 本身\n- 也可以连着写[a-zA-Z0-9],如果想匹配-这个字符就在匹配的后面加上-例如[a-z-]\n\n#### 预定义类+边界\n\n| 预定义类+边界 |               含义               |\n| ------------- | :------------------------------: |\n| .             | 除了换行符和回车符以外的所有字符 |\n| \\d            |         数字字符([0-9])          |\n| \\D            |        非数字字符([^0-9])        |\n| \\s            |              空白符              |\n| \\S            |             非空白符             |\n| \\w            |      单词字符([a-zA-Z_0-9])      |\n| \\W            |            非单词字符            |\n| ^             |           以 xxxx 开始           |\n| \\$            |           以 xxxx 结束           |\n| \\b            |             单词边界             |\n| \\B            |            非单词边界            |\n\n#### 量词\n\n当你希望匹配一个数字出现 20 次的时候，你可以这样写/\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d/......这样写是极其不友好，谁写是傻子\n\n| 字符  |               含义               |\n| ----- | :------------------------------: |\n| ?     | 出现 0 次或者 1 次(最多出现一次) |\n| +     |   出现一次或多次(最少出现一次)   |\n| \\*    |     出现 0 次或多次(任意次)      |\n| {n}   |            出现 n 次             |\n| {n,m} |          出现 n 到 m 次          |\n| {n,}  |          至少出现 n 次           |\n\n#### 贪婪模式和非贪婪模式\n\n比如表达式\\d{3,6}，可以匹配到三个数字，也可以是四个五个六个......来看例子\n\n```\n'12345678'.replace(/\\d{3,6}/g,'A')\n'A78'\n```\n\n从这可以看出正则表达式默认的是尽可能多的匹配，而不是只匹配到第三个就结束了，这就是贪婪模式\n\n**非贪婪模式**\n\n让正则表达式尽可能少的匹配，也就是说一旦成功匹配不再继续尝试，就是非贪婪模式\n做法很简单，在量词后加上?即可\n\n```\n'12345678'.replace(/\\d{3,6}?/,'X')\n\"X45678\"\n```\n\n#### 分组\n\n比如我们想匹配 abc 3 次的时候我们可以这样写\n`abc{3}`\n但是这样写就会匹配 c 的 3 次，而不是整个字母 abc 的 3 次，要想作用于整个字母就要使用()来分组\n`(abc){3}`\n\n**或**\njs 里边是 || 而正则是使用 | 可以达到或的效果\n`a|c`\n\n**反向引用**\n2015-15-25 => 25/15/2015\n`'2015-12-25'.replace(/(\\d{4})-(\\d{2})-(\\d{2})/,'$3/$2/$1')`\n如果你不希望捕获分组可以在()内加上?:\n`(?:\\d{2})`\n\n#### 前瞻和后瞻\n\n| 名称     |     正则      |\n| -------- | :-----------: |\n| 正向前瞻 | exp(?=assert) |\n| 负向前瞻 | exp(?!assert) |\n\nexp(?=assert) 的意思就是比如你要匹配 a 但是 a 后边必须要跟上数字 就是这样写/\\w(?=\\d)/，上代码看下和平常的区别\n\n```\n'a2b2'.replace(/\\w\\d/,'A')\n\"Ab2\"\n'a2b2'.replace(/\\w(?=\\d)/,'A')\n\"A2b2\"\n```\n\n#### 对象属性\n\n### 修饰符\n\n- g:global 全局搜索，不添加，搜索到第一个停止\n- i:ignore case 忽略大小写，默认大小写敏感\n- m:multiple lines 多行搜索\n- lastIndex 是当前表达式匹配内容的最后一个字符的下一个位置,该属性只有设置标志 g 才能使用。\n- source 正则表达式的文本字符串\n\n### test\n\n用于测试字符串参数中是否存在匹配正则表达式模式的字符串\n\n```\n/\\d/g.test('0')\ntrue\n```\n\n但是你多执行几次就会出现...\n\n```\nvar reg = /\\d/g\nreg1.test(0)\ntrue\nreg1.test(0)\nfalse\nreg1.test(0)\ntrue\nreg1.test(0)\nfalse\n```\n\n这是为撒呢？因为 test 是以 lastIndex 属性所指的位置作为下次检索的起始点，所以你就可以遍历一个字符串的所有文本,等它再也找不到可以匹配的文本时，它会自动把 lastIndex 属性重置为 0，所以返回了 false\n\n```\nvar reg = /\\w/g\n\nwhile(reg.test('ab')){\n  console.log(reg.lastIndex)\n}\n\n1\n2\n```\n\n### exec\n\n使用正则表达式对字符串进行搜索，如果没有匹配返回 null，匹配到返回结果数组,数组的第 0 个元素是与正则表达式相匹配的文本，第 1 个元素是正则中分组中表达式相匹配的值，一次类推，看实例\n\n```\nvar reg = /\\d(\\w)\\d/\nvar ret = reg.exec('$5a51s28e6')\nconsole.log(ret.index,reg.lastIndex,ret.toString(),ret.input)\n\n1\n0\n\"5a5,a\"\n\"$5a51s28e6\"\n```\n\n从实例中可以看出 exec()方法还返回两个属性，index 属性声明的是匹配文本的第一个字符的位置，input 属性则存放的是被检索的字符串 string。\n其中 5a5 是检索到的字符串，而 a 是分组(\\w)检索出来的属性，再换个写法试试\n\n```\nvar reg = /\\d(\\w)(\\w)\\d/\nvar ret = reg.exec('$5aw51s28e6')\nconsole.log(ret.toString())\n\n\"5aw5,a,w\"\n```\n\na 和 w 都是分组中两个属性\n\n#### 字符串的对象方法\n\n_search_\n\nsearch()方法用于检索字符串中指定的子字符串，或检索与正则表达式想匹配的子字符串，方法返回第一个匹配结果 index，查找不到返回-1，search 方法不支持全局匹配，忽略标志 g，并且从字符串的开始进行检索\n\n```\n'1w5w2w'.search('1')\n0\n'1w5w2w'.search('10')\n-1\n```\n\n_match_\n\nmatch()方法将检索字符串，找到一个或多个与正则匹配的文本，是否标志 g 对结果影响很大\n","source":"_posts/reg.md","raw":"---\ntitle: 正则表达式入门笔记\ndate: 2018-12-24 16:08:05\ntags: JS\n---\n\n**正则一直是我弱项，闲着没事写笔记学习吧~**\n\n#### RegExp 对象\n\njs 的内置对象 RegExp 支持正则表达式\n有两种方法实例化 RegExp 对象\n\n- 字面量 var reg = /a/\n- 构造函数 var reg = new RegExp('/a/')\n\n#### 元字符\n\n正则表达式由两种基本字符类型组成\n\n- 原义文本字符，也就是我想搜索 a 那就/a/\n- 元字符，在正则表达式中有特殊含义的非字母字符比如\\b 边界，以及 \\* + ? ^ () {} []\n\n| 字符 |        含义         |\n| ---- | :-----------------: |\n| \\t   |     水平制表符      |\n| \\v   |     垂直制表符      |\n| \\n   |       换行符        |\n| \\r   |       回车符        |\n| \\o   |       空字符        |\n| \\f   |       换页符        |\n| \\cX  | 与 X 对应的控制字符 |\n\n#### 字符类\n\n有时候我们不想特指某个字符，想匹配某个范围内\n\n- 我们可以用元字符 [] 来构建一个简单的类\n- 所谓类是指符合某些特性的对象，一个泛指，而不是特指某个字符\n- 表达式[abc]就把字符 a,b,c 归为一类，表达式可以匹配这类的字符\n\n字符类取反\n\n- 使用元字符^创建反向类/负向类\n- 反向类的意思是不属于某类的内容\n- 表达式[^abc]标识不是字符 a,b,c 的内容\n\n#### 范围类\n\n我们想匹配所有数字，或者所有字母的时候，正则提供了范围类\n\n- [a-z]就表示从 a 到 z 的任意字符\n- 这是个闭区间，也包含 a 和 z 本身\n- 也可以连着写[a-zA-Z0-9],如果想匹配-这个字符就在匹配的后面加上-例如[a-z-]\n\n#### 预定义类+边界\n\n| 预定义类+边界 |               含义               |\n| ------------- | :------------------------------: |\n| .             | 除了换行符和回车符以外的所有字符 |\n| \\d            |         数字字符([0-9])          |\n| \\D            |        非数字字符([^0-9])        |\n| \\s            |              空白符              |\n| \\S            |             非空白符             |\n| \\w            |      单词字符([a-zA-Z_0-9])      |\n| \\W            |            非单词字符            |\n| ^             |           以 xxxx 开始           |\n| \\$            |           以 xxxx 结束           |\n| \\b            |             单词边界             |\n| \\B            |            非单词边界            |\n\n#### 量词\n\n当你希望匹配一个数字出现 20 次的时候，你可以这样写/\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d/......这样写是极其不友好，谁写是傻子\n\n| 字符  |               含义               |\n| ----- | :------------------------------: |\n| ?     | 出现 0 次或者 1 次(最多出现一次) |\n| +     |   出现一次或多次(最少出现一次)   |\n| \\*    |     出现 0 次或多次(任意次)      |\n| {n}   |            出现 n 次             |\n| {n,m} |          出现 n 到 m 次          |\n| {n,}  |          至少出现 n 次           |\n\n#### 贪婪模式和非贪婪模式\n\n比如表达式\\d{3,6}，可以匹配到三个数字，也可以是四个五个六个......来看例子\n\n```\n'12345678'.replace(/\\d{3,6}/g,'A')\n'A78'\n```\n\n从这可以看出正则表达式默认的是尽可能多的匹配，而不是只匹配到第三个就结束了，这就是贪婪模式\n\n**非贪婪模式**\n\n让正则表达式尽可能少的匹配，也就是说一旦成功匹配不再继续尝试，就是非贪婪模式\n做法很简单，在量词后加上?即可\n\n```\n'12345678'.replace(/\\d{3,6}?/,'X')\n\"X45678\"\n```\n\n#### 分组\n\n比如我们想匹配 abc 3 次的时候我们可以这样写\n`abc{3}`\n但是这样写就会匹配 c 的 3 次，而不是整个字母 abc 的 3 次，要想作用于整个字母就要使用()来分组\n`(abc){3}`\n\n**或**\njs 里边是 || 而正则是使用 | 可以达到或的效果\n`a|c`\n\n**反向引用**\n2015-15-25 => 25/15/2015\n`'2015-12-25'.replace(/(\\d{4})-(\\d{2})-(\\d{2})/,'$3/$2/$1')`\n如果你不希望捕获分组可以在()内加上?:\n`(?:\\d{2})`\n\n#### 前瞻和后瞻\n\n| 名称     |     正则      |\n| -------- | :-----------: |\n| 正向前瞻 | exp(?=assert) |\n| 负向前瞻 | exp(?!assert) |\n\nexp(?=assert) 的意思就是比如你要匹配 a 但是 a 后边必须要跟上数字 就是这样写/\\w(?=\\d)/，上代码看下和平常的区别\n\n```\n'a2b2'.replace(/\\w\\d/,'A')\n\"Ab2\"\n'a2b2'.replace(/\\w(?=\\d)/,'A')\n\"A2b2\"\n```\n\n#### 对象属性\n\n### 修饰符\n\n- g:global 全局搜索，不添加，搜索到第一个停止\n- i:ignore case 忽略大小写，默认大小写敏感\n- m:multiple lines 多行搜索\n- lastIndex 是当前表达式匹配内容的最后一个字符的下一个位置,该属性只有设置标志 g 才能使用。\n- source 正则表达式的文本字符串\n\n### test\n\n用于测试字符串参数中是否存在匹配正则表达式模式的字符串\n\n```\n/\\d/g.test('0')\ntrue\n```\n\n但是你多执行几次就会出现...\n\n```\nvar reg = /\\d/g\nreg1.test(0)\ntrue\nreg1.test(0)\nfalse\nreg1.test(0)\ntrue\nreg1.test(0)\nfalse\n```\n\n这是为撒呢？因为 test 是以 lastIndex 属性所指的位置作为下次检索的起始点，所以你就可以遍历一个字符串的所有文本,等它再也找不到可以匹配的文本时，它会自动把 lastIndex 属性重置为 0，所以返回了 false\n\n```\nvar reg = /\\w/g\n\nwhile(reg.test('ab')){\n  console.log(reg.lastIndex)\n}\n\n1\n2\n```\n\n### exec\n\n使用正则表达式对字符串进行搜索，如果没有匹配返回 null，匹配到返回结果数组,数组的第 0 个元素是与正则表达式相匹配的文本，第 1 个元素是正则中分组中表达式相匹配的值，一次类推，看实例\n\n```\nvar reg = /\\d(\\w)\\d/\nvar ret = reg.exec('$5a51s28e6')\nconsole.log(ret.index,reg.lastIndex,ret.toString(),ret.input)\n\n1\n0\n\"5a5,a\"\n\"$5a51s28e6\"\n```\n\n从实例中可以看出 exec()方法还返回两个属性，index 属性声明的是匹配文本的第一个字符的位置，input 属性则存放的是被检索的字符串 string。\n其中 5a5 是检索到的字符串，而 a 是分组(\\w)检索出来的属性，再换个写法试试\n\n```\nvar reg = /\\d(\\w)(\\w)\\d/\nvar ret = reg.exec('$5aw51s28e6')\nconsole.log(ret.toString())\n\n\"5aw5,a,w\"\n```\n\na 和 w 都是分组中两个属性\n\n#### 字符串的对象方法\n\n_search_\n\nsearch()方法用于检索字符串中指定的子字符串，或检索与正则表达式想匹配的子字符串，方法返回第一个匹配结果 index，查找不到返回-1，search 方法不支持全局匹配，忽略标志 g，并且从字符串的开始进行检索\n\n```\n'1w5w2w'.search('1')\n0\n'1w5w2w'.search('10')\n-1\n```\n\n_match_\n\nmatch()方法将检索字符串，找到一个或多个与正则匹配的文本，是否标志 g 对结果影响很大\n","slug":"reg","published":1,"updated":"2020-06-26T03:18:29.660Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbvns73a000wigujh9npbh53","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p><strong>正则一直是我弱项，闲着没事写笔记学习吧~</strong></p>\n<h4 id=\"RegExp-对象\"><a href=\"#RegExp-对象\" class=\"headerlink\" title=\"RegExp 对象\"></a>RegExp 对象</h4><p>js 的内置对象 RegExp 支持正则表达式<br>有两种方法实例化 RegExp 对象</p>\n<ul>\n<li>字面量 var reg = /a/</li>\n<li>构造函数 var reg = new RegExp(‘/a/‘)</li>\n</ul>\n<h4 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h4><p>正则表达式由两种基本字符类型组成</p>\n<ul>\n<li>原义文本字符，也就是我想搜索 a 那就/a/</li>\n<li>元字符，在正则表达式中有特殊含义的非字母字符比如\\b 边界，以及 * + ? ^ () {} []</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\t</td>\n<td style=\"text-align:center\">水平制表符</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td style=\"text-align:center\">垂直制表符</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td style=\"text-align:center\">换行符</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td style=\"text-align:center\">回车符</td>\n</tr>\n<tr>\n<td>\\o</td>\n<td style=\"text-align:center\">空字符</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td style=\"text-align:center\">换页符</td>\n</tr>\n<tr>\n<td>\\cX</td>\n<td style=\"text-align:center\">与 X 对应的控制字符</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"字符类\"><a href=\"#字符类\" class=\"headerlink\" title=\"字符类\"></a>字符类</h4><p>有时候我们不想特指某个字符，想匹配某个范围内</p>\n<ul>\n<li>我们可以用元字符 [] 来构建一个简单的类</li>\n<li>所谓类是指符合某些特性的对象，一个泛指，而不是特指某个字符</li>\n<li>表达式[abc]就把字符 a,b,c 归为一类，表达式可以匹配这类的字符</li>\n</ul>\n<p>字符类取反</p>\n<ul>\n<li>使用元字符^创建反向类/负向类</li>\n<li>反向类的意思是不属于某类的内容</li>\n<li>表达式[^abc]标识不是字符 a,b,c 的内容</li>\n</ul>\n<h4 id=\"范围类\"><a href=\"#范围类\" class=\"headerlink\" title=\"范围类\"></a>范围类</h4><p>我们想匹配所有数字，或者所有字母的时候，正则提供了范围类</p>\n<ul>\n<li>[a-z]就表示从 a 到 z 的任意字符</li>\n<li>这是个闭区间，也包含 a 和 z 本身</li>\n<li>也可以连着写[a-zA-Z0-9],如果想匹配-这个字符就在匹配的后面加上-例如[a-z-]</li>\n</ul>\n<h4 id=\"预定义类-边界\"><a href=\"#预定义类-边界\" class=\"headerlink\" title=\"预定义类+边界\"></a>预定义类+边界</h4><table>\n<thead>\n<tr>\n<th>预定义类+边界</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.</td>\n<td style=\"text-align:center\">除了换行符和回车符以外的所有字符</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td style=\"text-align:center\">数字字符([0-9])</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td style=\"text-align:center\">非数字字符([^0-9])</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td style=\"text-align:center\">空白符</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td style=\"text-align:center\">非空白符</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td style=\"text-align:center\">单词字符([a-zA-Z_0-9])</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td style=\"text-align:center\">非单词字符</td>\n</tr>\n<tr>\n<td>^</td>\n<td style=\"text-align:center\">以 xxxx 开始</td>\n</tr>\n<tr>\n<td>\\$</td>\n<td style=\"text-align:center\">以 xxxx 结束</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td style=\"text-align:center\">单词边界</td>\n</tr>\n<tr>\n<td>\\B</td>\n<td style=\"text-align:center\">非单词边界</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"量词\"><a href=\"#量词\" class=\"headerlink\" title=\"量词\"></a>量词</h4><p>当你希望匹配一个数字出现 20 次的时候，你可以这样写/\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d/……这样写是极其不友好，谁写是傻子</p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>?</td>\n<td style=\"text-align:center\">出现 0 次或者 1 次(最多出现一次)</td>\n</tr>\n<tr>\n<td>+</td>\n<td style=\"text-align:center\">出现一次或多次(最少出现一次)</td>\n</tr>\n<tr>\n<td>*</td>\n<td style=\"text-align:center\">出现 0 次或多次(任意次)</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td style=\"text-align:center\">出现 n 次</td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td style=\"text-align:center\">出现 n 到 m 次</td>\n</tr>\n<tr>\n<td>{n,}</td>\n<td style=\"text-align:center\">至少出现 n 次</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"贪婪模式和非贪婪模式\"><a href=\"#贪婪模式和非贪婪模式\" class=\"headerlink\" title=\"贪婪模式和非贪婪模式\"></a>贪婪模式和非贪婪模式</h4><p>比如表达式\\d{3,6}，可以匹配到三个数字，也可以是四个五个六个……来看例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;12345678&apos;.replace(/\\d&#123;3,6&#125;/g,&apos;A&apos;)</span><br><span class=\"line\">&apos;A78&apos;</span><br></pre></td></tr></table></figure>\n<p>从这可以看出正则表达式默认的是尽可能多的匹配，而不是只匹配到第三个就结束了，这就是贪婪模式</p>\n<p><strong>非贪婪模式</strong></p>\n<p>让正则表达式尽可能少的匹配，也就是说一旦成功匹配不再继续尝试，就是非贪婪模式<br>做法很简单，在量词后加上?即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;12345678&apos;.replace(/\\d&#123;3,6&#125;?/,&apos;X&apos;)</span><br><span class=\"line\">&quot;X45678&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h4><p>比如我们想匹配 abc 3 次的时候我们可以这样写<br><code>abc{3}</code><br>但是这样写就会匹配 c 的 3 次，而不是整个字母 abc 的 3 次，要想作用于整个字母就要使用()来分组<br><code>(abc){3}</code></p>\n<p><strong>或</strong><br>js 里边是 || 而正则是使用 | 可以达到或的效果<br><code>a|c</code></p>\n<p><strong>反向引用</strong><br>2015-15-25 =&gt; 25/15/2015<br><code>&#39;2015-12-25&#39;.replace(/(\\d{4})-(\\d{2})-(\\d{2})/,&#39;$3/$2/$1&#39;)</code><br>如果你不希望捕获分组可以在()内加上?:<br><code>(?:\\d{2})</code></p>\n<h4 id=\"前瞻和后瞻\"><a href=\"#前瞻和后瞻\" class=\"headerlink\" title=\"前瞻和后瞻\"></a>前瞻和后瞻</h4><table>\n<thead>\n<tr>\n<th>名称</th>\n<th style=\"text-align:center\">正则</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>正向前瞻</td>\n<td style=\"text-align:center\">exp(?=assert)</td>\n</tr>\n<tr>\n<td>负向前瞻</td>\n<td style=\"text-align:center\">exp(?!assert)</td>\n</tr>\n</tbody>\n</table>\n<p>exp(?=assert) 的意思就是比如你要匹配 a 但是 a 后边必须要跟上数字 就是这样写/\\w(?=\\d)/，上代码看下和平常的区别</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;a2b2&apos;.replace(/\\w\\d/,&apos;A&apos;)</span><br><span class=\"line\">&quot;Ab2&quot;</span><br><span class=\"line\">&apos;a2b2&apos;.replace(/\\w(?=\\d)/,&apos;A&apos;)</span><br><span class=\"line\">&quot;A2b2&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"对象属性\"><a href=\"#对象属性\" class=\"headerlink\" title=\"对象属性\"></a>对象属性</h4><h3 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h3><ul>\n<li>g:global 全局搜索，不添加，搜索到第一个停止</li>\n<li>i:ignore case 忽略大小写，默认大小写敏感</li>\n<li>m:multiple lines 多行搜索</li>\n<li>lastIndex 是当前表达式匹配内容的最后一个字符的下一个位置,该属性只有设置标志 g 才能使用。</li>\n<li>source 正则表达式的文本字符串</li>\n</ul>\n<h3 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h3><p>用于测试字符串参数中是否存在匹配正则表达式模式的字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/\\d/g.test(&apos;0&apos;)</span><br><span class=\"line\">true</span><br></pre></td></tr></table></figure>\n<p>但是你多执行几次就会出现…</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var reg = /\\d/g</span><br><span class=\"line\">reg1.test(0)</span><br><span class=\"line\">true</span><br><span class=\"line\">reg1.test(0)</span><br><span class=\"line\">false</span><br><span class=\"line\">reg1.test(0)</span><br><span class=\"line\">true</span><br><span class=\"line\">reg1.test(0)</span><br><span class=\"line\">false</span><br></pre></td></tr></table></figure>\n<p>这是为撒呢？因为 test 是以 lastIndex 属性所指的位置作为下次检索的起始点，所以你就可以遍历一个字符串的所有文本,等它再也找不到可以匹配的文本时，它会自动把 lastIndex 属性重置为 0，所以返回了 false</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var reg = /\\w/g</span><br><span class=\"line\"></span><br><span class=\"line\">while(reg.test(&apos;ab&apos;))&#123;</span><br><span class=\"line\">  console.log(reg.lastIndex)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n<h3 id=\"exec\"><a href=\"#exec\" class=\"headerlink\" title=\"exec\"></a>exec</h3><p>使用正则表达式对字符串进行搜索，如果没有匹配返回 null，匹配到返回结果数组,数组的第 0 个元素是与正则表达式相匹配的文本，第 1 个元素是正则中分组中表达式相匹配的值，一次类推，看实例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var reg = /\\d(\\w)\\d/</span><br><span class=\"line\">var ret = reg.exec(&apos;$5a51s28e6&apos;)</span><br><span class=\"line\">console.log(ret.index,reg.lastIndex,ret.toString(),ret.input)</span><br><span class=\"line\"></span><br><span class=\"line\">1</span><br><span class=\"line\">0</span><br><span class=\"line\">&quot;5a5,a&quot;</span><br><span class=\"line\">&quot;$5a51s28e6&quot;</span><br></pre></td></tr></table></figure>\n<p>从实例中可以看出 exec()方法还返回两个属性，index 属性声明的是匹配文本的第一个字符的位置，input 属性则存放的是被检索的字符串 string。<br>其中 5a5 是检索到的字符串，而 a 是分组(\\w)检索出来的属性，再换个写法试试</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var reg = /\\d(\\w)(\\w)\\d/</span><br><span class=\"line\">var ret = reg.exec(&apos;$5aw51s28e6&apos;)</span><br><span class=\"line\">console.log(ret.toString())</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;5aw5,a,w&quot;</span><br></pre></td></tr></table></figure>\n<p>a 和 w 都是分组中两个属性</p>\n<h4 id=\"字符串的对象方法\"><a href=\"#字符串的对象方法\" class=\"headerlink\" title=\"字符串的对象方法\"></a>字符串的对象方法</h4><p><em>search</em></p>\n<p>search()方法用于检索字符串中指定的子字符串，或检索与正则表达式想匹配的子字符串，方法返回第一个匹配结果 index，查找不到返回-1，search 方法不支持全局匹配，忽略标志 g，并且从字符串的开始进行检索</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;1w5w2w&apos;.search(&apos;1&apos;)</span><br><span class=\"line\">0</span><br><span class=\"line\">&apos;1w5w2w&apos;.search(&apos;10&apos;)</span><br><span class=\"line\">-1</span><br></pre></td></tr></table></figure>\n<p><em>match</em></p>\n<p>match()方法将检索字符串，找到一个或多个与正则匹配的文本，是否标志 g 对结果影响很大</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>正则一直是我弱项，闲着没事写笔记学习吧~</strong></p>\n<h4 id=\"RegExp-对象\"><a href=\"#RegExp-对象\" class=\"headerlink\" title=\"RegExp 对象\"></a>RegExp 对象</h4><p>js 的内置对象 RegExp 支持正则表达式<br>有两种方法实例化 RegExp 对象</p>\n<ul>\n<li>字面量 var reg = /a/</li>\n<li>构造函数 var reg = new RegExp(‘/a/‘)</li>\n</ul>\n<h4 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h4><p>正则表达式由两种基本字符类型组成</p>\n<ul>\n<li>原义文本字符，也就是我想搜索 a 那就/a/</li>\n<li>元字符，在正则表达式中有特殊含义的非字母字符比如\\b 边界，以及 * + ? ^ () {} []</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\t</td>\n<td style=\"text-align:center\">水平制表符</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td style=\"text-align:center\">垂直制表符</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td style=\"text-align:center\">换行符</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td style=\"text-align:center\">回车符</td>\n</tr>\n<tr>\n<td>\\o</td>\n<td style=\"text-align:center\">空字符</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td style=\"text-align:center\">换页符</td>\n</tr>\n<tr>\n<td>\\cX</td>\n<td style=\"text-align:center\">与 X 对应的控制字符</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"字符类\"><a href=\"#字符类\" class=\"headerlink\" title=\"字符类\"></a>字符类</h4><p>有时候我们不想特指某个字符，想匹配某个范围内</p>\n<ul>\n<li>我们可以用元字符 [] 来构建一个简单的类</li>\n<li>所谓类是指符合某些特性的对象，一个泛指，而不是特指某个字符</li>\n<li>表达式[abc]就把字符 a,b,c 归为一类，表达式可以匹配这类的字符</li>\n</ul>\n<p>字符类取反</p>\n<ul>\n<li>使用元字符^创建反向类/负向类</li>\n<li>反向类的意思是不属于某类的内容</li>\n<li>表达式[^abc]标识不是字符 a,b,c 的内容</li>\n</ul>\n<h4 id=\"范围类\"><a href=\"#范围类\" class=\"headerlink\" title=\"范围类\"></a>范围类</h4><p>我们想匹配所有数字，或者所有字母的时候，正则提供了范围类</p>\n<ul>\n<li>[a-z]就表示从 a 到 z 的任意字符</li>\n<li>这是个闭区间，也包含 a 和 z 本身</li>\n<li>也可以连着写[a-zA-Z0-9],如果想匹配-这个字符就在匹配的后面加上-例如[a-z-]</li>\n</ul>\n<h4 id=\"预定义类-边界\"><a href=\"#预定义类-边界\" class=\"headerlink\" title=\"预定义类+边界\"></a>预定义类+边界</h4><table>\n<thead>\n<tr>\n<th>预定义类+边界</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.</td>\n<td style=\"text-align:center\">除了换行符和回车符以外的所有字符</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td style=\"text-align:center\">数字字符([0-9])</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td style=\"text-align:center\">非数字字符([^0-9])</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td style=\"text-align:center\">空白符</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td style=\"text-align:center\">非空白符</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td style=\"text-align:center\">单词字符([a-zA-Z_0-9])</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td style=\"text-align:center\">非单词字符</td>\n</tr>\n<tr>\n<td>^</td>\n<td style=\"text-align:center\">以 xxxx 开始</td>\n</tr>\n<tr>\n<td>\\$</td>\n<td style=\"text-align:center\">以 xxxx 结束</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td style=\"text-align:center\">单词边界</td>\n</tr>\n<tr>\n<td>\\B</td>\n<td style=\"text-align:center\">非单词边界</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"量词\"><a href=\"#量词\" class=\"headerlink\" title=\"量词\"></a>量词</h4><p>当你希望匹配一个数字出现 20 次的时候，你可以这样写/\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d/……这样写是极其不友好，谁写是傻子</p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>?</td>\n<td style=\"text-align:center\">出现 0 次或者 1 次(最多出现一次)</td>\n</tr>\n<tr>\n<td>+</td>\n<td style=\"text-align:center\">出现一次或多次(最少出现一次)</td>\n</tr>\n<tr>\n<td>*</td>\n<td style=\"text-align:center\">出现 0 次或多次(任意次)</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td style=\"text-align:center\">出现 n 次</td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td style=\"text-align:center\">出现 n 到 m 次</td>\n</tr>\n<tr>\n<td>{n,}</td>\n<td style=\"text-align:center\">至少出现 n 次</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"贪婪模式和非贪婪模式\"><a href=\"#贪婪模式和非贪婪模式\" class=\"headerlink\" title=\"贪婪模式和非贪婪模式\"></a>贪婪模式和非贪婪模式</h4><p>比如表达式\\d{3,6}，可以匹配到三个数字，也可以是四个五个六个……来看例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;12345678&apos;.replace(/\\d&#123;3,6&#125;/g,&apos;A&apos;)</span><br><span class=\"line\">&apos;A78&apos;</span><br></pre></td></tr></table></figure>\n<p>从这可以看出正则表达式默认的是尽可能多的匹配，而不是只匹配到第三个就结束了，这就是贪婪模式</p>\n<p><strong>非贪婪模式</strong></p>\n<p>让正则表达式尽可能少的匹配，也就是说一旦成功匹配不再继续尝试，就是非贪婪模式<br>做法很简单，在量词后加上?即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;12345678&apos;.replace(/\\d&#123;3,6&#125;?/,&apos;X&apos;)</span><br><span class=\"line\">&quot;X45678&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h4><p>比如我们想匹配 abc 3 次的时候我们可以这样写<br><code>abc{3}</code><br>但是这样写就会匹配 c 的 3 次，而不是整个字母 abc 的 3 次，要想作用于整个字母就要使用()来分组<br><code>(abc){3}</code></p>\n<p><strong>或</strong><br>js 里边是 || 而正则是使用 | 可以达到或的效果<br><code>a|c</code></p>\n<p><strong>反向引用</strong><br>2015-15-25 =&gt; 25/15/2015<br><code>&#39;2015-12-25&#39;.replace(/(\\d{4})-(\\d{2})-(\\d{2})/,&#39;$3/$2/$1&#39;)</code><br>如果你不希望捕获分组可以在()内加上?:<br><code>(?:\\d{2})</code></p>\n<h4 id=\"前瞻和后瞻\"><a href=\"#前瞻和后瞻\" class=\"headerlink\" title=\"前瞻和后瞻\"></a>前瞻和后瞻</h4><table>\n<thead>\n<tr>\n<th>名称</th>\n<th style=\"text-align:center\">正则</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>正向前瞻</td>\n<td style=\"text-align:center\">exp(?=assert)</td>\n</tr>\n<tr>\n<td>负向前瞻</td>\n<td style=\"text-align:center\">exp(?!assert)</td>\n</tr>\n</tbody>\n</table>\n<p>exp(?=assert) 的意思就是比如你要匹配 a 但是 a 后边必须要跟上数字 就是这样写/\\w(?=\\d)/，上代码看下和平常的区别</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;a2b2&apos;.replace(/\\w\\d/,&apos;A&apos;)</span><br><span class=\"line\">&quot;Ab2&quot;</span><br><span class=\"line\">&apos;a2b2&apos;.replace(/\\w(?=\\d)/,&apos;A&apos;)</span><br><span class=\"line\">&quot;A2b2&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"对象属性\"><a href=\"#对象属性\" class=\"headerlink\" title=\"对象属性\"></a>对象属性</h4><h3 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h3><ul>\n<li>g:global 全局搜索，不添加，搜索到第一个停止</li>\n<li>i:ignore case 忽略大小写，默认大小写敏感</li>\n<li>m:multiple lines 多行搜索</li>\n<li>lastIndex 是当前表达式匹配内容的最后一个字符的下一个位置,该属性只有设置标志 g 才能使用。</li>\n<li>source 正则表达式的文本字符串</li>\n</ul>\n<h3 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h3><p>用于测试字符串参数中是否存在匹配正则表达式模式的字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/\\d/g.test(&apos;0&apos;)</span><br><span class=\"line\">true</span><br></pre></td></tr></table></figure>\n<p>但是你多执行几次就会出现…</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var reg = /\\d/g</span><br><span class=\"line\">reg1.test(0)</span><br><span class=\"line\">true</span><br><span class=\"line\">reg1.test(0)</span><br><span class=\"line\">false</span><br><span class=\"line\">reg1.test(0)</span><br><span class=\"line\">true</span><br><span class=\"line\">reg1.test(0)</span><br><span class=\"line\">false</span><br></pre></td></tr></table></figure>\n<p>这是为撒呢？因为 test 是以 lastIndex 属性所指的位置作为下次检索的起始点，所以你就可以遍历一个字符串的所有文本,等它再也找不到可以匹配的文本时，它会自动把 lastIndex 属性重置为 0，所以返回了 false</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var reg = /\\w/g</span><br><span class=\"line\"></span><br><span class=\"line\">while(reg.test(&apos;ab&apos;))&#123;</span><br><span class=\"line\">  console.log(reg.lastIndex)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n<h3 id=\"exec\"><a href=\"#exec\" class=\"headerlink\" title=\"exec\"></a>exec</h3><p>使用正则表达式对字符串进行搜索，如果没有匹配返回 null，匹配到返回结果数组,数组的第 0 个元素是与正则表达式相匹配的文本，第 1 个元素是正则中分组中表达式相匹配的值，一次类推，看实例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var reg = /\\d(\\w)\\d/</span><br><span class=\"line\">var ret = reg.exec(&apos;$5a51s28e6&apos;)</span><br><span class=\"line\">console.log(ret.index,reg.lastIndex,ret.toString(),ret.input)</span><br><span class=\"line\"></span><br><span class=\"line\">1</span><br><span class=\"line\">0</span><br><span class=\"line\">&quot;5a5,a&quot;</span><br><span class=\"line\">&quot;$5a51s28e6&quot;</span><br></pre></td></tr></table></figure>\n<p>从实例中可以看出 exec()方法还返回两个属性，index 属性声明的是匹配文本的第一个字符的位置，input 属性则存放的是被检索的字符串 string。<br>其中 5a5 是检索到的字符串，而 a 是分组(\\w)检索出来的属性，再换个写法试试</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var reg = /\\d(\\w)(\\w)\\d/</span><br><span class=\"line\">var ret = reg.exec(&apos;$5aw51s28e6&apos;)</span><br><span class=\"line\">console.log(ret.toString())</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;5aw5,a,w&quot;</span><br></pre></td></tr></table></figure>\n<p>a 和 w 都是分组中两个属性</p>\n<h4 id=\"字符串的对象方法\"><a href=\"#字符串的对象方法\" class=\"headerlink\" title=\"字符串的对象方法\"></a>字符串的对象方法</h4><p><em>search</em></p>\n<p>search()方法用于检索字符串中指定的子字符串，或检索与正则表达式想匹配的子字符串，方法返回第一个匹配结果 index，查找不到返回-1，search 方法不支持全局匹配，忽略标志 g，并且从字符串的开始进行检索</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;1w5w2w&apos;.search(&apos;1&apos;)</span><br><span class=\"line\">0</span><br><span class=\"line\">&apos;1w5w2w&apos;.search(&apos;10&apos;)</span><br><span class=\"line\">-1</span><br></pre></td></tr></table></figure>\n<p><em>match</em></p>\n<p>match()方法将检索字符串，找到一个或多个与正则匹配的文本，是否标志 g 对结果影响很大</p>\n"},{"title":"实现一个简单的瀑布流","date":"2019-11-18T09:25:07.000Z","_content":"\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>Document</title>\n    <style>\n      .container {\n        position: relative;\n      }\n      .left,\n      .middle,\n      .right {\n        display: inline-block;\n        margin: 30px;\n        width: 500px;\n        height: auto;\n        vertical-align: top;\n      }\n      img {\n        width: 100%;\n      }\n    </style>\n  </head>\n\n  <body>\n    <div class=\"container flex\">\n      <div class=\"left\">\n        <img src=\"./avatar.jpg\" alt=\"\" />\n        <img src=\"./tutu.jpg\" alt=\"\" />\n      </div>\n      <div class=\"middle\">\n        <img src=\"./sister.jpg\" alt=\"\" />\n        <img src=\"./tutu.jpg\" alt=\"\" />\n      </div>\n      <div class=\"right\">\n        <img src=\"./sister.jpg\" alt=\"\" />\n      </div>\n    </div>\n  </body>\n  <script>\n    const el = ['./avatar.jpg', './sister.jpg', './tutu.jpg']\n    const $ = dom => document.querySelector(dom)\n    const left = $('.left')\n    const middle = $('.middle')\n    const right = $('.right')\n    window.addEventListener('scroll', () => {\n      const scrolltop =\n        document.documentElement.scrollTop || document.body.scrollTop\n      const scrollHeight = Math.max(\n        document.body.scrollHeight,\n        document.documentElement.scrollHeight\n      )\n      const screenHeight =\n        document.documentElement.clientHeight || document.body.clientHeight\n      judgeSize()\n      if (scrollHeight - (screenHeight + scrolltop) <= 100) {\n        for (let i = 0; i < 12; i++) {\n          let img = Math.floor(Math.random() * 3)\n          let dom = judgeSize()\n          dom.innerHTML += `<img src=\"${el[img]}\"></img>`\n        }\n      }\n    })\n    const judgeSize = () => {\n      const leftHeight = left.offsetHeight\n      const middleHeight = middle.offsetHeight\n      const rightHeight = right.offsetHeight\n      const obj = {\n        [leftHeight]: left,\n        [middleHeight]: middle,\n        [rightHeight]: right\n      }\n      let arr = [leftHeight, middleHeight, rightHeight].sort((a, b) => a - b)\n      return obj[arr[0]]\n    }\n  </script>\n</html>\n\n```\n","source":"_posts/waterfall.md","raw":"---\ntitle: 实现一个简单的瀑布流\ndate: 2019-11-18 17:25:07\ntags: JavaScript\n---\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>Document</title>\n    <style>\n      .container {\n        position: relative;\n      }\n      .left,\n      .middle,\n      .right {\n        display: inline-block;\n        margin: 30px;\n        width: 500px;\n        height: auto;\n        vertical-align: top;\n      }\n      img {\n        width: 100%;\n      }\n    </style>\n  </head>\n\n  <body>\n    <div class=\"container flex\">\n      <div class=\"left\">\n        <img src=\"./avatar.jpg\" alt=\"\" />\n        <img src=\"./tutu.jpg\" alt=\"\" />\n      </div>\n      <div class=\"middle\">\n        <img src=\"./sister.jpg\" alt=\"\" />\n        <img src=\"./tutu.jpg\" alt=\"\" />\n      </div>\n      <div class=\"right\">\n        <img src=\"./sister.jpg\" alt=\"\" />\n      </div>\n    </div>\n  </body>\n  <script>\n    const el = ['./avatar.jpg', './sister.jpg', './tutu.jpg']\n    const $ = dom => document.querySelector(dom)\n    const left = $('.left')\n    const middle = $('.middle')\n    const right = $('.right')\n    window.addEventListener('scroll', () => {\n      const scrolltop =\n        document.documentElement.scrollTop || document.body.scrollTop\n      const scrollHeight = Math.max(\n        document.body.scrollHeight,\n        document.documentElement.scrollHeight\n      )\n      const screenHeight =\n        document.documentElement.clientHeight || document.body.clientHeight\n      judgeSize()\n      if (scrollHeight - (screenHeight + scrolltop) <= 100) {\n        for (let i = 0; i < 12; i++) {\n          let img = Math.floor(Math.random() * 3)\n          let dom = judgeSize()\n          dom.innerHTML += `<img src=\"${el[img]}\"></img>`\n        }\n      }\n    })\n    const judgeSize = () => {\n      const leftHeight = left.offsetHeight\n      const middleHeight = middle.offsetHeight\n      const rightHeight = right.offsetHeight\n      const obj = {\n        [leftHeight]: left,\n        [middleHeight]: middle,\n        [rightHeight]: right\n      }\n      let arr = [leftHeight, middleHeight, rightHeight].sort((a, b) => a - b)\n      return obj[arr[0]]\n    }\n  </script>\n</html>\n\n```\n","slug":"waterfall","published":1,"updated":"2020-06-26T03:18:29.666Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbvns73b000yiguj7n8n4t21","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">      .container &#123;</span><br><span class=\"line\">        position: relative;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      .left,</span><br><span class=\"line\">      .middle,</span><br><span class=\"line\">      .right &#123;</span><br><span class=\"line\">        display: inline-block;</span><br><span class=\"line\">        margin: 30px;</span><br><span class=\"line\">        width: 500px;</span><br><span class=\"line\">        height: auto;</span><br><span class=\"line\">        vertical-align: top;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      img &#123;</span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div class=&quot;container flex&quot;&gt;</span><br><span class=\"line\">      &lt;div class=&quot;left&quot;&gt;</span><br><span class=\"line\">        &lt;img src=&quot;./avatar.jpg&quot; alt=&quot;&quot; /&gt;</span><br><span class=\"line\">        &lt;img src=&quot;./tutu.jpg&quot; alt=&quot;&quot; /&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;middle&quot;&gt;</span><br><span class=\"line\">        &lt;img src=&quot;./sister.jpg&quot; alt=&quot;&quot; /&gt;</span><br><span class=\"line\">        &lt;img src=&quot;./tutu.jpg&quot; alt=&quot;&quot; /&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;right&quot;&gt;</span><br><span class=\"line\">        &lt;img src=&quot;./sister.jpg&quot; alt=&quot;&quot; /&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    const el = [&apos;./avatar.jpg&apos;, &apos;./sister.jpg&apos;, &apos;./tutu.jpg&apos;]</span><br><span class=\"line\">    const $ = dom =&gt; document.querySelector(dom)</span><br><span class=\"line\">    const left = $(&apos;.left&apos;)</span><br><span class=\"line\">    const middle = $(&apos;.middle&apos;)</span><br><span class=\"line\">    const right = $(&apos;.right&apos;)</span><br><span class=\"line\">    window.addEventListener(&apos;scroll&apos;, () =&gt; &#123;</span><br><span class=\"line\">      const scrolltop =</span><br><span class=\"line\">        document.documentElement.scrollTop || document.body.scrollTop</span><br><span class=\"line\">      const scrollHeight = Math.max(</span><br><span class=\"line\">        document.body.scrollHeight,</span><br><span class=\"line\">        document.documentElement.scrollHeight</span><br><span class=\"line\">      )</span><br><span class=\"line\">      const screenHeight =</span><br><span class=\"line\">        document.documentElement.clientHeight || document.body.clientHeight</span><br><span class=\"line\">      judgeSize()</span><br><span class=\"line\">      if (scrollHeight - (screenHeight + scrolltop) &lt;= 100) &#123;</span><br><span class=\"line\">        for (let i = 0; i &lt; 12; i++) &#123;</span><br><span class=\"line\">          let img = Math.floor(Math.random() * 3)</span><br><span class=\"line\">          let dom = judgeSize()</span><br><span class=\"line\">          dom.innerHTML += `&lt;img src=&quot;$&#123;el[img]&#125;&quot;&gt;&lt;/img&gt;`</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    const judgeSize = () =&gt; &#123;</span><br><span class=\"line\">      const leftHeight = left.offsetHeight</span><br><span class=\"line\">      const middleHeight = middle.offsetHeight</span><br><span class=\"line\">      const rightHeight = right.offsetHeight</span><br><span class=\"line\">      const obj = &#123;</span><br><span class=\"line\">        [leftHeight]: left,</span><br><span class=\"line\">        [middleHeight]: middle,</span><br><span class=\"line\">        [rightHeight]: right</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      let arr = [leftHeight, middleHeight, rightHeight].sort((a, b) =&gt; a - b)</span><br><span class=\"line\">      return obj[arr[0]]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &lt;/script&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">      .container &#123;</span><br><span class=\"line\">        position: relative;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      .left,</span><br><span class=\"line\">      .middle,</span><br><span class=\"line\">      .right &#123;</span><br><span class=\"line\">        display: inline-block;</span><br><span class=\"line\">        margin: 30px;</span><br><span class=\"line\">        width: 500px;</span><br><span class=\"line\">        height: auto;</span><br><span class=\"line\">        vertical-align: top;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      img &#123;</span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div class=&quot;container flex&quot;&gt;</span><br><span class=\"line\">      &lt;div class=&quot;left&quot;&gt;</span><br><span class=\"line\">        &lt;img src=&quot;./avatar.jpg&quot; alt=&quot;&quot; /&gt;</span><br><span class=\"line\">        &lt;img src=&quot;./tutu.jpg&quot; alt=&quot;&quot; /&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;middle&quot;&gt;</span><br><span class=\"line\">        &lt;img src=&quot;./sister.jpg&quot; alt=&quot;&quot; /&gt;</span><br><span class=\"line\">        &lt;img src=&quot;./tutu.jpg&quot; alt=&quot;&quot; /&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;right&quot;&gt;</span><br><span class=\"line\">        &lt;img src=&quot;./sister.jpg&quot; alt=&quot;&quot; /&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    const el = [&apos;./avatar.jpg&apos;, &apos;./sister.jpg&apos;, &apos;./tutu.jpg&apos;]</span><br><span class=\"line\">    const $ = dom =&gt; document.querySelector(dom)</span><br><span class=\"line\">    const left = $(&apos;.left&apos;)</span><br><span class=\"line\">    const middle = $(&apos;.middle&apos;)</span><br><span class=\"line\">    const right = $(&apos;.right&apos;)</span><br><span class=\"line\">    window.addEventListener(&apos;scroll&apos;, () =&gt; &#123;</span><br><span class=\"line\">      const scrolltop =</span><br><span class=\"line\">        document.documentElement.scrollTop || document.body.scrollTop</span><br><span class=\"line\">      const scrollHeight = Math.max(</span><br><span class=\"line\">        document.body.scrollHeight,</span><br><span class=\"line\">        document.documentElement.scrollHeight</span><br><span class=\"line\">      )</span><br><span class=\"line\">      const screenHeight =</span><br><span class=\"line\">        document.documentElement.clientHeight || document.body.clientHeight</span><br><span class=\"line\">      judgeSize()</span><br><span class=\"line\">      if (scrollHeight - (screenHeight + scrolltop) &lt;= 100) &#123;</span><br><span class=\"line\">        for (let i = 0; i &lt; 12; i++) &#123;</span><br><span class=\"line\">          let img = Math.floor(Math.random() * 3)</span><br><span class=\"line\">          let dom = judgeSize()</span><br><span class=\"line\">          dom.innerHTML += `&lt;img src=&quot;$&#123;el[img]&#125;&quot;&gt;&lt;/img&gt;`</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    const judgeSize = () =&gt; &#123;</span><br><span class=\"line\">      const leftHeight = left.offsetHeight</span><br><span class=\"line\">      const middleHeight = middle.offsetHeight</span><br><span class=\"line\">      const rightHeight = right.offsetHeight</span><br><span class=\"line\">      const obj = &#123;</span><br><span class=\"line\">        [leftHeight]: left,</span><br><span class=\"line\">        [middleHeight]: middle,</span><br><span class=\"line\">        [rightHeight]: right</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      let arr = [leftHeight, middleHeight, rightHeight].sort((a, b) =&gt; a - b)</span><br><span class=\"line\">      return obj[arr[0]]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &lt;/script&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n"},{"title":"webpack4.x学习入门","date":"2018-12-20T02:08:29.000Z","_content":"\n** 之前一直使用3.x，这次学学4.x，看看跟之前有什么不同的地方没 **\n#### 什么是webpack？\n> webpack是一个打包工具，他的宗旨是一切静态资源即可打包。有人就会问为什么要webpack？webpack是现代前端技术的基石，常规的开发方式，比如jquery,html,css静态网页开发已经落后了。现在是MVVM的时代，数据驱动界面。webpack将现代js开发中的各种新型有用的技术，集合打包。\n#### 一、前端环境搭建\n我们使用npm或yarn来安装webpack\n```  \nnpm install webpack webpack-cli -g \n或者 \nyarn global add webpack webpack-cli\n```\n\n在webpack3中，webpack本身和它的cli以前都是在同一个包中，第4版他们两者分开了,新建一个webpack的文件夹，webpack,初始化package.json并安装webpack-cli\n\n```\ncnpm init -y  //-y 默认所有的配置\ncnpm i webpack webpack-cli --save-dev  //局部安装\n```\n\n#### 二、部署webpack \n在上面搭建好的环境项目中，我们来到package.json里配置我们的scripts\n```\n\"scripts\": { \n \"dist\" : \"node_modules/.bin/webpack -p\"   //使用cnpm  run dist 就可以打包我们的项目了\n},\n```\n\n#### 三、webpackp配置流程篇\n我们在开发是一般会打包src下的什么文件呢？\n*  发布时需要的html，css，js \n*  预编译器stylus，less，sass,es6的高级语法 \n*  图片字体资源.png，.gif，.ico，.jpg \n*  文件间的require别名@等修饰符等等\n*  webpack-dev-server以及跨域处理\n*  jQuery插件全局使用  \n通过这几点来讲解webpack中webpack.config.js的配置\n首先在同目录下创建webpack.config.js文件，配置总览大概是这样\n```\nmodule.exports={\n    //入口文件的配置项\n    entry:{},\n    //出口文件的配置项\n    output:{},\n    //模块：例如解读CSS,图片如何转换，压缩\n    module:{},\n    //插件，用于生产模版和各项功能\n    plugins:[],\n    //配置webpack开发服务功能\n    devServer:{}\n}\n```\n**entry**：配置入口文件的地址，可以是单一入口，也可以是多入口。 \n**output**：配置出口文件的地址，在webpack2.X版本后，支持多出口配置。 \n**module**：配置模块，主要是解析CSS和图片转换压缩等功能。 \n**plugins**：配置插件，根据你的需要配置不同功能的插件。 \n**devServer**：配置开发服务功能。\n\n##### 首先是入口文件\n```\nentry: './index.js', \n//可配置多入口文件\nentry:{\n  'index' : './index.js',\n  'demo'  : './demo.js',\n}\n```\n\n##### output选项（出口配置）\n```\n//出口文件的配置项\noutput:{\n    //打包的路径\n    path:path.resolve(__dirname,'dist'),\n    //打包后的引用路径\n    publicPath: 'dist',\n    //打包的文件名称\n    filename:'bundle.js'\n    \n},\n//多入口情况下\noutput:{\n    //打包的路径\n    path:path.resolve(__dirname,'dist'),\n    //打包后的引用路径\n    publicPath: 'dist',\n    //打包的文件名称\n    filename:'js/[name].js'    \n},\n//[name]的意思是根据入口文件的名称，打包成相同的名称，有几个入口文件，就可以打包出几个文件。\n```\n\n**直接这样写是不对的，需要在头部引入path**\n`const path = require('path')`\n其中path.resolve(__dirname,’dist’)就是获取了项目的绝对路径。\n接下来在根目录下创建index.js，然后运行node_modules/.bin/webpack\n如果你是全局安装，直接webpack即可，此条命令针对局部安装\n\n##### 设置webpack-dev-server\n要执行webpack-dev-server首先要使用npm下载\n`cnpm install webpack-dev-server –-save-dev`\n最简单的几项配置如下\n```\ndevServer:{\n  //设置基本目录结构\n  contentBase:path.resolve(__dirname,'dist'),\n  //服务器的IP地址，可以使用IP也可以使用localhost\n  host:'localhost',\n  //服务端压缩是否开启\n  compress:true,\n  //配置服务端口号\n  port:1717\n  proxy : [{\n      context: ['/admin'],\n      target: \"http://mcljp.com\",\n      changeOrigin : true\n  }]\n}\n```\n\n**contentBase**:配置服务器基本运行路径，用于找到程序打包地址\n**host**：服务运行地址，建议使用本机IP，这里为了讲解方便，所以用localhost\n**compress**：服务器端压缩选型，一般设置为开启，如果你对服务器压缩感兴趣，可以自行学习\n**port**：服务运行端口，建议不使用80，很容易被占用，这里使用了1717.\n**proxy** : 本地代理，可进行跨域\n\n开启热更新，你要是直接webpack-dev-server是不行的，需要在json文件下配置下scripts\n```\n\"scripts\": {\n    \"dev\":\"webpack-dev-server --open\"\n },\n//--open命令运行后自动打开浏览器进行浏览\n```\n配置好保存后，在终端里输入 npm  run  dev  就可以进行浏览了\n\n#### 四、配置模块\n>loaders是Webpack最重要的功能之一，通过使用不同的Loader，Webpack可以的脚本和工具，从而对不同的文件格式进行特定处理。\n**test**：用于匹配处理文件的扩展名的表达式，这个选项是必须进行配置的\n**use**：loader名称，就是你要使用模块的名称，这个选项也必须进行配置，否则报错\n**include/exclude**:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）\n**query**：为loaders提供额外的设置选项（可选）\n##### 打包css文件\n根目录下创建css文件，然后js文件require引入,npm安装style-loader，css-loader\n`cnpm install style-loader css-loader --save-dev`\n\nwebpack.config.js的modules修改为下\n```\nmodule:{\n  rules: [\n      {\n        test: /\\.css$/,\n        use: [ 'style-loader', 'css-loader' ]\n      }\n    ]\n}\n```\n\n##### 打包HTML文件\n打包html我们需要用上插件html-webpack-plugin，使用npm安装插件，并在头部引用\n```\nnpm install --save-dev html-webpack-plugin\nconst htmlPlugin= require('html-webpack-plugin');\n```\n\nhtml-webpack-pugin基本属性如下\n**title**: 用来生成页面的 title 元素filename: 输出的 HTML 文件名，默认是 index.html, 也可以直接配置带有子目录。 \n**template**: 模板文件路径，比如‘./index.html’， \n**favicon**: 添加特定的 favicon 路径到输出的 HTML 文件中。\n**minify**: {} | false , 传递 html-minifier 选项给 minify 输出hash: true | false, 如果为 true, 将添加一个唯一的 webpack 编译 hash 到所有包含的脚本和 CSS 文件，对于解除 cache 很有用。 \n**cache**: true | false，如果为 true, 这是默认值，仅仅在文件修改之后才会发布文件。 \n**showErrors**: true | false, 如果为 true, 这是默认值，错误信息会写入到 HTML 页面中chunks: 允许只添加某些块 (比如，仅仅 unit test 块) \n**chunksSortMode**: 允许控制块在添加到页面之前的排序方式，支持的值：'none' | 'default' | {function}-default:'auto' \n**excludeChunks**: 允许跳过某些块，(比如，跳过单元测试的块) \n**chunks**：chunks 默认会在生成的 html 文件中引用所有的 js 文件，当然你也可以指定引入哪些特定的文件。\n**根目录下创建index.html**\n```\nplugins:[\n  new htmlWebpackPlugin({\n      template    : 'index.html',\n      filename    : 'index.html',\n      title       : title,\n      inject      : true,\n      hash        : true,\n      chunks      : ['index']\n  }),\n]\n```\n终端进行打包，你就会发现html文件也被打包在我们的dist目录下了。\n\n##### 图片，字体打包\n要将图片和字体打包我们需要安装url-loader，首先进行安装\n`npm install --save-dev  url-loader`\n接下来进行配置\n```\ntest: /\\.(png|jpg|gif)/,\nuse: [{\n        loader: 'url-loader',\n        options: {\n                limit: 5000,\n                outputPath: 'resource/'\n            }\n }]\n```\n**limit** : 文件大小小于limit参数，url-loader将会把文件转为DataURL\n**outputPath** : 表示输出文件路径前缀。图片经过url-loader打包都会打包到指定的输出文件夹下。但是我们可以指定图片在输出文件夹下的路径。图片被打包时，就会在输出文件夹下新建（如果没有）一个名为resource的文件夹，把图片放到里面\n\n##### css单独打包\n安装后，config.js文件头部引用\n```\nnpm install --save-dev extract-text-webpack-plugin\nconst extractTextPlugin = require(\"extract-text-webpack-plugin\");\n```\n引入成功创建实例后需要在plugins属性中进行配置\n```\nconst extractTextPlugin = new extractTextPlugin(\"/css/index.css\")\n{\n      test: /\\.css$/,\n      use : extractTextPlugin.extract({\n               fallback: 'style-loader',\n               use: [\n                  { loader: 'css-loader' },\n               ]\n      })\n}\n```\n##### ES6转ES6\nBabel的安装与配置\n`cnpm install --save-dev babel-core babel-loader babel-preset-env babel-preset-react`\n在webpack中配置Babel的方法如下\n```\ntest:/\\.(jsx|js)$/,\nuse:{\n   loader:'babel-loader',\n},\nexclude:/node_modules/\n```\n需要在根目录下创建.babelrc文件\n```\n{\n    \"presets\":[\"react\",\"env\"]\n}\n```\n##### 打包第三方库，比如jQuery\n使用plugin全局引用\nProvidePlugin是一个webpack自带的插件，Provide的意思就是装备、提供。因为ProvidePlugin是webpack自带的插件，所以要先再webpack.config.js中引入webpack\n`const webpack = require('webpack')`\n引入成功后配置我们的plugins模块\n```\nplugins:[\n    new webpack.ProvidePlugin({\n        $:\"jquery\"\n    })\n],\n```\n一些杂货铺插件，可用可不用\n`new webpack.BannerPlugin('买菜的家朋版权所有')`\n```\n//抽离第三方库，单独打包，不易造成代码冗余\nnew webpack.optimize.CommonsChunkPlugin({\n    //name对应入口文件中的名字，我们起的是jQuery\n    name:['jquery'],\n    //把文件打包到哪里，是一个路径\n    filename:\"assets/js/[name].js\",\n    //最小打包的文件模块数，这里直接写2就好\n    minChunks:2\n}),\n```\n\n#### 补充：目前发现与之前3.x有两处不同\n\n1.webpack.optimize.CommonsChunkPlugin这个打包独立模块的插件已被抛弃更改为\n```\noptimization: { \n   splitChunks: {\n   name: 'common',\n   filename : 'js/base.js'\n   } \n }\n```\n2.css打包插件extractTextPlugin已不能进行webpack4.0的打包，需要更新\n```\ncnpm install --save-dev extract-text-webpack-plugin@next \n然后在打包就正常了\n\n\"devDependencies\": {\n    ...\n    \"extract-text-webpack-plugin\": \"^4.0.0-beta.0\",\n    ...\n}\n```\n\n\n","source":"_posts/webpack4-x.md","raw":"---\ntitle: webpack4.x学习入门\ndate: 2018-12-20 10:08:29\ntags: webpack\n---\n\n** 之前一直使用3.x，这次学学4.x，看看跟之前有什么不同的地方没 **\n#### 什么是webpack？\n> webpack是一个打包工具，他的宗旨是一切静态资源即可打包。有人就会问为什么要webpack？webpack是现代前端技术的基石，常规的开发方式，比如jquery,html,css静态网页开发已经落后了。现在是MVVM的时代，数据驱动界面。webpack将现代js开发中的各种新型有用的技术，集合打包。\n#### 一、前端环境搭建\n我们使用npm或yarn来安装webpack\n```  \nnpm install webpack webpack-cli -g \n或者 \nyarn global add webpack webpack-cli\n```\n\n在webpack3中，webpack本身和它的cli以前都是在同一个包中，第4版他们两者分开了,新建一个webpack的文件夹，webpack,初始化package.json并安装webpack-cli\n\n```\ncnpm init -y  //-y 默认所有的配置\ncnpm i webpack webpack-cli --save-dev  //局部安装\n```\n\n#### 二、部署webpack \n在上面搭建好的环境项目中，我们来到package.json里配置我们的scripts\n```\n\"scripts\": { \n \"dist\" : \"node_modules/.bin/webpack -p\"   //使用cnpm  run dist 就可以打包我们的项目了\n},\n```\n\n#### 三、webpackp配置流程篇\n我们在开发是一般会打包src下的什么文件呢？\n*  发布时需要的html，css，js \n*  预编译器stylus，less，sass,es6的高级语法 \n*  图片字体资源.png，.gif，.ico，.jpg \n*  文件间的require别名@等修饰符等等\n*  webpack-dev-server以及跨域处理\n*  jQuery插件全局使用  \n通过这几点来讲解webpack中webpack.config.js的配置\n首先在同目录下创建webpack.config.js文件，配置总览大概是这样\n```\nmodule.exports={\n    //入口文件的配置项\n    entry:{},\n    //出口文件的配置项\n    output:{},\n    //模块：例如解读CSS,图片如何转换，压缩\n    module:{},\n    //插件，用于生产模版和各项功能\n    plugins:[],\n    //配置webpack开发服务功能\n    devServer:{}\n}\n```\n**entry**：配置入口文件的地址，可以是单一入口，也可以是多入口。 \n**output**：配置出口文件的地址，在webpack2.X版本后，支持多出口配置。 \n**module**：配置模块，主要是解析CSS和图片转换压缩等功能。 \n**plugins**：配置插件，根据你的需要配置不同功能的插件。 \n**devServer**：配置开发服务功能。\n\n##### 首先是入口文件\n```\nentry: './index.js', \n//可配置多入口文件\nentry:{\n  'index' : './index.js',\n  'demo'  : './demo.js',\n}\n```\n\n##### output选项（出口配置）\n```\n//出口文件的配置项\noutput:{\n    //打包的路径\n    path:path.resolve(__dirname,'dist'),\n    //打包后的引用路径\n    publicPath: 'dist',\n    //打包的文件名称\n    filename:'bundle.js'\n    \n},\n//多入口情况下\noutput:{\n    //打包的路径\n    path:path.resolve(__dirname,'dist'),\n    //打包后的引用路径\n    publicPath: 'dist',\n    //打包的文件名称\n    filename:'js/[name].js'    \n},\n//[name]的意思是根据入口文件的名称，打包成相同的名称，有几个入口文件，就可以打包出几个文件。\n```\n\n**直接这样写是不对的，需要在头部引入path**\n`const path = require('path')`\n其中path.resolve(__dirname,’dist’)就是获取了项目的绝对路径。\n接下来在根目录下创建index.js，然后运行node_modules/.bin/webpack\n如果你是全局安装，直接webpack即可，此条命令针对局部安装\n\n##### 设置webpack-dev-server\n要执行webpack-dev-server首先要使用npm下载\n`cnpm install webpack-dev-server –-save-dev`\n最简单的几项配置如下\n```\ndevServer:{\n  //设置基本目录结构\n  contentBase:path.resolve(__dirname,'dist'),\n  //服务器的IP地址，可以使用IP也可以使用localhost\n  host:'localhost',\n  //服务端压缩是否开启\n  compress:true,\n  //配置服务端口号\n  port:1717\n  proxy : [{\n      context: ['/admin'],\n      target: \"http://mcljp.com\",\n      changeOrigin : true\n  }]\n}\n```\n\n**contentBase**:配置服务器基本运行路径，用于找到程序打包地址\n**host**：服务运行地址，建议使用本机IP，这里为了讲解方便，所以用localhost\n**compress**：服务器端压缩选型，一般设置为开启，如果你对服务器压缩感兴趣，可以自行学习\n**port**：服务运行端口，建议不使用80，很容易被占用，这里使用了1717.\n**proxy** : 本地代理，可进行跨域\n\n开启热更新，你要是直接webpack-dev-server是不行的，需要在json文件下配置下scripts\n```\n\"scripts\": {\n    \"dev\":\"webpack-dev-server --open\"\n },\n//--open命令运行后自动打开浏览器进行浏览\n```\n配置好保存后，在终端里输入 npm  run  dev  就可以进行浏览了\n\n#### 四、配置模块\n>loaders是Webpack最重要的功能之一，通过使用不同的Loader，Webpack可以的脚本和工具，从而对不同的文件格式进行特定处理。\n**test**：用于匹配处理文件的扩展名的表达式，这个选项是必须进行配置的\n**use**：loader名称，就是你要使用模块的名称，这个选项也必须进行配置，否则报错\n**include/exclude**:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）\n**query**：为loaders提供额外的设置选项（可选）\n##### 打包css文件\n根目录下创建css文件，然后js文件require引入,npm安装style-loader，css-loader\n`cnpm install style-loader css-loader --save-dev`\n\nwebpack.config.js的modules修改为下\n```\nmodule:{\n  rules: [\n      {\n        test: /\\.css$/,\n        use: [ 'style-loader', 'css-loader' ]\n      }\n    ]\n}\n```\n\n##### 打包HTML文件\n打包html我们需要用上插件html-webpack-plugin，使用npm安装插件，并在头部引用\n```\nnpm install --save-dev html-webpack-plugin\nconst htmlPlugin= require('html-webpack-plugin');\n```\n\nhtml-webpack-pugin基本属性如下\n**title**: 用来生成页面的 title 元素filename: 输出的 HTML 文件名，默认是 index.html, 也可以直接配置带有子目录。 \n**template**: 模板文件路径，比如‘./index.html’， \n**favicon**: 添加特定的 favicon 路径到输出的 HTML 文件中。\n**minify**: {} | false , 传递 html-minifier 选项给 minify 输出hash: true | false, 如果为 true, 将添加一个唯一的 webpack 编译 hash 到所有包含的脚本和 CSS 文件，对于解除 cache 很有用。 \n**cache**: true | false，如果为 true, 这是默认值，仅仅在文件修改之后才会发布文件。 \n**showErrors**: true | false, 如果为 true, 这是默认值，错误信息会写入到 HTML 页面中chunks: 允许只添加某些块 (比如，仅仅 unit test 块) \n**chunksSortMode**: 允许控制块在添加到页面之前的排序方式，支持的值：'none' | 'default' | {function}-default:'auto' \n**excludeChunks**: 允许跳过某些块，(比如，跳过单元测试的块) \n**chunks**：chunks 默认会在生成的 html 文件中引用所有的 js 文件，当然你也可以指定引入哪些特定的文件。\n**根目录下创建index.html**\n```\nplugins:[\n  new htmlWebpackPlugin({\n      template    : 'index.html',\n      filename    : 'index.html',\n      title       : title,\n      inject      : true,\n      hash        : true,\n      chunks      : ['index']\n  }),\n]\n```\n终端进行打包，你就会发现html文件也被打包在我们的dist目录下了。\n\n##### 图片，字体打包\n要将图片和字体打包我们需要安装url-loader，首先进行安装\n`npm install --save-dev  url-loader`\n接下来进行配置\n```\ntest: /\\.(png|jpg|gif)/,\nuse: [{\n        loader: 'url-loader',\n        options: {\n                limit: 5000,\n                outputPath: 'resource/'\n            }\n }]\n```\n**limit** : 文件大小小于limit参数，url-loader将会把文件转为DataURL\n**outputPath** : 表示输出文件路径前缀。图片经过url-loader打包都会打包到指定的输出文件夹下。但是我们可以指定图片在输出文件夹下的路径。图片被打包时，就会在输出文件夹下新建（如果没有）一个名为resource的文件夹，把图片放到里面\n\n##### css单独打包\n安装后，config.js文件头部引用\n```\nnpm install --save-dev extract-text-webpack-plugin\nconst extractTextPlugin = require(\"extract-text-webpack-plugin\");\n```\n引入成功创建实例后需要在plugins属性中进行配置\n```\nconst extractTextPlugin = new extractTextPlugin(\"/css/index.css\")\n{\n      test: /\\.css$/,\n      use : extractTextPlugin.extract({\n               fallback: 'style-loader',\n               use: [\n                  { loader: 'css-loader' },\n               ]\n      })\n}\n```\n##### ES6转ES6\nBabel的安装与配置\n`cnpm install --save-dev babel-core babel-loader babel-preset-env babel-preset-react`\n在webpack中配置Babel的方法如下\n```\ntest:/\\.(jsx|js)$/,\nuse:{\n   loader:'babel-loader',\n},\nexclude:/node_modules/\n```\n需要在根目录下创建.babelrc文件\n```\n{\n    \"presets\":[\"react\",\"env\"]\n}\n```\n##### 打包第三方库，比如jQuery\n使用plugin全局引用\nProvidePlugin是一个webpack自带的插件，Provide的意思就是装备、提供。因为ProvidePlugin是webpack自带的插件，所以要先再webpack.config.js中引入webpack\n`const webpack = require('webpack')`\n引入成功后配置我们的plugins模块\n```\nplugins:[\n    new webpack.ProvidePlugin({\n        $:\"jquery\"\n    })\n],\n```\n一些杂货铺插件，可用可不用\n`new webpack.BannerPlugin('买菜的家朋版权所有')`\n```\n//抽离第三方库，单独打包，不易造成代码冗余\nnew webpack.optimize.CommonsChunkPlugin({\n    //name对应入口文件中的名字，我们起的是jQuery\n    name:['jquery'],\n    //把文件打包到哪里，是一个路径\n    filename:\"assets/js/[name].js\",\n    //最小打包的文件模块数，这里直接写2就好\n    minChunks:2\n}),\n```\n\n#### 补充：目前发现与之前3.x有两处不同\n\n1.webpack.optimize.CommonsChunkPlugin这个打包独立模块的插件已被抛弃更改为\n```\noptimization: { \n   splitChunks: {\n   name: 'common',\n   filename : 'js/base.js'\n   } \n }\n```\n2.css打包插件extractTextPlugin已不能进行webpack4.0的打包，需要更新\n```\ncnpm install --save-dev extract-text-webpack-plugin@next \n然后在打包就正常了\n\n\"devDependencies\": {\n    ...\n    \"extract-text-webpack-plugin\": \"^4.0.0-beta.0\",\n    ...\n}\n```\n\n\n","slug":"webpack4-x","published":1,"updated":"2020-06-26T03:18:29.666Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbvns73d0010igujimgp3og0","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p><strong> 之前一直使用3.x，这次学学4.x，看看跟之前有什么不同的地方没 </strong></p>\n<h4 id=\"什么是webpack？\"><a href=\"#什么是webpack？\" class=\"headerlink\" title=\"什么是webpack？\"></a>什么是webpack？</h4><blockquote>\n<p>webpack是一个打包工具，他的宗旨是一切静态资源即可打包。有人就会问为什么要webpack？webpack是现代前端技术的基石，常规的开发方式，比如jquery,html,css静态网页开发已经落后了。现在是MVVM的时代，数据驱动界面。webpack将现代js开发中的各种新型有用的技术，集合打包。</p>\n</blockquote>\n<h4 id=\"一、前端环境搭建\"><a href=\"#一、前端环境搭建\" class=\"headerlink\" title=\"一、前端环境搭建\"></a>一、前端环境搭建</h4><p>我们使用npm或yarn来安装webpack<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack webpack-cli -g </span><br><span class=\"line\">或者 </span><br><span class=\"line\">yarn global add webpack webpack-cli</span><br></pre></td></tr></table></figure></p>\n<p>在webpack3中，webpack本身和它的cli以前都是在同一个包中，第4版他们两者分开了,新建一个webpack的文件夹，webpack,初始化package.json并安装webpack-cli</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm init -y  //-y 默认所有的配置</span><br><span class=\"line\">cnpm i webpack webpack-cli --save-dev  //局部安装</span><br></pre></td></tr></table></figure>\n<h4 id=\"二、部署webpack\"><a href=\"#二、部署webpack\" class=\"headerlink\" title=\"二、部署webpack\"></a>二、部署webpack</h4><p>在上面搭建好的环境项目中，我们来到package.json里配置我们的scripts<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123; </span><br><span class=\"line\"> &quot;dist&quot; : &quot;node_modules/.bin/webpack -p&quot;   //使用cnpm  run dist 就可以打包我们的项目了</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"三、webpackp配置流程篇\"><a href=\"#三、webpackp配置流程篇\" class=\"headerlink\" title=\"三、webpackp配置流程篇\"></a>三、webpackp配置流程篇</h4><p>我们在开发是一般会打包src下的什么文件呢？</p>\n<ul>\n<li>发布时需要的html，css，js </li>\n<li>预编译器stylus，less，sass,es6的高级语法 </li>\n<li>图片字体资源.png，.gif，.ico，.jpg </li>\n<li>文件间的require别名@等修饰符等等</li>\n<li>webpack-dev-server以及跨域处理</li>\n<li>jQuery插件全局使用<br>通过这几点来讲解webpack中webpack.config.js的配置<br>首先在同目录下创建webpack.config.js文件，配置总览大概是这样<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports=&#123;</span><br><span class=\"line\">    //入口文件的配置项</span><br><span class=\"line\">    entry:&#123;&#125;,</span><br><span class=\"line\">    //出口文件的配置项</span><br><span class=\"line\">    output:&#123;&#125;,</span><br><span class=\"line\">    //模块：例如解读CSS,图片如何转换，压缩</span><br><span class=\"line\">    module:&#123;&#125;,</span><br><span class=\"line\">    //插件，用于生产模版和各项功能</span><br><span class=\"line\">    plugins:[],</span><br><span class=\"line\">    //配置webpack开发服务功能</span><br><span class=\"line\">    devServer:&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>entry</strong>：配置入口文件的地址，可以是单一入口，也可以是多入口。<br><strong>output</strong>：配置出口文件的地址，在webpack2.X版本后，支持多出口配置。<br><strong>module</strong>：配置模块，主要是解析CSS和图片转换压缩等功能。<br><strong>plugins</strong>：配置插件，根据你的需要配置不同功能的插件。<br><strong>devServer</strong>：配置开发服务功能。</p>\n<h5 id=\"首先是入口文件\"><a href=\"#首先是入口文件\" class=\"headerlink\" title=\"首先是入口文件\"></a>首先是入口文件</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: &apos;./index.js&apos;, </span><br><span class=\"line\">//可配置多入口文件</span><br><span class=\"line\">entry:&#123;</span><br><span class=\"line\">  &apos;index&apos; : &apos;./index.js&apos;,</span><br><span class=\"line\">  &apos;demo&apos;  : &apos;./demo.js&apos;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"output选项（出口配置）\"><a href=\"#output选项（出口配置）\" class=\"headerlink\" title=\"output选项（出口配置）\"></a>output选项（出口配置）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//出口文件的配置项</span><br><span class=\"line\">output:&#123;</span><br><span class=\"line\">    //打包的路径</span><br><span class=\"line\">    path:path.resolve(__dirname,&apos;dist&apos;),</span><br><span class=\"line\">    //打包后的引用路径</span><br><span class=\"line\">    publicPath: &apos;dist&apos;,</span><br><span class=\"line\">    //打包的文件名称</span><br><span class=\"line\">    filename:&apos;bundle.js&apos;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">//多入口情况下</span><br><span class=\"line\">output:&#123;</span><br><span class=\"line\">    //打包的路径</span><br><span class=\"line\">    path:path.resolve(__dirname,&apos;dist&apos;),</span><br><span class=\"line\">    //打包后的引用路径</span><br><span class=\"line\">    publicPath: &apos;dist&apos;,</span><br><span class=\"line\">    //打包的文件名称</span><br><span class=\"line\">    filename:&apos;js/[name].js&apos;    </span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">//[name]的意思是根据入口文件的名称，打包成相同的名称，有几个入口文件，就可以打包出几个文件。</span><br></pre></td></tr></table></figure>\n<p><strong>直接这样写是不对的，需要在头部引入path</strong><br><code>const path = require(&#39;path&#39;)</code><br>其中path.resolve(__dirname,’dist’)就是获取了项目的绝对路径。<br>接下来在根目录下创建index.js，然后运行node_modules/.bin/webpack<br>如果你是全局安装，直接webpack即可，此条命令针对局部安装</p>\n<h5 id=\"设置webpack-dev-server\"><a href=\"#设置webpack-dev-server\" class=\"headerlink\" title=\"设置webpack-dev-server\"></a>设置webpack-dev-server</h5><p>要执行webpack-dev-server首先要使用npm下载<br><code>cnpm install webpack-dev-server –-save-dev</code><br>最简单的几项配置如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer:&#123;</span><br><span class=\"line\">  //设置基本目录结构</span><br><span class=\"line\">  contentBase:path.resolve(__dirname,&apos;dist&apos;),</span><br><span class=\"line\">  //服务器的IP地址，可以使用IP也可以使用localhost</span><br><span class=\"line\">  host:&apos;localhost&apos;,</span><br><span class=\"line\">  //服务端压缩是否开启</span><br><span class=\"line\">  compress:true,</span><br><span class=\"line\">  //配置服务端口号</span><br><span class=\"line\">  port:1717</span><br><span class=\"line\">  proxy : [&#123;</span><br><span class=\"line\">      context: [&apos;/admin&apos;],</span><br><span class=\"line\">      target: &quot;http://mcljp.com&quot;,</span><br><span class=\"line\">      changeOrigin : true</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>contentBase</strong>:配置服务器基本运行路径，用于找到程序打包地址<br><strong>host</strong>：服务运行地址，建议使用本机IP，这里为了讲解方便，所以用localhost<br><strong>compress</strong>：服务器端压缩选型，一般设置为开启，如果你对服务器压缩感兴趣，可以自行学习<br><strong>port</strong>：服务运行端口，建议不使用80，很容易被占用，这里使用了1717.<br><strong>proxy</strong> : 本地代理，可进行跨域</p>\n<p>开启热更新，你要是直接webpack-dev-server是不行的，需要在json文件下配置下scripts<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;dev&quot;:&quot;webpack-dev-server --open&quot;</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\">//--open命令运行后自动打开浏览器进行浏览</span><br></pre></td></tr></table></figure></p>\n<p>配置好保存后，在终端里输入 npm  run  dev  就可以进行浏览了</p>\n<h4 id=\"四、配置模块\"><a href=\"#四、配置模块\" class=\"headerlink\" title=\"四、配置模块\"></a>四、配置模块</h4><blockquote>\n<p>loaders是Webpack最重要的功能之一，通过使用不同的Loader，Webpack可以的脚本和工具，从而对不同的文件格式进行特定处理。<br><strong>test</strong>：用于匹配处理文件的扩展名的表达式，这个选项是必须进行配置的<br><strong>use</strong>：loader名称，就是你要使用模块的名称，这个选项也必须进行配置，否则报错<br><strong>include/exclude</strong>:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）<br><strong>query</strong>：为loaders提供额外的设置选项（可选）</p>\n</blockquote>\n<h5 id=\"打包css文件\"><a href=\"#打包css文件\" class=\"headerlink\" title=\"打包css文件\"></a>打包css文件</h5><p>根目录下创建css文件，然后js文件require引入,npm安装style-loader，css-loader<br><code>cnpm install style-loader css-loader --save-dev</code></p>\n<p>webpack.config.js的modules修改为下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module:&#123;</span><br><span class=\"line\">  rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.css$/,</span><br><span class=\"line\">        use: [ &apos;style-loader&apos;, &apos;css-loader&apos; ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"打包HTML文件\"><a href=\"#打包HTML文件\" class=\"headerlink\" title=\"打包HTML文件\"></a>打包HTML文件</h5><p>打包html我们需要用上插件html-webpack-plugin，使用npm安装插件，并在头部引用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev html-webpack-plugin</span><br><span class=\"line\">const htmlPlugin= require(&apos;html-webpack-plugin&apos;);</span><br></pre></td></tr></table></figure></p>\n<p>html-webpack-pugin基本属性如下<br><strong>title</strong>: 用来生成页面的 title 元素filename: 输出的 HTML 文件名，默认是 index.html, 也可以直接配置带有子目录。<br><strong>template</strong>: 模板文件路径，比如‘./index.html’，<br><strong>favicon</strong>: 添加特定的 favicon 路径到输出的 HTML 文件中。<br><strong>minify</strong>: {} | false , 传递 html-minifier 选项给 minify 输出hash: true | false, 如果为 true, 将添加一个唯一的 webpack 编译 hash 到所有包含的脚本和 CSS 文件，对于解除 cache 很有用。<br><strong>cache</strong>: true | false，如果为 true, 这是默认值，仅仅在文件修改之后才会发布文件。<br><strong>showErrors</strong>: true | false, 如果为 true, 这是默认值，错误信息会写入到 HTML 页面中chunks: 允许只添加某些块 (比如，仅仅 unit test 块)<br><strong>chunksSortMode</strong>: 允许控制块在添加到页面之前的排序方式，支持的值：’none’ | ‘default’ | {function}-default:’auto’<br><strong>excludeChunks</strong>: 允许跳过某些块，(比如，跳过单元测试的块)<br><strong>chunks</strong>：chunks 默认会在生成的 html 文件中引用所有的 js 文件，当然你也可以指定引入哪些特定的文件。<br><strong>根目录下创建index.html</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins:[</span><br><span class=\"line\">  new htmlWebpackPlugin(&#123;</span><br><span class=\"line\">      template    : &apos;index.html&apos;,</span><br><span class=\"line\">      filename    : &apos;index.html&apos;,</span><br><span class=\"line\">      title       : title,</span><br><span class=\"line\">      inject      : true,</span><br><span class=\"line\">      hash        : true,</span><br><span class=\"line\">      chunks      : [&apos;index&apos;]</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>终端进行打包，你就会发现html文件也被打包在我们的dist目录下了。</p>\n<h5 id=\"图片，字体打包\"><a href=\"#图片，字体打包\" class=\"headerlink\" title=\"图片，字体打包\"></a>图片，字体打包</h5><p>要将图片和字体打包我们需要安装url-loader，首先进行安装<br><code>npm install --save-dev  url-loader</code><br>接下来进行配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test: /\\.(png|jpg|gif)/,</span><br><span class=\"line\">use: [&#123;</span><br><span class=\"line\">        loader: &apos;url-loader&apos;,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">                limit: 5000,</span><br><span class=\"line\">                outputPath: &apos;resource/&apos;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"> &#125;]</span><br></pre></td></tr></table></figure></p>\n<p><strong>limit</strong> : 文件大小小于limit参数，url-loader将会把文件转为DataURL<br><strong>outputPath</strong> : 表示输出文件路径前缀。图片经过url-loader打包都会打包到指定的输出文件夹下。但是我们可以指定图片在输出文件夹下的路径。图片被打包时，就会在输出文件夹下新建（如果没有）一个名为resource的文件夹，把图片放到里面</p>\n<h5 id=\"css单独打包\"><a href=\"#css单独打包\" class=\"headerlink\" title=\"css单独打包\"></a>css单独打包</h5><p>安装后，config.js文件头部引用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev extract-text-webpack-plugin</span><br><span class=\"line\">const extractTextPlugin = require(&quot;extract-text-webpack-plugin&quot;);</span><br></pre></td></tr></table></figure></p>\n<p>引入成功创建实例后需要在plugins属性中进行配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const extractTextPlugin = new extractTextPlugin(&quot;/css/index.css&quot;)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">      test: /\\.css$/,</span><br><span class=\"line\">      use : extractTextPlugin.extract(&#123;</span><br><span class=\"line\">               fallback: &apos;style-loader&apos;,</span><br><span class=\"line\">               use: [</span><br><span class=\"line\">                  &#123; loader: &apos;css-loader&apos; &#125;,</span><br><span class=\"line\">               ]</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"ES6转ES6\"><a href=\"#ES6转ES6\" class=\"headerlink\" title=\"ES6转ES6\"></a>ES6转ES6</h5><p>Babel的安装与配置<br><code>cnpm install --save-dev babel-core babel-loader babel-preset-env babel-preset-react</code><br>在webpack中配置Babel的方法如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test:/\\.(jsx|js)$/,</span><br><span class=\"line\">use:&#123;</span><br><span class=\"line\">   loader:&apos;babel-loader&apos;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">exclude:/node_modules/</span><br></pre></td></tr></table></figure></p>\n<p>需要在根目录下创建.babelrc文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;presets&quot;:[&quot;react&quot;,&quot;env&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"打包第三方库，比如jQuery\"><a href=\"#打包第三方库，比如jQuery\" class=\"headerlink\" title=\"打包第三方库，比如jQuery\"></a>打包第三方库，比如jQuery</h5><p>使用plugin全局引用<br>ProvidePlugin是一个webpack自带的插件，Provide的意思就是装备、提供。因为ProvidePlugin是webpack自带的插件，所以要先再webpack.config.js中引入webpack<br><code>const webpack = require(&#39;webpack&#39;)</code><br>引入成功后配置我们的plugins模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins:[</span><br><span class=\"line\">    new webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">        $:&quot;jquery&quot;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure></p>\n<p>一些杂货铺插件，可用可不用<br><code>new webpack.BannerPlugin(&#39;买菜的家朋版权所有&#39;)</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//抽离第三方库，单独打包，不易造成代码冗余</span><br><span class=\"line\">new webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">    //name对应入口文件中的名字，我们起的是jQuery</span><br><span class=\"line\">    name:[&apos;jquery&apos;],</span><br><span class=\"line\">    //把文件打包到哪里，是一个路径</span><br><span class=\"line\">    filename:&quot;assets/js/[name].js&quot;,</span><br><span class=\"line\">    //最小打包的文件模块数，这里直接写2就好</span><br><span class=\"line\">    minChunks:2</span><br><span class=\"line\">&#125;),</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"补充：目前发现与之前3-x有两处不同\"><a href=\"#补充：目前发现与之前3-x有两处不同\" class=\"headerlink\" title=\"补充：目前发现与之前3.x有两处不同\"></a>补充：目前发现与之前3.x有两处不同</h4><p>1.webpack.optimize.CommonsChunkPlugin这个打包独立模块的插件已被抛弃更改为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">optimization: &#123; </span><br><span class=\"line\">   splitChunks: &#123;</span><br><span class=\"line\">   name: &apos;common&apos;,</span><br><span class=\"line\">   filename : &apos;js/base.js&apos;</span><br><span class=\"line\">   &#125; </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.css打包插件extractTextPlugin已不能进行webpack4.0的打包，需要更新<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save-dev extract-text-webpack-plugin@next </span><br><span class=\"line\">然后在打包就正常了</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &quot;extract-text-webpack-plugin&quot;: &quot;^4.0.0-beta.0&quot;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong> 之前一直使用3.x，这次学学4.x，看看跟之前有什么不同的地方没 </strong></p>\n<h4 id=\"什么是webpack？\"><a href=\"#什么是webpack？\" class=\"headerlink\" title=\"什么是webpack？\"></a>什么是webpack？</h4><blockquote>\n<p>webpack是一个打包工具，他的宗旨是一切静态资源即可打包。有人就会问为什么要webpack？webpack是现代前端技术的基石，常规的开发方式，比如jquery,html,css静态网页开发已经落后了。现在是MVVM的时代，数据驱动界面。webpack将现代js开发中的各种新型有用的技术，集合打包。</p>\n</blockquote>\n<h4 id=\"一、前端环境搭建\"><a href=\"#一、前端环境搭建\" class=\"headerlink\" title=\"一、前端环境搭建\"></a>一、前端环境搭建</h4><p>我们使用npm或yarn来安装webpack<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack webpack-cli -g </span><br><span class=\"line\">或者 </span><br><span class=\"line\">yarn global add webpack webpack-cli</span><br></pre></td></tr></table></figure></p>\n<p>在webpack3中，webpack本身和它的cli以前都是在同一个包中，第4版他们两者分开了,新建一个webpack的文件夹，webpack,初始化package.json并安装webpack-cli</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm init -y  //-y 默认所有的配置</span><br><span class=\"line\">cnpm i webpack webpack-cli --save-dev  //局部安装</span><br></pre></td></tr></table></figure>\n<h4 id=\"二、部署webpack\"><a href=\"#二、部署webpack\" class=\"headerlink\" title=\"二、部署webpack\"></a>二、部署webpack</h4><p>在上面搭建好的环境项目中，我们来到package.json里配置我们的scripts<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123; </span><br><span class=\"line\"> &quot;dist&quot; : &quot;node_modules/.bin/webpack -p&quot;   //使用cnpm  run dist 就可以打包我们的项目了</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"三、webpackp配置流程篇\"><a href=\"#三、webpackp配置流程篇\" class=\"headerlink\" title=\"三、webpackp配置流程篇\"></a>三、webpackp配置流程篇</h4><p>我们在开发是一般会打包src下的什么文件呢？</p>\n<ul>\n<li>发布时需要的html，css，js </li>\n<li>预编译器stylus，less，sass,es6的高级语法 </li>\n<li>图片字体资源.png，.gif，.ico，.jpg </li>\n<li>文件间的require别名@等修饰符等等</li>\n<li>webpack-dev-server以及跨域处理</li>\n<li>jQuery插件全局使用<br>通过这几点来讲解webpack中webpack.config.js的配置<br>首先在同目录下创建webpack.config.js文件，配置总览大概是这样<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports=&#123;</span><br><span class=\"line\">    //入口文件的配置项</span><br><span class=\"line\">    entry:&#123;&#125;,</span><br><span class=\"line\">    //出口文件的配置项</span><br><span class=\"line\">    output:&#123;&#125;,</span><br><span class=\"line\">    //模块：例如解读CSS,图片如何转换，压缩</span><br><span class=\"line\">    module:&#123;&#125;,</span><br><span class=\"line\">    //插件，用于生产模版和各项功能</span><br><span class=\"line\">    plugins:[],</span><br><span class=\"line\">    //配置webpack开发服务功能</span><br><span class=\"line\">    devServer:&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>entry</strong>：配置入口文件的地址，可以是单一入口，也可以是多入口。<br><strong>output</strong>：配置出口文件的地址，在webpack2.X版本后，支持多出口配置。<br><strong>module</strong>：配置模块，主要是解析CSS和图片转换压缩等功能。<br><strong>plugins</strong>：配置插件，根据你的需要配置不同功能的插件。<br><strong>devServer</strong>：配置开发服务功能。</p>\n<h5 id=\"首先是入口文件\"><a href=\"#首先是入口文件\" class=\"headerlink\" title=\"首先是入口文件\"></a>首先是入口文件</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: &apos;./index.js&apos;, </span><br><span class=\"line\">//可配置多入口文件</span><br><span class=\"line\">entry:&#123;</span><br><span class=\"line\">  &apos;index&apos; : &apos;./index.js&apos;,</span><br><span class=\"line\">  &apos;demo&apos;  : &apos;./demo.js&apos;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"output选项（出口配置）\"><a href=\"#output选项（出口配置）\" class=\"headerlink\" title=\"output选项（出口配置）\"></a>output选项（出口配置）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//出口文件的配置项</span><br><span class=\"line\">output:&#123;</span><br><span class=\"line\">    //打包的路径</span><br><span class=\"line\">    path:path.resolve(__dirname,&apos;dist&apos;),</span><br><span class=\"line\">    //打包后的引用路径</span><br><span class=\"line\">    publicPath: &apos;dist&apos;,</span><br><span class=\"line\">    //打包的文件名称</span><br><span class=\"line\">    filename:&apos;bundle.js&apos;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">//多入口情况下</span><br><span class=\"line\">output:&#123;</span><br><span class=\"line\">    //打包的路径</span><br><span class=\"line\">    path:path.resolve(__dirname,&apos;dist&apos;),</span><br><span class=\"line\">    //打包后的引用路径</span><br><span class=\"line\">    publicPath: &apos;dist&apos;,</span><br><span class=\"line\">    //打包的文件名称</span><br><span class=\"line\">    filename:&apos;js/[name].js&apos;    </span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">//[name]的意思是根据入口文件的名称，打包成相同的名称，有几个入口文件，就可以打包出几个文件。</span><br></pre></td></tr></table></figure>\n<p><strong>直接这样写是不对的，需要在头部引入path</strong><br><code>const path = require(&#39;path&#39;)</code><br>其中path.resolve(__dirname,’dist’)就是获取了项目的绝对路径。<br>接下来在根目录下创建index.js，然后运行node_modules/.bin/webpack<br>如果你是全局安装，直接webpack即可，此条命令针对局部安装</p>\n<h5 id=\"设置webpack-dev-server\"><a href=\"#设置webpack-dev-server\" class=\"headerlink\" title=\"设置webpack-dev-server\"></a>设置webpack-dev-server</h5><p>要执行webpack-dev-server首先要使用npm下载<br><code>cnpm install webpack-dev-server –-save-dev</code><br>最简单的几项配置如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer:&#123;</span><br><span class=\"line\">  //设置基本目录结构</span><br><span class=\"line\">  contentBase:path.resolve(__dirname,&apos;dist&apos;),</span><br><span class=\"line\">  //服务器的IP地址，可以使用IP也可以使用localhost</span><br><span class=\"line\">  host:&apos;localhost&apos;,</span><br><span class=\"line\">  //服务端压缩是否开启</span><br><span class=\"line\">  compress:true,</span><br><span class=\"line\">  //配置服务端口号</span><br><span class=\"line\">  port:1717</span><br><span class=\"line\">  proxy : [&#123;</span><br><span class=\"line\">      context: [&apos;/admin&apos;],</span><br><span class=\"line\">      target: &quot;http://mcljp.com&quot;,</span><br><span class=\"line\">      changeOrigin : true</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>contentBase</strong>:配置服务器基本运行路径，用于找到程序打包地址<br><strong>host</strong>：服务运行地址，建议使用本机IP，这里为了讲解方便，所以用localhost<br><strong>compress</strong>：服务器端压缩选型，一般设置为开启，如果你对服务器压缩感兴趣，可以自行学习<br><strong>port</strong>：服务运行端口，建议不使用80，很容易被占用，这里使用了1717.<br><strong>proxy</strong> : 本地代理，可进行跨域</p>\n<p>开启热更新，你要是直接webpack-dev-server是不行的，需要在json文件下配置下scripts<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;dev&quot;:&quot;webpack-dev-server --open&quot;</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\">//--open命令运行后自动打开浏览器进行浏览</span><br></pre></td></tr></table></figure></p>\n<p>配置好保存后，在终端里输入 npm  run  dev  就可以进行浏览了</p>\n<h4 id=\"四、配置模块\"><a href=\"#四、配置模块\" class=\"headerlink\" title=\"四、配置模块\"></a>四、配置模块</h4><blockquote>\n<p>loaders是Webpack最重要的功能之一，通过使用不同的Loader，Webpack可以的脚本和工具，从而对不同的文件格式进行特定处理。<br><strong>test</strong>：用于匹配处理文件的扩展名的表达式，这个选项是必须进行配置的<br><strong>use</strong>：loader名称，就是你要使用模块的名称，这个选项也必须进行配置，否则报错<br><strong>include/exclude</strong>:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）<br><strong>query</strong>：为loaders提供额外的设置选项（可选）</p>\n</blockquote>\n<h5 id=\"打包css文件\"><a href=\"#打包css文件\" class=\"headerlink\" title=\"打包css文件\"></a>打包css文件</h5><p>根目录下创建css文件，然后js文件require引入,npm安装style-loader，css-loader<br><code>cnpm install style-loader css-loader --save-dev</code></p>\n<p>webpack.config.js的modules修改为下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module:&#123;</span><br><span class=\"line\">  rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.css$/,</span><br><span class=\"line\">        use: [ &apos;style-loader&apos;, &apos;css-loader&apos; ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"打包HTML文件\"><a href=\"#打包HTML文件\" class=\"headerlink\" title=\"打包HTML文件\"></a>打包HTML文件</h5><p>打包html我们需要用上插件html-webpack-plugin，使用npm安装插件，并在头部引用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev html-webpack-plugin</span><br><span class=\"line\">const htmlPlugin= require(&apos;html-webpack-plugin&apos;);</span><br></pre></td></tr></table></figure></p>\n<p>html-webpack-pugin基本属性如下<br><strong>title</strong>: 用来生成页面的 title 元素filename: 输出的 HTML 文件名，默认是 index.html, 也可以直接配置带有子目录。<br><strong>template</strong>: 模板文件路径，比如‘./index.html’，<br><strong>favicon</strong>: 添加特定的 favicon 路径到输出的 HTML 文件中。<br><strong>minify</strong>: {} | false , 传递 html-minifier 选项给 minify 输出hash: true | false, 如果为 true, 将添加一个唯一的 webpack 编译 hash 到所有包含的脚本和 CSS 文件，对于解除 cache 很有用。<br><strong>cache</strong>: true | false，如果为 true, 这是默认值，仅仅在文件修改之后才会发布文件。<br><strong>showErrors</strong>: true | false, 如果为 true, 这是默认值，错误信息会写入到 HTML 页面中chunks: 允许只添加某些块 (比如，仅仅 unit test 块)<br><strong>chunksSortMode</strong>: 允许控制块在添加到页面之前的排序方式，支持的值：’none’ | ‘default’ | {function}-default:’auto’<br><strong>excludeChunks</strong>: 允许跳过某些块，(比如，跳过单元测试的块)<br><strong>chunks</strong>：chunks 默认会在生成的 html 文件中引用所有的 js 文件，当然你也可以指定引入哪些特定的文件。<br><strong>根目录下创建index.html</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins:[</span><br><span class=\"line\">  new htmlWebpackPlugin(&#123;</span><br><span class=\"line\">      template    : &apos;index.html&apos;,</span><br><span class=\"line\">      filename    : &apos;index.html&apos;,</span><br><span class=\"line\">      title       : title,</span><br><span class=\"line\">      inject      : true,</span><br><span class=\"line\">      hash        : true,</span><br><span class=\"line\">      chunks      : [&apos;index&apos;]</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>终端进行打包，你就会发现html文件也被打包在我们的dist目录下了。</p>\n<h5 id=\"图片，字体打包\"><a href=\"#图片，字体打包\" class=\"headerlink\" title=\"图片，字体打包\"></a>图片，字体打包</h5><p>要将图片和字体打包我们需要安装url-loader，首先进行安装<br><code>npm install --save-dev  url-loader</code><br>接下来进行配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test: /\\.(png|jpg|gif)/,</span><br><span class=\"line\">use: [&#123;</span><br><span class=\"line\">        loader: &apos;url-loader&apos;,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">                limit: 5000,</span><br><span class=\"line\">                outputPath: &apos;resource/&apos;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"> &#125;]</span><br></pre></td></tr></table></figure></p>\n<p><strong>limit</strong> : 文件大小小于limit参数，url-loader将会把文件转为DataURL<br><strong>outputPath</strong> : 表示输出文件路径前缀。图片经过url-loader打包都会打包到指定的输出文件夹下。但是我们可以指定图片在输出文件夹下的路径。图片被打包时，就会在输出文件夹下新建（如果没有）一个名为resource的文件夹，把图片放到里面</p>\n<h5 id=\"css单独打包\"><a href=\"#css单独打包\" class=\"headerlink\" title=\"css单独打包\"></a>css单独打包</h5><p>安装后，config.js文件头部引用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev extract-text-webpack-plugin</span><br><span class=\"line\">const extractTextPlugin = require(&quot;extract-text-webpack-plugin&quot;);</span><br></pre></td></tr></table></figure></p>\n<p>引入成功创建实例后需要在plugins属性中进行配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const extractTextPlugin = new extractTextPlugin(&quot;/css/index.css&quot;)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">      test: /\\.css$/,</span><br><span class=\"line\">      use : extractTextPlugin.extract(&#123;</span><br><span class=\"line\">               fallback: &apos;style-loader&apos;,</span><br><span class=\"line\">               use: [</span><br><span class=\"line\">                  &#123; loader: &apos;css-loader&apos; &#125;,</span><br><span class=\"line\">               ]</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"ES6转ES6\"><a href=\"#ES6转ES6\" class=\"headerlink\" title=\"ES6转ES6\"></a>ES6转ES6</h5><p>Babel的安装与配置<br><code>cnpm install --save-dev babel-core babel-loader babel-preset-env babel-preset-react</code><br>在webpack中配置Babel的方法如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test:/\\.(jsx|js)$/,</span><br><span class=\"line\">use:&#123;</span><br><span class=\"line\">   loader:&apos;babel-loader&apos;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">exclude:/node_modules/</span><br></pre></td></tr></table></figure></p>\n<p>需要在根目录下创建.babelrc文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;presets&quot;:[&quot;react&quot;,&quot;env&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"打包第三方库，比如jQuery\"><a href=\"#打包第三方库，比如jQuery\" class=\"headerlink\" title=\"打包第三方库，比如jQuery\"></a>打包第三方库，比如jQuery</h5><p>使用plugin全局引用<br>ProvidePlugin是一个webpack自带的插件，Provide的意思就是装备、提供。因为ProvidePlugin是webpack自带的插件，所以要先再webpack.config.js中引入webpack<br><code>const webpack = require(&#39;webpack&#39;)</code><br>引入成功后配置我们的plugins模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins:[</span><br><span class=\"line\">    new webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">        $:&quot;jquery&quot;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure></p>\n<p>一些杂货铺插件，可用可不用<br><code>new webpack.BannerPlugin(&#39;买菜的家朋版权所有&#39;)</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//抽离第三方库，单独打包，不易造成代码冗余</span><br><span class=\"line\">new webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">    //name对应入口文件中的名字，我们起的是jQuery</span><br><span class=\"line\">    name:[&apos;jquery&apos;],</span><br><span class=\"line\">    //把文件打包到哪里，是一个路径</span><br><span class=\"line\">    filename:&quot;assets/js/[name].js&quot;,</span><br><span class=\"line\">    //最小打包的文件模块数，这里直接写2就好</span><br><span class=\"line\">    minChunks:2</span><br><span class=\"line\">&#125;),</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"补充：目前发现与之前3-x有两处不同\"><a href=\"#补充：目前发现与之前3-x有两处不同\" class=\"headerlink\" title=\"补充：目前发现与之前3.x有两处不同\"></a>补充：目前发现与之前3.x有两处不同</h4><p>1.webpack.optimize.CommonsChunkPlugin这个打包独立模块的插件已被抛弃更改为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">optimization: &#123; </span><br><span class=\"line\">   splitChunks: &#123;</span><br><span class=\"line\">   name: &apos;common&apos;,</span><br><span class=\"line\">   filename : &apos;js/base.js&apos;</span><br><span class=\"line\">   &#125; </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.css打包插件extractTextPlugin已不能进行webpack4.0的打包，需要更新<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save-dev extract-text-webpack-plugin@next </span><br><span class=\"line\">然后在打包就正常了</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &quot;extract-text-webpack-plugin&quot;: &quot;^4.0.0-beta.0&quot;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"获取滚动条宽度","date":"2019-10-12T06:02:24.000Z","_content":"\n```\nlet scrollBarWidth;\n\nexport default function () {\n  if (scrollBarWidth !== undefined) return scrollBarWidth;\n  const outer = document.createElement('div');\n  outer.style.visibility = 'hidden';\n  outer.style.width = '100px';\n  outer.style.position = 'absolute';\n  outer.style.top = '-9999px';\n  document.body.appendChild(outer);\n\n  const widthNoScroll = outer.offsetWidth;\n  outer.style.overflow = 'scroll';\n\n  const inner = document.createElement('div');\n  inner.style.width = '100%';\n  outer.appendChild(inner);\n\n  const widthWithScroll = inner.offsetWidth;\n  outer.parentNode.removeChild(outer);\n  scrollBarWidth = (widthNoScroll - widthWithScroll) / (window.devicePixelRatio || 2);\n  return scrollBarWidth\n}\n```\n\n#### 实现弹窗背景固定方法\n\n```\nlet top = 0\n\nexport function lock(isFixed = true) {\n  let bodyEl = document.body\n  console.log(ScrollBarWidth())\n  if (isFixed) {\n    top = window.scrollY\n\n    bodyEl.style.position = 'fixed'\n    bodyEl.style.top = `-${top}px`\n    bodyEl.style.right = `${ScrollBarWidth()}px`\n  } else {\n    bodyEl.style.position = ''\n    bodyEl.style.right = ''\n    bodyEl.style.top = ''\n\n    window.scrollTo(0, top) // 回到原先的top\n  }\n}\n```\n","source":"_posts/获取滚动条宽度.md","raw":"---\ntitle: 获取滚动条宽度\ndate: 2019-10-12 14:02:24\ntags:\n---\n\n```\nlet scrollBarWidth;\n\nexport default function () {\n  if (scrollBarWidth !== undefined) return scrollBarWidth;\n  const outer = document.createElement('div');\n  outer.style.visibility = 'hidden';\n  outer.style.width = '100px';\n  outer.style.position = 'absolute';\n  outer.style.top = '-9999px';\n  document.body.appendChild(outer);\n\n  const widthNoScroll = outer.offsetWidth;\n  outer.style.overflow = 'scroll';\n\n  const inner = document.createElement('div');\n  inner.style.width = '100%';\n  outer.appendChild(inner);\n\n  const widthWithScroll = inner.offsetWidth;\n  outer.parentNode.removeChild(outer);\n  scrollBarWidth = (widthNoScroll - widthWithScroll) / (window.devicePixelRatio || 2);\n  return scrollBarWidth\n}\n```\n\n#### 实现弹窗背景固定方法\n\n```\nlet top = 0\n\nexport function lock(isFixed = true) {\n  let bodyEl = document.body\n  console.log(ScrollBarWidth())\n  if (isFixed) {\n    top = window.scrollY\n\n    bodyEl.style.position = 'fixed'\n    bodyEl.style.top = `-${top}px`\n    bodyEl.style.right = `${ScrollBarWidth()}px`\n  } else {\n    bodyEl.style.position = ''\n    bodyEl.style.right = ''\n    bodyEl.style.top = ''\n\n    window.scrollTo(0, top) // 回到原先的top\n  }\n}\n```\n","slug":"获取滚动条宽度","published":1,"updated":"2020-06-26T03:18:29.667Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbvns73e0013igujw58fvmia","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let scrollBarWidth;</span><br><span class=\"line\"></span><br><span class=\"line\">export default function () &#123;</span><br><span class=\"line\">  if (scrollBarWidth !== undefined) return scrollBarWidth;</span><br><span class=\"line\">  const outer = document.createElement(&apos;div&apos;);</span><br><span class=\"line\">  outer.style.visibility = &apos;hidden&apos;;</span><br><span class=\"line\">  outer.style.width = &apos;100px&apos;;</span><br><span class=\"line\">  outer.style.position = &apos;absolute&apos;;</span><br><span class=\"line\">  outer.style.top = &apos;-9999px&apos;;</span><br><span class=\"line\">  document.body.appendChild(outer);</span><br><span class=\"line\"></span><br><span class=\"line\">  const widthNoScroll = outer.offsetWidth;</span><br><span class=\"line\">  outer.style.overflow = &apos;scroll&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">  const inner = document.createElement(&apos;div&apos;);</span><br><span class=\"line\">  inner.style.width = &apos;100%&apos;;</span><br><span class=\"line\">  outer.appendChild(inner);</span><br><span class=\"line\"></span><br><span class=\"line\">  const widthWithScroll = inner.offsetWidth;</span><br><span class=\"line\">  outer.parentNode.removeChild(outer);</span><br><span class=\"line\">  scrollBarWidth = (widthNoScroll - widthWithScroll) / (window.devicePixelRatio || 2);</span><br><span class=\"line\">  return scrollBarWidth</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"实现弹窗背景固定方法\"><a href=\"#实现弹窗背景固定方法\" class=\"headerlink\" title=\"实现弹窗背景固定方法\"></a>实现弹窗背景固定方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let top = 0</span><br><span class=\"line\"></span><br><span class=\"line\">export function lock(isFixed = true) &#123;</span><br><span class=\"line\">  let bodyEl = document.body</span><br><span class=\"line\">  console.log(ScrollBarWidth())</span><br><span class=\"line\">  if (isFixed) &#123;</span><br><span class=\"line\">    top = window.scrollY</span><br><span class=\"line\"></span><br><span class=\"line\">    bodyEl.style.position = &apos;fixed&apos;</span><br><span class=\"line\">    bodyEl.style.top = `-$&#123;top&#125;px`</span><br><span class=\"line\">    bodyEl.style.right = `$&#123;ScrollBarWidth()&#125;px`</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    bodyEl.style.position = &apos;&apos;</span><br><span class=\"line\">    bodyEl.style.right = &apos;&apos;</span><br><span class=\"line\">    bodyEl.style.top = &apos;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    window.scrollTo(0, top) // 回到原先的top</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let scrollBarWidth;</span><br><span class=\"line\"></span><br><span class=\"line\">export default function () &#123;</span><br><span class=\"line\">  if (scrollBarWidth !== undefined) return scrollBarWidth;</span><br><span class=\"line\">  const outer = document.createElement(&apos;div&apos;);</span><br><span class=\"line\">  outer.style.visibility = &apos;hidden&apos;;</span><br><span class=\"line\">  outer.style.width = &apos;100px&apos;;</span><br><span class=\"line\">  outer.style.position = &apos;absolute&apos;;</span><br><span class=\"line\">  outer.style.top = &apos;-9999px&apos;;</span><br><span class=\"line\">  document.body.appendChild(outer);</span><br><span class=\"line\"></span><br><span class=\"line\">  const widthNoScroll = outer.offsetWidth;</span><br><span class=\"line\">  outer.style.overflow = &apos;scroll&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">  const inner = document.createElement(&apos;div&apos;);</span><br><span class=\"line\">  inner.style.width = &apos;100%&apos;;</span><br><span class=\"line\">  outer.appendChild(inner);</span><br><span class=\"line\"></span><br><span class=\"line\">  const widthWithScroll = inner.offsetWidth;</span><br><span class=\"line\">  outer.parentNode.removeChild(outer);</span><br><span class=\"line\">  scrollBarWidth = (widthNoScroll - widthWithScroll) / (window.devicePixelRatio || 2);</span><br><span class=\"line\">  return scrollBarWidth</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"实现弹窗背景固定方法\"><a href=\"#实现弹窗背景固定方法\" class=\"headerlink\" title=\"实现弹窗背景固定方法\"></a>实现弹窗背景固定方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let top = 0</span><br><span class=\"line\"></span><br><span class=\"line\">export function lock(isFixed = true) &#123;</span><br><span class=\"line\">  let bodyEl = document.body</span><br><span class=\"line\">  console.log(ScrollBarWidth())</span><br><span class=\"line\">  if (isFixed) &#123;</span><br><span class=\"line\">    top = window.scrollY</span><br><span class=\"line\"></span><br><span class=\"line\">    bodyEl.style.position = &apos;fixed&apos;</span><br><span class=\"line\">    bodyEl.style.top = `-$&#123;top&#125;px`</span><br><span class=\"line\">    bodyEl.style.right = `$&#123;ScrollBarWidth()&#125;px`</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    bodyEl.style.position = &apos;&apos;</span><br><span class=\"line\">    bodyEl.style.right = &apos;&apos;</span><br><span class=\"line\">    bodyEl.style.top = &apos;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    window.scrollTo(0, top) // 回到原先的top</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[{"_id":"source/_posts/2019/tu.jpg","slug":"tu.jpg","post":"ckbvns7250000igujmapg40s9","modified":0,"renderable":0},{"_id":"source/_posts/Interview/z.png","slug":"z.png","post":"ckbvns72k0006igujozzsoo5l","modified":0,"renderable":0},{"_id":"source/_posts/React-Redux学习挖坑/console.png","slug":"console.png","post":"ckbvns72g0005iguj4plt2h7b","modified":0,"renderable":0},{"_id":"source/_posts/React-Redux学习挖坑/redux.png","slug":"redux.png","post":"ckbvns72g0005iguj4plt2h7b","modified":0,"renderable":0},{"_id":"source/_posts/jenkins/action.png","slug":"action.png","post":"ckbvns72z000figujh3oak20z","modified":0,"renderable":0},{"_id":"source/_posts/jenkins/success.png","slug":"success.png","post":"ckbvns72z000figujh3oak20z","modified":0,"renderable":0},{"_id":"source/_posts/shop/a.png","slug":"a.png","post":"ckbvns736000oigujwnzemnkf","modified":0,"renderable":0},{"_id":"source/_posts/shop/bei.png","slug":"bei.png","post":"ckbvns736000oigujwnzemnkf","modified":0,"renderable":0},{"_id":"source/_posts/shop/guo.png","slug":"guo.png","post":"ckbvns736000oigujwnzemnkf","modified":0,"renderable":0},{"_id":"source/_posts/shop/kao.png","slug":"kao.png","post":"ckbvns736000oigujwnzemnkf","modified":0,"renderable":0},{"_id":"source/_posts/shop/lan.png","slug":"lan.png","post":"ckbvns736000oigujwnzemnkf","modified":0,"renderable":0},{"_id":"source/_posts/shop/mian.png","slug":"mian.png","post":"ckbvns736000oigujwnzemnkf","modified":0,"renderable":0},{"_id":"source/_posts/shop/shop.png","slug":"shop.png","post":"ckbvns736000oigujwnzemnkf","modified":0,"renderable":0},{"_id":"source/_posts/shop/t.png","slug":"t.png","post":"ckbvns736000oigujwnzemnkf","modified":0,"renderable":0},{"_id":"source/_posts/shop/yi1.png","slug":"yi1.png","post":"ckbvns736000oigujwnzemnkf","modified":0,"renderable":0},{"_id":"source/_posts/shop/yi2.png","slug":"yi2.png","post":"ckbvns736000oigujwnzemnkf","modified":0,"renderable":0},{"_id":"source/_posts/shop/yi3.png","slug":"yi3.png","post":"ckbvns736000oigujwnzemnkf","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"ckbvns7250000igujmapg40s9","tag_id":"ckbvns72e0004iguj22ut3s0n","_id":"ckbvns72q0009igujze95vr15"},{"post_id":"ckbvns72b0002igujfynztf6h","tag_id":"ckbvns72p0008iguj8obfu75h","_id":"ckbvns72y000eigujbq6nq8ff"},{"post_id":"ckbvns72g0005iguj4plt2h7b","tag_id":"ckbvns72v000cigujn5jz1jfx","_id":"ckbvns733000iigujr0ukbnhv"},{"post_id":"ckbvns72z000figujh3oak20z","tag_id":"ckbvns72p0008iguj8obfu75h","_id":"ckbvns734000kigujtg5lrekl"},{"post_id":"ckbvns732000higuj6mjdepmm","tag_id":"ckbvns72p0008iguj8obfu75h","_id":"ckbvns736000nigujjd21aa5c"},{"post_id":"ckbvns72k0006igujozzsoo5l","tag_id":"ckbvns72p0008iguj8obfu75h","_id":"ckbvns737000piguj1s1myzby"},{"post_id":"ckbvns735000migujdr91a1u6","tag_id":"ckbvns72p0008iguj8obfu75h","_id":"ckbvns738000sigujnwtd1ri8"},{"post_id":"ckbvns72o0007iguj4ad2m384","tag_id":"ckbvns72p0008iguj8obfu75h","_id":"ckbvns73a000uigujsozh6cmu"},{"post_id":"ckbvns738000rigujeb8o8elp","tag_id":"ckbvns72p0008iguj8obfu75h","_id":"ckbvns73b000xiguj5nx00c3r"},{"post_id":"ckbvns72r000aigujkw53mj6t","tag_id":"ckbvns737000qiguj4twq24tb","_id":"ckbvns73c000ziguj6ee8c2ds"},{"post_id":"ckbvns73a000wigujh9npbh53","tag_id":"ckbvns72p0008iguj8obfu75h","_id":"ckbvns73e0012igujfxlavu2f"},{"post_id":"ckbvns72t000biguj1mje1icg","tag_id":"ckbvns73a000vigujm5bi6wsi","_id":"ckbvns73f0014igujshfn68aw"},{"post_id":"ckbvns733000jiguj2d5295bw","tag_id":"ckbvns73d0011igujedi3pwoj","_id":"ckbvns73g0016igujwxjneb3q"},{"post_id":"ckbvns736000oigujwnzemnkf","tag_id":"ckbvns73f0015igujkox8yz49","_id":"ckbvns73h0018igujz30mblbe"},{"post_id":"ckbvns739000tigujgrzm8wcy","tag_id":"ckbvns73d0011igujedi3pwoj","_id":"ckbvns73i001aigujtgfjct7b"},{"post_id":"ckbvns73b000yiguj7n8n4t21","tag_id":"ckbvns73d0011igujedi3pwoj","_id":"ckbvns73i001cigujlzf0jpm4"},{"post_id":"ckbvns73d0010igujimgp3og0","tag_id":"ckbvns73i001bigujooa8dgyc","_id":"ckbvns73i001diguj0xd1giox"}],"Tag":[{"name":"about","_id":"ckbvns72e0004iguj22ut3s0n"},{"name":"JS","_id":"ckbvns72p0008iguj8obfu75h"},{"name":"React","_id":"ckbvns72v000cigujn5jz1jfx"},{"name":"express","_id":"ckbvns737000qiguj4twq24tb"},{"name":"git","_id":"ckbvns73a000vigujm5bi6wsi"},{"name":"JavaScript","_id":"ckbvns73d0011igujedi3pwoj"},{"name":"Life","_id":"ckbvns73f0015igujkox8yz49"},{"name":"webpack","_id":"ckbvns73i001bigujooa8dgyc"}]}}