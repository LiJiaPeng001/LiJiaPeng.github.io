<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>获取滚动条宽度</title>
      <link href="/2019/10/12/%E8%8E%B7%E5%8F%96%E6%BB%9A%E5%8A%A8%E6%9D%A1%E5%AE%BD%E5%BA%A6/"/>
      <url>/2019/10/12/%E8%8E%B7%E5%8F%96%E6%BB%9A%E5%8A%A8%E6%9D%A1%E5%AE%BD%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">let scrollBarWidth;</span><br><span class="line"></span><br><span class="line">export default function () &#123;</span><br><span class="line">  if (scrollBarWidth !== undefined) return scrollBarWidth;</span><br><span class="line">  const outer = document.createElement(&apos;div&apos;);</span><br><span class="line">  outer.style.visibility = &apos;hidden&apos;;</span><br><span class="line">  outer.style.width = &apos;100px&apos;;</span><br><span class="line">  outer.style.position = &apos;absolute&apos;;</span><br><span class="line">  outer.style.top = &apos;-9999px&apos;;</span><br><span class="line">  document.body.appendChild(outer);</span><br><span class="line"></span><br><span class="line">  const widthNoScroll = outer.offsetWidth;</span><br><span class="line">  outer.style.overflow = &apos;scroll&apos;;</span><br><span class="line"></span><br><span class="line">  const inner = document.createElement(&apos;div&apos;);</span><br><span class="line">  inner.style.width = &apos;100%&apos;;</span><br><span class="line">  outer.appendChild(inner);</span><br><span class="line"></span><br><span class="line">  const widthWithScroll = inner.offsetWidth;</span><br><span class="line">  outer.parentNode.removeChild(outer);</span><br><span class="line">  scrollBarWidth = (widthNoScroll - widthWithScroll) / (window.devicePixelRatio || 2);</span><br><span class="line">  return scrollBarWidth</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现弹窗背景固定方法"><a href="#实现弹窗背景固定方法" class="headerlink" title="实现弹窗背景固定方法"></a>实现弹窗背景固定方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">let top = 0</span><br><span class="line"></span><br><span class="line">export function lock(isFixed = true) &#123;</span><br><span class="line">  let bodyEl = document.body</span><br><span class="line">  console.log(ScrollBarWidth())</span><br><span class="line">  if (isFixed) &#123;</span><br><span class="line">    top = window.scrollY</span><br><span class="line"></span><br><span class="line">    bodyEl.style.position = &apos;fixed&apos;</span><br><span class="line">    bodyEl.style.top = `-$&#123;top&#125;px`</span><br><span class="line">    bodyEl.style.right = `$&#123;ScrollBarWidth()&#125;px`</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    bodyEl.style.position = &apos;&apos;</span><br><span class="line">    bodyEl.style.right = &apos;&apos;</span><br><span class="line">    bodyEl.style.top = &apos;&apos;</span><br><span class="line"></span><br><span class="line">    window.scrollTo(0, top) // 回到原先的top</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>html</title>
      <link href="/2019/07/15/html/"/>
      <url>/2019/07/15/html/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="超出行隐藏"><a href="#超出行隐藏" class="headerlink" title="超出行隐藏"></a>超出行隐藏</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">overflow:hidden;</span><br><span class="line">text-overflow:ellipsis;</span><br><span class="line">display:-webkit-box;</span><br><span class="line">-webkit-box-orient:vertical;</span><br><span class="line">-webkit-line-clamp:2;   参数可为任意行数</span><br></pre></td></tr></table></figure><h4 id="实现一个-compose"><a href="#实现一个-compose" class="headerlink" title="实现一个 compose"></a>实现一个 compose</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function compose(...fns) &#123;</span><br><span class="line">      return function (x) &#123;</span><br><span class="line">        return fns.reduce(function (arg, fn) &#123;</span><br><span class="line">          return fn(arg);</span><br><span class="line">        &#125;, x)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    function a(num) &#123;</span><br><span class="line">      return num + 5</span><br><span class="line">    &#125;</span><br><span class="line">    function b(num) &#123;</span><br><span class="line">      return num + 2</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(compose(a, b)(5))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>copy</title>
      <link href="/2019/06/05/copy/"/>
      <url>/2019/06/05/copy/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">function copyTextToClipboard(text) &#123;</span><br><span class="line">    var textArea = document.createElement(&quot;textarea&quot;)</span><br><span class="line"></span><br><span class="line">    textArea.style.position = &apos;fixed&apos;</span><br><span class="line">    textArea.style.top = 0</span><br><span class="line">    textArea.style.left = 0</span><br><span class="line">    textArea.style.width = &apos;2em&apos;</span><br><span class="line">    textArea.style.height = &apos;2em&apos;</span><br><span class="line">    textArea.style.padding = 0</span><br><span class="line">    textArea.style.border = &apos;none&apos;</span><br><span class="line">    textArea.style.outline = &apos;none&apos;</span><br><span class="line">    textArea.style.boxShadow = &apos;none&apos;</span><br><span class="line">    textArea.style.background = &apos;transparent&apos;</span><br><span class="line">    textArea.value = text</span><br><span class="line"></span><br><span class="line">    document.body.appendChild(textArea)</span><br><span class="line"></span><br><span class="line">    textArea.select()</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">      var msg = document.execCommand(&apos;copy&apos;) ? &apos;成功&apos; : &apos;失败&apos;</span><br><span class="line">      alert(&apos;复制内容 &apos; + msg);</span><br><span class="line">    &#125; catch (err) &#123;</span><br><span class="line">      alert(&apos;不能使用这种方法复制内容&apos;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    document.body.removeChild(textArea)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="copyTextToClipboard-‘新垣结衣’"><a href="#copyTextToClipboard-‘新垣结衣’" class="headerlink" title="copyTextToClipboard(‘新垣结衣’)"></a>copyTextToClipboard(‘新垣结衣’)</h4>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题收集</title>
      <link href="/2019/02/20/Interview/"/>
      <url>/2019/02/20/Interview/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>想必大家很厌烦笔试，因为脑海中都是一些分散的知识点，无法关联成网，一直处于时曾相识的状态。不知道多少人和我一样，至今每次写阻止冒泡都需要百度一番如何拼写。</p></blockquote><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><h4 id="1-盒模型"><a href="#1-盒模型" class="headerlink" title="1.盒模型"></a>1.盒模型</h4><p>页面渲染时，dom 元素所采用的布局模型。可通过 box-sizing 进行设置。根据计算宽高的区域可分为：</p><ul><li>content-box (W3C 标准盒模型,在宽度和高度之外绘制元素的内边距和边框)</li><li>border-box (为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制)</li><li>inherit (从父元素继承 box-sizing 属性的值)</li></ul><h4 id="2-层叠上下文"><a href="#2-层叠上下文" class="headerlink" title="2.层叠上下文"></a>2.层叠上下文</h4><ul><li>z-index 属性值并不是在任何元素上都有效果。它仅在定位元素（定义了 position 属性，且属性值为非 static 值的元素）上有效果</li><li>判断元素在 Z 轴上的堆叠顺序，不仅仅是直接比较两个元素的 z-index 值的大小，这个堆叠顺序实际由元素的层叠上下文、层叠等级共同决定。<br><img src="/2019/02/20/Interview/z.png" alt="z"><br>层叠上下文通俗的讲就是，两个父元素各自有一个子元素，子元素全部设置有 position 和 z-index，那么这时候因为父元素没有设置 z-index，所以没有产生上下文，此时 z-index 谁大谁就在上面,如果两个父元素同时设置了 z-index,就算你其中子元素的 z-index 设置了 99999 也没用，因为你的父元素所产生的层叠上下文比别人的小，也就是 z-index。</li></ul><h4 id="3-居中布局"><a href="#3-居中布局" class="headerlink" title="3.居中布局"></a>3.居中布局</h4><p>水平居中</p><ul><li>行内元素: text-align:center</li><li>块级元素: margin:0 auto</li><li>absolute+transform（position: absolute;top: 50%;left: 50%;transform: translate(-50%, -50%);）</li><li>flex+justify-content:center</li></ul><p>垂直居中</p><ul><li>line-height:height</li><li>absolute+transform</li><li>flex+align-items:center</li><li>display: table-cell</li></ul><p>水平垂直居中</p><ul><li>absolute+transform</li><li>flex+justify-content+align-items</li></ul><h4 id="4-选择器优先级"><a href="#4-选择器优先级" class="headerlink" title="4.选择器优先级"></a>4.选择器优先级</h4><ul><li>!important &gt; 行内样式 &gt; #id &gt; .class &gt; tag &gt; * &gt; 继承 &gt; 默认</li><li>选择器从右往左解析</li></ul><h4 id="5-去除浮动影响，防止父级高度塌陷"><a href="#5-去除浮动影响，防止父级高度塌陷" class="headerlink" title="5.去除浮动影响，防止父级高度塌陷"></a>5.去除浮动影响，防止父级高度塌陷</h4><ul><li>通过增加尾元素清除浮动(::after{content:’’;clear:both;display:block;})</li><li>父级设置高度</li><li>父元素设置 overflow:hidden;</li></ul><h3 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h3><h4 id="1-原型-构造函数-实例"><a href="#1-原型-构造函数-实例" class="headerlink" title="1.原型 / 构造函数 / 实例"></a>1.原型 / 构造函数 / 实例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">原型(prototype):一个简单的对象，用于实现对象的属性继承。可以简单的理解成对象的爹。在Firefox和Chrome中，</span><br><span class="line">每个JavaScript对象中都包含一个 __proto__(非标准)的属性指向它爹(该对象的原型)，可obj.__proto__进行访问。</span><br><span class="line">构造函数:可以通过new来新建一个对象的函数。</span><br><span class="line">实例: 通过构造函数和new创建出来的对象，便是实例,实例通过 __proto__指向原型，通过constructor指向构造函数。</span><br><span class="line">实例.__proto__ === 原型</span><br><span class="line">原型.constructor === 构造函数</span><br><span class="line">构造函数.prototype === 原型</span><br><span class="line">原型.constructorr === 构造函数</span><br></pre></td></tr></table></figure><h4 id="2-原型链"><a href="#2-原型链" class="headerlink" title="2.原型链"></a>2.原型链</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">原型链是由原型对象组成，每个对象都有__proto__属性，指向了创建该对象的构造函数的原型，</span><br><span class="line">__proto__将对象连接起来组成了原型链。是一个用来实现继承和共享属性的有限的对象链。</span><br><span class="line">具体还是去这个网站吧https://www.jianshu.com/p/dee9f8b14771</span><br></pre></td></tr></table></figure><h4 id="3-作用域"><a href="#3-作用域" class="headerlink" title="3.作用域"></a>3.作用域</h4><p>作用域其实可理解为该上下文中声明的变量和声明的作用范围。可分为块级作用域和函数作用域</p><ul><li>声明提前: 一个声明在函数体内都是可见的, 函数优先于变量</li><li>非匿名自执行函数，函数变量为只读状态，无法修改</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const foo = 1</span><br><span class="line">(function foo() &#123;</span><br><span class="line">    foo = 10 // 由于foo在函数中只为可读，因此赋值无效</span><br><span class="line">    console.log(foo)</span><br><span class="line">&#125;())</span><br><span class="line">// 结果打印：  ƒ foo() &#123; foo = 10 ; console.log(foo) &#125;</span><br></pre></td></tr></table></figure><h4 id="4-作用域链"><a href="#4-作用域链" class="headerlink" title="4.作用域链"></a>4.作用域链</h4><p>我们可以在执行上下文中访问到父级甚至全局的变量，这便是作用域链的功劳。作用域链可以理解为一组对象列表，包含父级和自身的变量对象，因此我们便能通过作用域链访问到父级里声明的变量或者函数。</p><h4 id="5-闭包"><a href="#5-闭包" class="headerlink" title="5.闭包"></a>5.闭包</h4><p>闭包属于一种特殊的作用域，称为静态作用域。它的定义可以理解为: 父函数被销毁 的情况下，返回出的子函数仍然保留着父级的单变量对象和作用域链，因此可以继续访问到父级的变量对象，这样的函数称为闭包。<br>闭包也会产生一个问题：</p><ul><li>多个子函数都是同时指向父级，是完全共享的。因此当父级的变量对象被修改时，所有子函数都受到影响。<br>解决方法：</li><li>变量可以通过函数参数的形式传入</li><li>使用块级作用域，让变量成为自己上下文的属性，避免共享</li></ul><h4 id="6-对象的拷贝"><a href="#6-对象的拷贝" class="headerlink" title="6.对象的拷贝"></a>6.对象的拷贝</h4><p>浅拷贝: 以赋值的形式拷贝引用对象，仍指向同一个地址，修改时原对象也会受到影响</p><ul><li>Object.assign</li><li>…扩展运算符<br>深拷贝: 完全拷贝一个新对象，修改时原对象不再受到任何影响</li><li>当值为函数或 undefined 时，无法拷贝</li><li>JSON.parse(JSON.stringify(obj)): 性能最快</li><li>递归进行逐一赋值</li></ul><h4 id="7-new-运算符的执行过程"><a href="#7-new-运算符的执行过程" class="headerlink" title="7.new 运算符的执行过程"></a>7.new 运算符的执行过程</h4><ul><li>新生成一个对象</li><li>链接到原型 prototype</li><li>绑定 this</li><li>返回新对象</li></ul><h4 id="8-代码的复用"><a href="#8-代码的复用" class="headerlink" title="8.代码的复用"></a>8.代码的复用</h4><ul><li>函数封装</li><li>继承</li><li>混入 mixin 模式（感觉和继承差不多鸭）</li><li>借用 apply/call</li></ul><h4 id="9-继承"><a href="#9-继承" class="headerlink" title="9.继承"></a>9.继承</h4><p>在 JS 中，继承通常指的便是原型链继承，也就是通过指定原型，并可以通过原型链继承原型上的属性或者方法。</p><ul><li>使用 ES6 的语法糖 class/extends</li></ul><h4 id="10-类型转换"><a href="#10-类型转换" class="headerlink" title="10.类型转换"></a>10.类型转换</h4><p>在 JS 中在使用运算符号或者对比符时，会自带隐式转换，规则如下:</p><ul><li>-、*、/、% ：一律转换成数值后计算</li><li>[1].toString()===’1’</li><li>{}.toString()===’[object object]’ +：</li><li>数字 + 字符串 = 字符串， 运算顺序是从左到右</li><li>数字 + 对象， 优先调用对象的 valueOf -&gt; toString</li><li>数字 + boolean/null = 数字</li><li>数字 + undefined == NaN</li></ul><h4 id="11-类型判断"><a href="#11-类型判断" class="headerlink" title="11.类型判断"></a>11.类型判断</h4><p>判断类型，单单用 typeof 并无法完全满足，这其实并不是 bug，本质原因是 JS 的万物皆对象的理论。因此要真正完美判断时，我们需要区分对待</p><ul><li>基本类型(null): 使用 String(null)</li><li>基本类型(string/number/boolean/undefined) + function: 直接使用 typeof 即可</li><li>其余引用类型(Array/Date/RegExpError): 调用 toString 后根据 [objectXXX]进行判断</li></ul><h4 id="12-模块化"><a href="#12-模块化" class="headerlink" title="12.模块化"></a>12.模块化</h4><ul><li>es6: import/exports</li><li>commonjs: require/module.exports/exports</li></ul><p>require 与 import 的区别</p><ul><li>require 支持动态导入， import 不支持，正在提案 (babel 下可支持)</li><li>require 是同步导入， import 属于异步导入</li><li>require 是值拷贝，导出值变化不会影响导入值； import 指向内存地址，导入值会随导出值而变化</li></ul><h4 id="13-防抖与节流"><a href="#13-防抖与节流" class="headerlink" title="13.防抖与节流"></a>13.防抖与节流</h4><p>具体看前几篇的博客</p><h4 id="14-this-指向"><a href="#14-this-指向" class="headerlink" title="14.this 指向"></a>14.this 指向</h4><p>要明白 this 指向，其实就是要搞清楚函数的运行环境，说人话就是，谁调用了函数。例如:</p><ul><li>obj.fn()，便是 obj 调用了函数，既函数中的 this===obj</li><li>fn()，这里可以看成 window.fn()，因此 this===window</li></ul><p>但这种机制并不完全能满足我们的业务需求，因此提供了三种方式可以手动修改 this 的指向:</p><ul><li>call:fn.call(target,1,2)</li><li>apply:fn.apply(target,[1,2])</li><li>bind:fn.bind(target)(1,2)</li></ul><p>这三种方式在前几篇博客有详情</p><h4 id="15-ES6-ES7"><a href="#15-ES6-ES7" class="headerlink" title="15.ES6/ES7"></a>15.ES6/ES7</h4><ul><li>声明:let/const: 块级作用域、不存在变量提升、暂时性死区、不允许重复声明,const: 声明常量，无法修改</li><li>解构赋值</li><li>class/extend: 类声明与继承</li><li>Set/Map: 新的数据结构</li><li>Promise 的使用与实现,await/async</li></ul><p>具体参考阮一峰的 es6 入门：<a href="http://es6.ruanyifeng.com/#README" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#README</a></p><h4 id="16-数组"><a href="#16-数组" class="headerlink" title="16.数组"></a>16.数组</h4><ul><li>map: 遍历数组，返回回调返回值组成的新数组</li><li>forEach: 无法 break，可以用 try/catch 中 thrownewError 来停止</li><li>filter: 过滤</li><li>sort(fn)/reverse: 排序与反转，改变原数组</li><li>concat: 连接数组，不影响原数组， 浅拷贝<br>…….</li></ul><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><h4 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h4><ul><li>1xx: 接受，继续处理</li><li>200: 成功，并返回数据</li><li>201: 已创建</li><li>202: 已接受</li><li>203: 成为，但未授权</li><li>204: 成功，无内容</li><li>205: 成功，重置内容</li><li>206: 成功，部分内容</li><li>301: 永久移动，重定向</li><li>302: 临时移动，可使用原有 URI</li><li>304: 资源未修改，可使用缓存</li><li>305: 需代理访问</li><li>400: 请求语法错误</li><li>401: 要求身份认证</li><li>403: 拒绝请求</li><li>404: 资源不存在</li><li>500: 服务器错误</li></ul><h4 id="get-post"><a href="#get-post" class="headerlink" title="get / post"></a>get / post</h4><p>get: 缓存、请求长度受限、会被历史保存记录<br>post: 安全、大数据、更多编码类型</p><h3 id="框架：Vue"><a href="#框架：Vue" class="headerlink" title="框架：Vue"></a>框架：Vue</h3><h4 id="1-nextTick"><a href="#1-nextTick" class="headerlink" title="1.nextTick"></a>1.nextTick</h4><p>在下次 dom 更新循环结束之后执行延迟回调，可用于获取更新后的 dom 状态</p><h4 id="2-生命周期"><a href="#2-生命周期" class="headerlink" title="2. 生命周期"></a>2. 生命周期</h4><ul><li>beforeCreate</li><li>created</li><li>beforeMount</li><li>mounted</li><li>beforeUpdate</li><li>updated</li><li>beforeDestroy</li><li>destroyed</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年我绝对不会再买的东西</title>
      <link href="/2019/01/20/shop/"/>
      <url>/2019/01/20/shop/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2019/01/20/shop/shop.png" alt="shop"></p><h3 id="emsp-emsp-我的工资都浪费在哪些地方？"><a href="#emsp-emsp-我的工资都浪费在哪些地方？" class="headerlink" title="&emsp;&emsp;我的工资都浪费在哪些地方？"></a>&emsp;&emsp;我的工资都浪费在哪些地方？</h3><h4 id="top1-鞋子"><a href="#top1-鞋子" class="headerlink" title="top1 鞋子"></a>top1 鞋子</h4><p>据统计今年我总共买了四双鞋子，总共花费约800元左右，无法想象，记得以前我买了两双特步换着穿两三年才有闲钱换了新的，现在真有点膨胀，这四双鞋中，买完就后悔的有两双，首先是阿迪的这双<img src="/2019/01/20/shop/a.png" alt="shop">不懂为什么阿迪的41号跟别家的41号不同，我穿着有一点显大而且很容易拖鞋垫，就是你大街上走着走着鞋垫就从后脚跟拖出来了…反正我现在穿它基本就不垫鞋垫了，透气性很适合春夏秋穿至于弹性还行吧跟想象的不一样，接下来是特步家的<img src="/2019/01/20/shop/t.png" alt="shop">,<br>这双鞋弹性一般透气可以质量差评，刚穿了一个月撑起鞋舌的那个穿孔就掉了- -…剩下两个还是特步家的，一个运动鞋一个老爹鞋，目前没有任何问题，穿着舒适</p><h4 id="top2-烤箱和面包机"><a href="#top2-烤箱和面包机" class="headerlink" title="top2 烤箱和面包机"></a>top2 烤箱和面包机</h4><p>也不是不能不买，而是买了之后感觉有点用处但是有点鸡肋，18年刚工作的时候想给家里添件电器，家里其他也不缺而我当时被烘焙洗脑了就花了几百块买了个烤箱给我妈，买烤箱的目的就只有一个做面包！<img src="/2019/01/20/shop/kao.png" alt="shop">但由于技术实在太菜每次都做成馒头硬的不像话，不过实话实说烤箱的质量很不错，但但是！我妈不会烘焙我也是屁股塞黄豆一窍不通，所以主要的功能就是我回家后做鸡胸肉了其余时间都在闲置着，过了一段时间不甘心的我在年中的时候买了一台面包机，这下好了傻瓜式操作，面粉和水的比例说明书都有，总算是满足了我做面包的念想<img src="/2019/01/20/shop/mian.png" alt="shop">,做了几次后就乏味了，成本太高味道不理想也弃了偶尔健身拿来做早餐吃也是美滋滋</p><h4 id="top3-质量差的生活用品"><a href="#top3-质量差的生活用品" class="headerlink" title="top3 质量差的生活用品"></a>top3 质量差的生活用品</h4><p>没什么好解释的贪便宜买的<br><img src="/2019/01/20/shop/yi1.png" alt="shop"><br><img src="/2019/01/20/shop/yi2.png" alt="shop"><br><img src="/2019/01/20/shop/yi3.png" alt="shop"><br>价格看起来还行，其实我是蹭了商家的活动，买一赠一，收到衣服后会返回支付款的一半，这些衣服买来之后或多或少都会出现些问题，起毛了等等等等，相比起我在优衣库买的衣服简直就是个屁</p><h4 id="top4-伪文艺小清新生活用品"><a href="#top4-伪文艺小清新生活用品" class="headerlink" title="top4 伪文艺小清新生活用品"></a>top4 伪文艺小清新生活用品</h4><p><img src="/2019/01/20/shop/lan.png" alt="shop">记得在淘宝上第一眼看见就喜欢的不得了，买来之后也装了几天衣服后来因为被褥枕头太多就当成集装箱用了…..还有一些瓶子笔盒什么的我都不知道自己当时脑子怎么想的，我还在屋子里用塑料杯种了一些草….</p><h4 id="top5-健身之类的"><a href="#top5-健身之类的" class="headerlink" title="top5 健身之类的.."></a>top5 健身之类的..</h4><p><img src="/2019/01/20/shop/bei.png" alt="shop"><br>觉得好酷炫就买了，结果还不如我原先是用过的杯子…</p><h4 id="top6-电锅"><a href="#top6-电锅" class="headerlink" title="top6 电锅"></a>top6 电锅</h4><p><img src="/2019/01/20/shop/guo.png" alt="shop"><br>从此我知道了宁愿买电磁炉加铁锅也不能买电锅，再买吃一吨屎！</p><h4 id="top7-住宿"><a href="#top7-住宿" class="headerlink" title="top7 住宿"></a>top7 住宿</h4><p>以后再租房的话不会再租这么贵了，一年光房租花了我1W7.8</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于js防抖和节流</title>
      <link href="/2018/12/28/js%E9%98%B2%E6%8A%96/"/>
      <url>/2018/12/28/js%E9%98%B2%E6%8A%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="JS-防抖"><a href="#JS-防抖" class="headerlink" title="JS 防抖"></a>JS 防抖</h3><p>&emsp;&emsp;最近在做公司商城项目时候，有个需求就是购物车里边，数量 input 框需要根据你当前输入的值，每次输入都要发送更新请求，然后后端进行计算，前端重新渲染页面，那么问题来，我每次输入一个数字都会发送一个请求到后端，这样就非常的浪费资源，页面加载也会变慢，于是我查看了下淘宝的购物车页面，发现他们是输入框输入数字停顿大概零点几秒后再开始发送请求，而不是像我这样每次输入都发送，然后我就找到了 js 防抖</p><p>原文网址：<a href="https://juejin.im/post/5b8de829f265da43623c4261?utm_source=gold_browser_extension" target="_blank" rel="noopener">https://juejin.im/post/5b8de829f265da43623c4261?utm_source=gold_browser_extension</a><br>我把原文缩减了下写了个小 demo<br>直接上代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">html：</span><br><span class="line">  &lt;input id=&apos;debounce&apos; /&gt;</span><br><span class="line">JS:</span><br><span class="line">var timer = false;</span><br><span class="line">function debounce(delay) &#123;</span><br><span class="line">      clearTimeout(timer)  // 清除未执行的代码，重置回初始化状态</span><br><span class="line">      timer = setTimeout(function () &#123;</span><br><span class="line">            console.log(&apos;函数鸡柳&apos;)</span><br><span class="line">      &#125;, delay)</span><br><span class="line">&#125;</span><br><span class="line">let inputb = document.getElementById(&apos;debounce&apos;)</span><br><span class="line">inputb.addEventListener(&apos;keyup&apos;, function (e) &#123;</span><br><span class="line">   debounce(500)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>函数防抖的要点，需要一个 setTimeout 来辅助实现,延迟执行需要跑的代码<br>如果方法多次触发，则把上次记录的延迟执行代码用 clearTimeout 清掉，重新开始<br>多用于用户名邮箱等等认证，或购物车数量</p><h3 id="JS-节流"><a href="#JS-节流" class="headerlink" title="JS 节流"></a>JS 节流</h3><p>规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; id=&quot;d1&quot;&gt;</span><br><span class="line"></span><br><span class="line">var time = 0</span><br><span class="line">document.getElementById(&quot;d1&quot;).onkeyup=function()&#123;</span><br><span class="line">    set()</span><br><span class="line">&#125;</span><br><span class="line">function set()&#123;</span><br><span class="line">    var date = new Date().getTime()</span><br><span class="line">    if(date-time&gt;=2000)&#123;</span><br><span class="line">        timer = setTimeout(e=&gt;&#123;</span><br><span class="line">            console.log(&quot;红烧&quot;)</span><br><span class="line">            time = date</span><br><span class="line">        &#125;,2000)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后你就会发现他会每隔 2 秒执行一次<br>节流我的思路就是每次输入的时候获取当前的毫秒数，如果当前毫秒数减去上一次的毫秒数&gt;=2000 了，这时候开始进行定时器的逻辑，定时器结束后把结束的时间换成当前的 time<br>函数节流应用的实际场景，多数在监听页面元素滚动事件的时候会用到。因为滚动事件，是一个高频触发的事件</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>函数防抖和函数节流都是防止某一时间频繁触发，但是这两兄弟之间的原理却不一样</li><li>函数防抖是某一段时间内只执行一次，而函数节流是间隔时间执行</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于bind，apply，call以及箭头函数的区别</title>
      <link href="/2018/12/27/this/"/>
      <url>/2018/12/27/this/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="call-apply"><a href="#call-apply" class="headerlink" title="call,apply"></a>call,apply</h3><p>不比比，直接上代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function add(c, d) &#123;</span><br><span class="line">  return this.a + this.b + c + d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var o = &#123;a: 1, b: 3&#125;;</span><br><span class="line"></span><br><span class="line">// 第一个参数是作为‘this’使用的对象</span><br><span class="line">// 后续参数作为参数传递给函数调用</span><br><span class="line">add.call(o, 5, 7); // 1 + 3 + 5 + 7 = 16</span><br><span class="line"></span><br><span class="line">// 第一个参数也是作为‘this’使用的对象</span><br><span class="line">// 第二个参数是一个数组，数组里的元素用作函数调用中的参数</span><br><span class="line">add.apply(o, [10, 20]); // 1 + 3 + 10 + 20 = 34</span><br></pre></td></tr></table></figure><p>在使用 call 和 apply 时候，如果传递给 this 的值不是一个对象，JavaScript 会尝试使用内部 ToObject 操作将其转换为对象。因此，如果传递的值是一个原始值比如 7 或 ‘foo’，那么就会使用相关构造函数将它转换为对象，所以原始值 7 会被转换为对象，像 new Number(7) 这样，而字符串 ‘foo’ 转化成 new String(‘foo’) 这样<br>如果你传的 context 就 null 或者 undefined，那么 window 对象就是默认的 context（严格模式下默认 context 是 undefined）</p><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><p>bind 是 es5 新加的，当你调用 bind 的时候，跟 call 和 apply 不同，他返回的是一个新函数，新函数 this 将永久地被绑定到了 bind 的第一个参数，无论这个函数是如何被调用的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function f()&#123;</span><br><span class="line">  return this.a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var g = f.bind(&#123;a:&quot;azerty&quot;&#125;);</span><br><span class="line">console.log(g()); // azerty</span><br><span class="line"></span><br><span class="line">var h = g.bind(&#123;a:&apos;yoo&apos;&#125;); // bind只生效一次！</span><br><span class="line">console.log(h()); // azerty</span><br><span class="line"></span><br><span class="line">var o = &#123;a:37, f:f, g:g, h:h&#125;;</span><br><span class="line">console.log(o.f(), o.g(), o.h()); // 37, azerty, azerty</span><br></pre></td></tr></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>在箭头函数中，this 与封闭词法上下文的 this 保持一致。在全局代码中，它将被设置为全局对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var globalObject = this;</span><br><span class="line">var foo = (() =&gt; this);</span><br><span class="line">console.log(foo() === globalObject); // true</span><br><span class="line"></span><br><span class="line">//如果将this传递给call、bind、或者apply，它将被忽略。</span><br><span class="line"></span><br><span class="line">// 接着上面的代码</span><br><span class="line">// 作为对象的一个方法调用</span><br><span class="line">var obj = &#123;foo: foo&#125;;</span><br><span class="line">console.log(obj.foo() === globalObject); // true</span><br><span class="line"></span><br><span class="line">// 尝试使用call来设定this</span><br><span class="line">console.log(foo.call(obj) === globalObject); // true</span><br><span class="line"></span><br><span class="line">// 尝试使用bind来设定this</span><br><span class="line">foo = foo.bind(obj);</span><br><span class="line">console.log(foo() === globalObject); // true</span><br></pre></td></tr></table></figure><p>最后一点，当函数作为对象里的方法被调用时，它们的 this 是调用该函数的对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var o = &#123;</span><br><span class="line">  prop: 37,</span><br><span class="line">  f: function() &#123;</span><br><span class="line">    return this.prop;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.log(o.f()); // logs 37</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式入门笔记</title>
      <link href="/2018/12/24/reg/"/>
      <url>/2018/12/24/reg/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>正则一直是我弱项，闲着没事写笔记学习吧~</strong></p><h4 id="RegExp-对象"><a href="#RegExp-对象" class="headerlink" title="RegExp 对象"></a>RegExp 对象</h4><p>js 的内置对象 RegExp 支持正则表达式<br>有两种方法实例化 RegExp 对象</p><ul><li>字面量 var reg = /a/</li><li>构造函数 var reg = new RegExp(‘/a/‘)</li></ul><h4 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h4><p>正则表达式由两种基本字符类型组成</p><ul><li>原义文本字符，也就是我想搜索 a 那就/a/</li><li>元字符，在正则表达式中有特殊含义的非字母字符比如\b 边界，以及 * + ? ^ () {} []</li></ul><table><thead><tr><th>字符</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td>\t</td><td style="text-align:center">水平制表符</td></tr><tr><td>\v</td><td style="text-align:center">垂直制表符</td></tr><tr><td>\n</td><td style="text-align:center">换行符</td></tr><tr><td>\r</td><td style="text-align:center">回车符</td></tr><tr><td>\o</td><td style="text-align:center">空字符</td></tr><tr><td>\f</td><td style="text-align:center">换页符</td></tr><tr><td>\cX</td><td style="text-align:center">与 X 对应的控制字符</td></tr></tbody></table><h4 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h4><p>有时候我们不想特指某个字符，想匹配某个范围内</p><ul><li>我们可以用元字符 [] 来构建一个简单的类</li><li>所谓类是指符合某些特性的对象，一个泛指，而不是特指某个字符</li><li>表达式[abc]就把字符 a,b,c 归为一类，表达式可以匹配这类的字符</li></ul><p>字符类取反</p><ul><li>使用元字符^创建反向类/负向类</li><li>反向类的意思是不属于某类的内容</li><li>表达式[^abc]标识不是字符 a,b,c 的内容</li></ul><h4 id="范围类"><a href="#范围类" class="headerlink" title="范围类"></a>范围类</h4><p>我们想匹配所有数字，或者所有字母的时候，正则提供了范围类</p><ul><li>[a-z]就表示从 a 到 z 的任意字符</li><li>这是个闭区间，也包含 a 和 z 本身</li><li>也可以连着写[a-zA-Z0-9],如果想匹配-这个字符就在匹配的后面加上-例如[a-z-]</li></ul><h4 id="预定义类-边界"><a href="#预定义类-边界" class="headerlink" title="预定义类+边界"></a>预定义类+边界</h4><table><thead><tr><th>预定义类+边界</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td>.</td><td style="text-align:center">除了换行符和回车符以外的所有字符</td></tr><tr><td>\d</td><td style="text-align:center">数字字符([0-9])</td></tr><tr><td>\D</td><td style="text-align:center">非数字字符([^0-9])</td></tr><tr><td>\s</td><td style="text-align:center">空白符</td></tr><tr><td>\S</td><td style="text-align:center">非空白符</td></tr><tr><td>\w</td><td style="text-align:center">单词字符([a-zA-Z_0-9])</td></tr><tr><td>\W</td><td style="text-align:center">非单词字符</td></tr><tr><td>^</td><td style="text-align:center">以 xxxx 开始</td></tr><tr><td>\$</td><td style="text-align:center">以 xxxx 结束</td></tr><tr><td>\b</td><td style="text-align:center">单词边界</td></tr><tr><td>\B</td><td style="text-align:center">非单词边界</td></tr></tbody></table><h4 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h4><p>当你希望匹配一个数字出现 20 次的时候，你可以这样写/\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d/……这样写是极其不友好，谁写是傻子</p><table><thead><tr><th>字符</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td>?</td><td style="text-align:center">出现 0 次或者 1 次(最多出现一次)</td></tr><tr><td>+</td><td style="text-align:center">出现一次或多次(最少出现一次)</td></tr><tr><td>*</td><td style="text-align:center">出现 0 次或多次(任意次)</td></tr><tr><td>{n}</td><td style="text-align:center">出现 n 次</td></tr><tr><td>{n,m}</td><td style="text-align:center">出现 n 到 m 次</td></tr><tr><td>{n,}</td><td style="text-align:center">至少出现 n 次</td></tr></tbody></table><h4 id="贪婪模式和非贪婪模式"><a href="#贪婪模式和非贪婪模式" class="headerlink" title="贪婪模式和非贪婪模式"></a>贪婪模式和非贪婪模式</h4><p>比如表达式\d{3,6}，可以匹配到三个数字，也可以是四个五个六个……来看例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;12345678&apos;.replace(/\d&#123;3,6&#125;/g,&apos;A&apos;)</span><br><span class="line">&apos;A78&apos;</span><br></pre></td></tr></table></figure><p>从这可以看出正则表达式默认的是尽可能多的匹配，而不是只匹配到第三个就结束了，这就是贪婪模式</p><p><strong>非贪婪模式</strong></p><p>让正则表达式尽可能少的匹配，也就是说一旦成功匹配不再继续尝试，就是非贪婪模式<br>做法很简单，在量词后加上?即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;12345678&apos;.replace(/\d&#123;3,6&#125;?/,&apos;X&apos;)</span><br><span class="line">&quot;X45678&quot;</span><br></pre></td></tr></table></figure><h4 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h4><p>比如我们想匹配 abc 3 次的时候我们可以这样写<br><code>abc{3}</code><br>但是这样写就会匹配 c 的 3 次，而不是整个字母 abc 的 3 次，要想作用于整个字母就要使用()来分组<br><code>(abc){3}</code></p><p><strong>或</strong><br>js 里边是 || 而正则是使用 | 可以达到或的效果<br><code>a|c</code></p><p><strong>反向引用</strong><br>2015-15-25 =&gt; 25/15/2015<br><code>&#39;2015-12-25&#39;.replace(/(\d{4})-(\d{2})-(\d{2})/,&#39;$3/$2/$1&#39;)</code><br>如果你不希望捕获分组可以在()内加上?:<br><code>(?:\d{2})</code></p><h4 id="前瞻和后瞻"><a href="#前瞻和后瞻" class="headerlink" title="前瞻和后瞻"></a>前瞻和后瞻</h4><table><thead><tr><th>名称</th><th style="text-align:center">正则</th></tr></thead><tbody><tr><td>正向前瞻</td><td style="text-align:center">exp(?=assert)</td></tr><tr><td>负向前瞻</td><td style="text-align:center">exp(?!assert)</td></tr></tbody></table><p>exp(?=assert) 的意思就是比如你要匹配 a 但是 a 后边必须要跟上数字 就是这样写/\w(?=\d)/，上代码看下和平常的区别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&apos;a2b2&apos;.replace(/\w\d/,&apos;A&apos;)</span><br><span class="line">&quot;Ab2&quot;</span><br><span class="line">&apos;a2b2&apos;.replace(/\w(?=\d)/,&apos;A&apos;)</span><br><span class="line">&quot;A2b2&quot;</span><br></pre></td></tr></table></figure><h4 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h4><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><ul><li>g:global 全局搜索，不添加，搜索到第一个停止</li><li>i:ignore case 忽略大小写，默认大小写敏感</li><li>m:multiple lines 多行搜索</li><li>lastIndex 是当前表达式匹配内容的最后一个字符的下一个位置,该属性只有设置标志 g 才能使用。</li><li>source 正则表达式的文本字符串</li></ul><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><p>用于测试字符串参数中是否存在匹配正则表达式模式的字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/\d/g.test(&apos;0&apos;)</span><br><span class="line">true</span><br></pre></td></tr></table></figure><p>但是你多执行几次就会出现…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var reg = /\d/g</span><br><span class="line">reg1.test(0)</span><br><span class="line">true</span><br><span class="line">reg1.test(0)</span><br><span class="line">false</span><br><span class="line">reg1.test(0)</span><br><span class="line">true</span><br><span class="line">reg1.test(0)</span><br><span class="line">false</span><br></pre></td></tr></table></figure><p>这是为撒呢？因为 test 是以 lastIndex 属性所指的位置作为下次检索的起始点，所以你就可以遍历一个字符串的所有文本,等它再也找不到可以匹配的文本时，它会自动把 lastIndex 属性重置为 0，所以返回了 false</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var reg = /\w/g</span><br><span class="line"></span><br><span class="line">while(reg.test(&apos;ab&apos;))&#123;</span><br><span class="line">  console.log(reg.lastIndex)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h3><p>使用正则表达式对字符串进行搜索，如果没有匹配返回 null，匹配到返回结果数组,数组的第 0 个元素是与正则表达式相匹配的文本，第 1 个元素是正则中分组中表达式相匹配的值，一次类推，看实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var reg = /\d(\w)\d/</span><br><span class="line">var ret = reg.exec(&apos;$5a51s28e6&apos;)</span><br><span class="line">console.log(ret.index,reg.lastIndex,ret.toString(),ret.input)</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">0</span><br><span class="line">&quot;5a5,a&quot;</span><br><span class="line">&quot;$5a51s28e6&quot;</span><br></pre></td></tr></table></figure><p>从实例中可以看出 exec()方法还返回两个属性，index 属性声明的是匹配文本的第一个字符的位置，input 属性则存放的是被检索的字符串 string。<br>其中 5a5 是检索到的字符串，而 a 是分组(\w)检索出来的属性，再换个写法试试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var reg = /\d(\w)(\w)\d/</span><br><span class="line">var ret = reg.exec(&apos;$5aw51s28e6&apos;)</span><br><span class="line">console.log(ret.toString())</span><br><span class="line"></span><br><span class="line">&quot;5aw5,a,w&quot;</span><br></pre></td></tr></table></figure><p>a 和 w 都是分组中两个属性</p><h4 id="字符串的对象方法"><a href="#字符串的对象方法" class="headerlink" title="字符串的对象方法"></a>字符串的对象方法</h4><p><em>search</em></p><p>search()方法用于检索字符串中指定的子字符串，或检索与正则表达式想匹配的子字符串，方法返回第一个匹配结果 index，查找不到返回-1，search 方法不支持全局匹配，忽略标志 g，并且从字符串的开始进行检索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&apos;1w5w2w&apos;.search(&apos;1&apos;)</span><br><span class="line">0</span><br><span class="line">&apos;1w5w2w&apos;.search(&apos;10&apos;)</span><br><span class="line">-1</span><br></pre></td></tr></table></figure><p><em>match</em></p><p>match()方法将检索字符串，找到一个或多个与正则匹配的文本，是否标志 g 对结果影响很大</p>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React-Redux学习挖坑</title>
      <link href="/2018/12/23/React-Redux%E5%AD%A6%E4%B9%A0%E6%8C%96%E5%9D%91/"/>
      <url>/2018/12/23/React-Redux%E5%AD%A6%E4%B9%A0%E6%8C%96%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="什么是-Redux"><a href="#什么是-Redux" class="headerlink" title="什么是 Redux"></a>什么是 Redux</h3><blockquote><p>Redux 是一个流行的 JavaScript 框架，为应用程序提供一个可预测的状态容器。Redux 基于简化版本的 Flux 框架，Flux 是 Facebook 开发的一个框架。在标准的 MVC 框架中，数据可以在 UI 组件和存储之间双向流动，而 Redux 严格限制了数据只能在一个方向上流动<br><img src="/2018/12/23/React-Redux学习挖坑/redux.png" alt="图"></p></blockquote><p>在 Redux 中，所有的数据（比如 state）被保存在一个被称为 store 的容器中 → 在一个应用程序中只能有一个。store 本质上是一个状态树，保存了所有对象的状态。任何 UI 组件都可以直接从 store 访问特定对象的状态。要通过本地或远程组件更改状态，需要分发一个 action。分发在这里意味着将可执行信息发送到 store。当一个 store 接收到一个 action，它将把这个 action 代理给相关的 reducer。reducer 是一个纯函数，它可以查看之前的状态，执行一个 action 并且返回一个新的状态。<br><strong>项目撸起来</strong><br>首先创建一个 react 脚手架项目<br><code>create-react-app my-app</code><br>接下来 cd 到项目当中，安装 redux<br><code>yarn add redux -S</code><br>页面 index.js<br><code>import {createStore} from &#39;redux&#39;</code></p><h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><p>Store 对象包含所有数据， 当前时刻的 State，可以通过 store.getState()拿到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//新建store</span><br><span class="line">const store = createStore(reducer);</span><br><span class="line">const state = store.getState();</span><br><span class="line">console.log(state);</span><br></pre></td></tr></table></figure><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><p>State 的变化，会导致页面的变化。但是，用户接触不到 State，只能接触到 View。所以，State 的变化必须是 View 导致的。Action 就是 View 发出的通知，表示 State 应该要发生变化了。Action 是一个对象。其中的 type 属性是必须的，表示 Action 的名称。其他属性可以自由设置<br><code>const action = {type:&#39;0&#39;}</code></p><h3 id="store-dispatch"><a href="#store-dispatch" class="headerlink" title="store.dispatch()"></a>store.dispatch()</h3><p>派发事件，接受 action，将当前的 action 传输给 reducer，生成新的 state<br><code>store.dispatch(action)</code></p><h3 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h3><p>store 收到 action 后，经过一些逻辑计算也就是 reducer，然后生成一个新的 state</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//通过reducer遍历</span><br><span class="line">//根据老的state和action来生成新的state</span><br><span class="line">function reducer(state=0,action)&#123;</span><br><span class="line">    switch (action.type) &#123;</span><br><span class="line">        case &apos;0&apos;:</span><br><span class="line">            return state+1</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">            return state</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="store-subscribe"><a href="#store-subscribe" class="headerlink" title="store.subscribe()"></a>store.subscribe()</h3><p>订阅事件，一旦 State 发生变化，就自动执行这个函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//订阅事件</span><br><span class="line">function listener()&#123;</span><br><span class="line">    console.log(store.getState())</span><br><span class="line">&#125;</span><br><span class="line">store.subscribe(listener);</span><br></pre></td></tr></table></figure><p>下面直接来一个 demo 吧，index.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import ReactDOM from &apos;react-dom&apos;;</span><br><span class="line">import &apos;./index.css&apos;;</span><br><span class="line">import &#123;createStore&#125; from &apos;redux&apos;;</span><br><span class="line">import App from &apos;./App&apos;;</span><br><span class="line">import registerServiceWorker from &apos;./registerServiceWorker&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function reducer(state=0,action)&#123;</span><br><span class="line">    switch (action.type) &#123;</span><br><span class="line">        case &apos;0&apos;:</span><br><span class="line">            return state+1</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">            return state</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">const store = createStore(reducer);</span><br><span class="line">const state = store.getState();</span><br><span class="line"></span><br><span class="line">//订阅事件</span><br><span class="line">function listener()&#123;</span><br><span class="line">    console.log(store.getState())</span><br><span class="line">&#125;</span><br><span class="line">store.subscribe(listener);</span><br><span class="line"></span><br><span class="line">//派发事件</span><br><span class="line">const action = &#123;type:&apos;0&apos;&#125;</span><br><span class="line">store.dispatch(action);</span><br><span class="line">store.dispatch(action);</span><br><span class="line">store.dispatch(action);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;App /&gt;, document.getElementById(&apos;root&apos;));</span><br><span class="line">registerServiceWorker();</span><br></pre></td></tr></table></figure><p>页面打印出<br><img src="/2018/12/23/React-Redux学习挖坑/console.png" alt="console"></p><h3 id="React-怎么和-Redux-一起使用呢"><a href="#React-怎么和-Redux-一起使用呢" class="headerlink" title="React 怎么和 Redux 一起使用呢"></a>React 怎么和 Redux 一起使用呢</h3><ul><li>把 store.dispatch 方法传递给组件，内部可以调用修改状态</li><li>Subscribe 订阅 render 函数，每次修改都重新渲染</li><li>Redux 相关代码，转移到 redux.js 进行管理</li></ul><p>在 src 目录创建 redux.js，然后将 reducer 函数放入 redux.js<br>indexjs:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import ReactDOM from &apos;react-dom&apos;;</span><br><span class="line">import &apos;./index.css&apos;;</span><br><span class="line">import &#123;createStore&#125; from &apos;redux&apos;;</span><br><span class="line">import App from &apos;./App&apos;;</span><br><span class="line">import &#123;reducer,add&#125; from &apos;./redux&apos;;</span><br><span class="line"></span><br><span class="line">const store = createStore(reducer);</span><br><span class="line"></span><br><span class="line">function render()&#123;</span><br><span class="line">    ReactDOM.render(&lt;App store=&#123;store&#125; add=&#123;add&#125;/&gt;, document.getElementById(&apos;root&apos;));</span><br><span class="line">&#125;</span><br><span class="line">render()</span><br><span class="line">store.subscribe(render);</span><br></pre></td></tr></table></figure><p>redux.js:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">export function reducer(state=0,action)&#123;</span><br><span class="line">    switch (action.type) &#123;</span><br><span class="line">        case &apos;0&apos;:</span><br><span class="line">            return state+1</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">            return state</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export function add()&#123;</span><br><span class="line">    return &#123;type:&apos;0&apos;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>页面 app.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class="line">import &apos;./App.css&apos;;</span><br><span class="line"></span><br><span class="line">class App extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    var store = this.props.store;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div className=&quot;App&quot;&gt;</span><br><span class="line">        &lt;p&gt;&#123;store.getState()&#125;&lt;/p&gt;</span><br><span class="line">        &lt;button onClick=&#123;e=&gt;store.dispatch(this.props.add())&#125;&gt;+&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><p>这样页面中，每点击一次 button，返回来的 state 就会加 1</p><h3 id="更进一步，处理异步，调试工具，与-react-更优雅的结合"><a href="#更进一步，处理异步，调试工具，与-react-更优雅的结合" class="headerlink" title="更进一步，处理异步，调试工具，与 react 更优雅的结合"></a>更进一步，处理异步，调试工具，与 react 更优雅的结合</h3><p>Redux 默认只处理同步，处理异步，需要 redux-thunk 插件<br>使用 applyMiddleware 开始 thunk 中间件<br>Action 可以返回函数，使用 dispatch 提交 action<br><code>yarn add redux-thunk --save</code><br>index.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123;createStore,applyMiddleware&#125; from &apos;redux&apos;;</span><br><span class="line">import thunk from &apos;redux-thunk&apos;;</span><br><span class="line">const store = createStore(reducer,applyMiddleware(thunk));</span><br></pre></td></tr></table></figure><p>redux.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export function addd()&#123;</span><br><span class="line">    return dispatch=&gt;&#123;</span><br><span class="line">        setTimeout(()=&gt;&#123;</span><br><span class="line">            dispatch(&#123;type:&apos;0&apos;&#125;)</span><br><span class="line">        &#125;,1000)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>刚才咱们返回是对象，这次返回的 action 是一个函数，在 app.js 调用后会发现页面在 1 秒后 state 返回+1<br>redux 调试工具在 chrome 这个就需要大家科学上网了, <a href="https://pan.baidu.com/s/1qVYhg_UUHBJhJwsq9EQnyg" target="_blank" rel="noopener">点击这里下载</a></p><p>怎么使用该工具？</p><ul><li>新建 store 的时候判断 window.devToolsExtension</li><li>使用 compose 结合 thunk 和 window.devToolsExtension</li><li>调试窗的 redux 选项卡，实时看到 state</li></ul><p>index.js 代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &#123;createStore,applyMiddleware,compose&#125; from &apos;redux&apos;;</span><br><span class="line"></span><br><span class="line">const store = createStore(reducer,compose(</span><br><span class="line">    applyMiddleware(thunk),</span><br><span class="line">    window.devToolsExtension?window.devToolsExtension():a=&gt;a</span><br><span class="line">));</span><br></pre></td></tr></table></figure><p>如果出现 state 未初始化这个错误，建议你把工具更新一下~~</p><h3 id="使用-react-redux"><a href="#使用-react-redux" class="headerlink" title="使用 react-redux"></a>使用 react-redux</h3><p><code>yarn add react-redux -S</code><br>忘记 subscribe，记住 reducer，action 和 dispatch 即可<br>React-redux 提供 connect 和 Provider 两个接口来链接<br>index.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Provider &#125; from &apos;react-redux&apos;;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">        &lt;App /&gt;</span><br><span class="line">    &lt;/Provider&gt;,</span><br><span class="line">    document.getElementById(&apos;root&apos;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import &#123;connect&#125; from &apos;react-redux&apos;;</span><br><span class="line">import &#123;addState,remove&#125; from &apos;./redux&apos;;</span><br><span class="line"></span><br><span class="line">class App extends React.component&#123;</span><br><span class="line">  render()&#123;</span><br><span class="line">    const store = this.props.store;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;我永远喜欢新垣结衣&#123;this.props.num&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;button onClick=&#123;e=&gt;this.props.addState()&#125;&gt;+&lt;/button&gt;</span><br><span class="line">        &lt;button onClick=&#123;e=&gt;this.props.remove()&#125;&gt;-&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//进行装饰器</span><br><span class="line">let mapStatetoProps = state=&gt;&#123;</span><br><span class="line">  return &#123;num : state&#125;</span><br><span class="line">&#125;</span><br><span class="line">let action = &#123;addState,remove&#125;</span><br><span class="line">App = connect(mapStatetoProps,action)(App)</span><br><span class="line">//</span><br><span class="line">export default App</span><br></pre></td></tr></table></figure><p>connect 使用装饰器来写可以省略代码，首先 yarn eject 弹出来个性化配置<br>首先安装一个支持装饰器的插件<br><code>yarn add babel-plugin-transform-decorators-legacy -D</code></p><p>然后在 package.json 下的 babel 添加一个参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;babel&quot;: &#123;</span><br><span class="line">    &quot;presets&quot;: [&quot;react-app&quot;],</span><br><span class="line">    &quot;plugins&quot;: [</span><br><span class="line">      [&quot;import&quot;,&#123;&quot;libraryName&quot;: &quot;antd-mobile&quot;,&quot;style&quot;: &quot;css&quot;&#125;],</span><br><span class="line">      [&quot;transform-decorators-legacy&quot;]  //就是这个</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>添加之后在页面重新书写 connect</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import &#123;connect&#125; from &apos;react-redux&apos;;</span><br><span class="line">import &#123;addState,remove&#125; from &apos;./redux&apos;;</span><br><span class="line"></span><br><span class="line">@connect(</span><br><span class="line">  state =&gt; (&#123;num:state&#125;),</span><br><span class="line">  &#123;addState,remove&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">class App extends React.component&#123;</span><br><span class="line">  render()&#123;</span><br><span class="line">    const store = this.props.store;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;我永远喜欢新垣结衣&#123;this.props.num&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;button onClick=&#123;e=&gt;this.props.addState()&#125;&gt;+&lt;/button&gt;</span><br><span class="line">        &lt;button onClick=&#123;e=&gt;this.props.remove()&#125;&gt;-&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default App</span><br></pre></td></tr></table></figure><p>这样代码简洁美观</p>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019</title>
      <link href="/2018/12/20/2019/"/>
      <url>/2018/12/20/2019/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="新的一年新的开始我要找个女朋友"><a href="#新的一年新的开始我要找个女朋友" class="headerlink" title="新的一年新的开始我要找个女朋友~"></a>新的一年新的开始我要找个女朋友~</h3><iframe src="//music.163.com/outchain/player?type=2&id=1328602542" width="100%" height="103px" frameborder="0" allowfullscreen></iframe><p>&emsp;&emsp;从 2017 年 12 月份 1 号入职到现在有一年了，离开大姐的第一年，我有点想她。</p>]]></content>
      
      
      
        <tags>
            
            <tag> about </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack4.x学习入门</title>
      <link href="/2018/12/20/webpack4-x/"/>
      <url>/2018/12/20/webpack4-x/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong> 之前一直使用3.x，这次学学4.x，看看跟之前有什么不同的地方没 </strong></p><h4 id="什么是webpack？"><a href="#什么是webpack？" class="headerlink" title="什么是webpack？"></a>什么是webpack？</h4><blockquote><p>webpack是一个打包工具，他的宗旨是一切静态资源即可打包。有人就会问为什么要webpack？webpack是现代前端技术的基石，常规的开发方式，比如jquery,html,css静态网页开发已经落后了。现在是MVVM的时代，数据驱动界面。webpack将现代js开发中的各种新型有用的技术，集合打包。</p></blockquote><h4 id="一、前端环境搭建"><a href="#一、前端环境搭建" class="headerlink" title="一、前端环境搭建"></a>一、前端环境搭建</h4><p>我们使用npm或yarn来安装webpack<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack webpack-cli -g </span><br><span class="line">或者 </span><br><span class="line">yarn global add webpack webpack-cli</span><br></pre></td></tr></table></figure></p><p>在webpack3中，webpack本身和它的cli以前都是在同一个包中，第4版他们两者分开了,新建一个webpack的文件夹，webpack,初始化package.json并安装webpack-cli</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm init -y  //-y 默认所有的配置</span><br><span class="line">cnpm i webpack webpack-cli --save-dev  //局部安装</span><br></pre></td></tr></table></figure><h4 id="二、部署webpack"><a href="#二、部署webpack" class="headerlink" title="二、部署webpack"></a>二、部署webpack</h4><p>在上面搭建好的环境项目中，我们来到package.json里配置我们的scripts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123; </span><br><span class="line"> &quot;dist&quot; : &quot;node_modules/.bin/webpack -p&quot;   //使用cnpm  run dist 就可以打包我们的项目了</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h4 id="三、webpackp配置流程篇"><a href="#三、webpackp配置流程篇" class="headerlink" title="三、webpackp配置流程篇"></a>三、webpackp配置流程篇</h4><p>我们在开发是一般会打包src下的什么文件呢？</p><ul><li>发布时需要的html，css，js </li><li>预编译器stylus，less，sass,es6的高级语法 </li><li>图片字体资源.png，.gif，.ico，.jpg </li><li>文件间的require别名@等修饰符等等</li><li>webpack-dev-server以及跨域处理</li><li>jQuery插件全局使用<br>通过这几点来讲解webpack中webpack.config.js的配置<br>首先在同目录下创建webpack.config.js文件，配置总览大概是这样<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">module.exports=&#123;</span><br><span class="line">    //入口文件的配置项</span><br><span class="line">    entry:&#123;&#125;,</span><br><span class="line">    //出口文件的配置项</span><br><span class="line">    output:&#123;&#125;,</span><br><span class="line">    //模块：例如解读CSS,图片如何转换，压缩</span><br><span class="line">    module:&#123;&#125;,</span><br><span class="line">    //插件，用于生产模版和各项功能</span><br><span class="line">    plugins:[],</span><br><span class="line">    //配置webpack开发服务功能</span><br><span class="line">    devServer:&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>entry</strong>：配置入口文件的地址，可以是单一入口，也可以是多入口。<br><strong>output</strong>：配置出口文件的地址，在webpack2.X版本后，支持多出口配置。<br><strong>module</strong>：配置模块，主要是解析CSS和图片转换压缩等功能。<br><strong>plugins</strong>：配置插件，根据你的需要配置不同功能的插件。<br><strong>devServer</strong>：配置开发服务功能。</p><h5 id="首先是入口文件"><a href="#首先是入口文件" class="headerlink" title="首先是入口文件"></a>首先是入口文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">entry: &apos;./index.js&apos;, </span><br><span class="line">//可配置多入口文件</span><br><span class="line">entry:&#123;</span><br><span class="line">  &apos;index&apos; : &apos;./index.js&apos;,</span><br><span class="line">  &apos;demo&apos;  : &apos;./demo.js&apos;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="output选项（出口配置）"><a href="#output选项（出口配置）" class="headerlink" title="output选项（出口配置）"></a>output选项（出口配置）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//出口文件的配置项</span><br><span class="line">output:&#123;</span><br><span class="line">    //打包的路径</span><br><span class="line">    path:path.resolve(__dirname,&apos;dist&apos;),</span><br><span class="line">    //打包后的引用路径</span><br><span class="line">    publicPath: &apos;dist&apos;,</span><br><span class="line">    //打包的文件名称</span><br><span class="line">    filename:&apos;bundle.js&apos;</span><br><span class="line">    </span><br><span class="line">&#125;,</span><br><span class="line">//多入口情况下</span><br><span class="line">output:&#123;</span><br><span class="line">    //打包的路径</span><br><span class="line">    path:path.resolve(__dirname,&apos;dist&apos;),</span><br><span class="line">    //打包后的引用路径</span><br><span class="line">    publicPath: &apos;dist&apos;,</span><br><span class="line">    //打包的文件名称</span><br><span class="line">    filename:&apos;js/[name].js&apos;    </span><br><span class="line">&#125;,</span><br><span class="line">//[name]的意思是根据入口文件的名称，打包成相同的名称，有几个入口文件，就可以打包出几个文件。</span><br></pre></td></tr></table></figure><p><strong>直接这样写是不对的，需要在头部引入path</strong><br><code>const path = require(&#39;path&#39;)</code><br>其中path.resolve(__dirname,’dist’)就是获取了项目的绝对路径。<br>接下来在根目录下创建index.js，然后运行node_modules/.bin/webpack<br>如果你是全局安装，直接webpack即可，此条命令针对局部安装</p><h5 id="设置webpack-dev-server"><a href="#设置webpack-dev-server" class="headerlink" title="设置webpack-dev-server"></a>设置webpack-dev-server</h5><p>要执行webpack-dev-server首先要使用npm下载<br><code>cnpm install webpack-dev-server –-save-dev</code><br>最简单的几项配置如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">devServer:&#123;</span><br><span class="line">  //设置基本目录结构</span><br><span class="line">  contentBase:path.resolve(__dirname,&apos;dist&apos;),</span><br><span class="line">  //服务器的IP地址，可以使用IP也可以使用localhost</span><br><span class="line">  host:&apos;localhost&apos;,</span><br><span class="line">  //服务端压缩是否开启</span><br><span class="line">  compress:true,</span><br><span class="line">  //配置服务端口号</span><br><span class="line">  port:1717</span><br><span class="line">  proxy : [&#123;</span><br><span class="line">      context: [&apos;/admin&apos;],</span><br><span class="line">      target: &quot;http://mcljp.com&quot;,</span><br><span class="line">      changeOrigin : true</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>contentBase</strong>:配置服务器基本运行路径，用于找到程序打包地址<br><strong>host</strong>：服务运行地址，建议使用本机IP，这里为了讲解方便，所以用localhost<br><strong>compress</strong>：服务器端压缩选型，一般设置为开启，如果你对服务器压缩感兴趣，可以自行学习<br><strong>port</strong>：服务运行端口，建议不使用80，很容易被占用，这里使用了1717.<br><strong>proxy</strong> : 本地代理，可进行跨域</p><p>开启热更新，你要是直接webpack-dev-server是不行的，需要在json文件下配置下scripts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;dev&quot;:&quot;webpack-dev-server --open&quot;</span><br><span class="line"> &#125;,</span><br><span class="line">//--open命令运行后自动打开浏览器进行浏览</span><br></pre></td></tr></table></figure></p><p>配置好保存后，在终端里输入 npm  run  dev  就可以进行浏览了</p><h4 id="四、配置模块"><a href="#四、配置模块" class="headerlink" title="四、配置模块"></a>四、配置模块</h4><blockquote><p>loaders是Webpack最重要的功能之一，通过使用不同的Loader，Webpack可以的脚本和工具，从而对不同的文件格式进行特定处理。<br><strong>test</strong>：用于匹配处理文件的扩展名的表达式，这个选项是必须进行配置的<br><strong>use</strong>：loader名称，就是你要使用模块的名称，这个选项也必须进行配置，否则报错<br><strong>include/exclude</strong>:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）<br><strong>query</strong>：为loaders提供额外的设置选项（可选）</p></blockquote><h5 id="打包css文件"><a href="#打包css文件" class="headerlink" title="打包css文件"></a>打包css文件</h5><p>根目录下创建css文件，然后js文件require引入,npm安装style-loader，css-loader<br><code>cnpm install style-loader css-loader --save-dev</code></p><p>webpack.config.js的modules修改为下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">module:&#123;</span><br><span class="line">  rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        use: [ &apos;style-loader&apos;, &apos;css-loader&apos; ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="打包HTML文件"><a href="#打包HTML文件" class="headerlink" title="打包HTML文件"></a>打包HTML文件</h5><p>打包html我们需要用上插件html-webpack-plugin，使用npm安装插件，并在头部引用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev html-webpack-plugin</span><br><span class="line">const htmlPlugin= require(&apos;html-webpack-plugin&apos;);</span><br></pre></td></tr></table></figure></p><p>html-webpack-pugin基本属性如下<br><strong>title</strong>: 用来生成页面的 title 元素filename: 输出的 HTML 文件名，默认是 index.html, 也可以直接配置带有子目录。<br><strong>template</strong>: 模板文件路径，比如‘./index.html’，<br><strong>favicon</strong>: 添加特定的 favicon 路径到输出的 HTML 文件中。<br><strong>minify</strong>: {} | false , 传递 html-minifier 选项给 minify 输出hash: true | false, 如果为 true, 将添加一个唯一的 webpack 编译 hash 到所有包含的脚本和 CSS 文件，对于解除 cache 很有用。<br><strong>cache</strong>: true | false，如果为 true, 这是默认值，仅仅在文件修改之后才会发布文件。<br><strong>showErrors</strong>: true | false, 如果为 true, 这是默认值，错误信息会写入到 HTML 页面中chunks: 允许只添加某些块 (比如，仅仅 unit test 块)<br><strong>chunksSortMode</strong>: 允许控制块在添加到页面之前的排序方式，支持的值：’none’ | ‘default’ | {function}-default:’auto’<br><strong>excludeChunks</strong>: 允许跳过某些块，(比如，跳过单元测试的块)<br><strong>chunks</strong>：chunks 默认会在生成的 html 文件中引用所有的 js 文件，当然你也可以指定引入哪些特定的文件。<br><strong>根目录下创建index.html</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">plugins:[</span><br><span class="line">  new htmlWebpackPlugin(&#123;</span><br><span class="line">      template    : &apos;index.html&apos;,</span><br><span class="line">      filename    : &apos;index.html&apos;,</span><br><span class="line">      title       : title,</span><br><span class="line">      inject      : true,</span><br><span class="line">      hash        : true,</span><br><span class="line">      chunks      : [&apos;index&apos;]</span><br><span class="line">  &#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>终端进行打包，你就会发现html文件也被打包在我们的dist目录下了。</p><h5 id="图片，字体打包"><a href="#图片，字体打包" class="headerlink" title="图片，字体打包"></a>图片，字体打包</h5><p>要将图片和字体打包我们需要安装url-loader，首先进行安装<br><code>npm install --save-dev  url-loader</code><br>接下来进行配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">test: /\.(png|jpg|gif)/,</span><br><span class="line">use: [&#123;</span><br><span class="line">        loader: &apos;url-loader&apos;,</span><br><span class="line">        options: &#123;</span><br><span class="line">                limit: 5000,</span><br><span class="line">                outputPath: &apos;resource/&apos;</span><br><span class="line">            &#125;</span><br><span class="line"> &#125;]</span><br></pre></td></tr></table></figure></p><p><strong>limit</strong> : 文件大小小于limit参数，url-loader将会把文件转为DataURL<br><strong>outputPath</strong> : 表示输出文件路径前缀。图片经过url-loader打包都会打包到指定的输出文件夹下。但是我们可以指定图片在输出文件夹下的路径。图片被打包时，就会在输出文件夹下新建（如果没有）一个名为resource的文件夹，把图片放到里面</p><h5 id="css单独打包"><a href="#css单独打包" class="headerlink" title="css单独打包"></a>css单独打包</h5><p>安装后，config.js文件头部引用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev extract-text-webpack-plugin</span><br><span class="line">const extractTextPlugin = require(&quot;extract-text-webpack-plugin&quot;);</span><br></pre></td></tr></table></figure></p><p>引入成功创建实例后需要在plugins属性中进行配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const extractTextPlugin = new extractTextPlugin(&quot;/css/index.css&quot;)</span><br><span class="line">&#123;</span><br><span class="line">      test: /\.css$/,</span><br><span class="line">      use : extractTextPlugin.extract(&#123;</span><br><span class="line">               fallback: &apos;style-loader&apos;,</span><br><span class="line">               use: [</span><br><span class="line">                  &#123; loader: &apos;css-loader&apos; &#125;,</span><br><span class="line">               ]</span><br><span class="line">      &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="ES6转ES6"><a href="#ES6转ES6" class="headerlink" title="ES6转ES6"></a>ES6转ES6</h5><p>Babel的安装与配置<br><code>cnpm install --save-dev babel-core babel-loader babel-preset-env babel-preset-react</code><br>在webpack中配置Babel的方法如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test:/\.(jsx|js)$/,</span><br><span class="line">use:&#123;</span><br><span class="line">   loader:&apos;babel-loader&apos;,</span><br><span class="line">&#125;,</span><br><span class="line">exclude:/node_modules/</span><br></pre></td></tr></table></figure></p><p>需要在根目录下创建.babelrc文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;:[&quot;react&quot;,&quot;env&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="打包第三方库，比如jQuery"><a href="#打包第三方库，比如jQuery" class="headerlink" title="打包第三方库，比如jQuery"></a>打包第三方库，比如jQuery</h5><p>使用plugin全局引用<br>ProvidePlugin是一个webpack自带的插件，Provide的意思就是装备、提供。因为ProvidePlugin是webpack自带的插件，所以要先再webpack.config.js中引入webpack<br><code>const webpack = require(&#39;webpack&#39;)</code><br>引入成功后配置我们的plugins模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plugins:[</span><br><span class="line">    new webpack.ProvidePlugin(&#123;</span><br><span class="line">        $:&quot;jquery&quot;</span><br><span class="line">    &#125;)</span><br><span class="line">],</span><br></pre></td></tr></table></figure></p><p>一些杂货铺插件，可用可不用<br><code>new webpack.BannerPlugin(&#39;买菜的家朋版权所有&#39;)</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//抽离第三方库，单独打包，不易造成代码冗余</span><br><span class="line">new webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">    //name对应入口文件中的名字，我们起的是jQuery</span><br><span class="line">    name:[&apos;jquery&apos;],</span><br><span class="line">    //把文件打包到哪里，是一个路径</span><br><span class="line">    filename:&quot;assets/js/[name].js&quot;,</span><br><span class="line">    //最小打包的文件模块数，这里直接写2就好</span><br><span class="line">    minChunks:2</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure></p><h4 id="补充：目前发现与之前3-x有两处不同"><a href="#补充：目前发现与之前3-x有两处不同" class="headerlink" title="补充：目前发现与之前3.x有两处不同"></a>补充：目前发现与之前3.x有两处不同</h4><p>1.webpack.optimize.CommonsChunkPlugin这个打包独立模块的插件已被抛弃更改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">optimization: &#123; </span><br><span class="line">   splitChunks: &#123;</span><br><span class="line">   name: &apos;common&apos;,</span><br><span class="line">   filename : &apos;js/base.js&apos;</span><br><span class="line">   &#125; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>2.css打包插件extractTextPlugin已不能进行webpack4.0的打包，需要更新<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save-dev extract-text-webpack-plugin@next </span><br><span class="line">然后在打包就正常了</span><br><span class="line"></span><br><span class="line">&quot;devDependencies&quot;: &#123;</span><br><span class="line">    ...</span><br><span class="line">    &quot;extract-text-webpack-plugin&quot;: &quot;^4.0.0-beta.0&quot;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
